// @generated by protobuf-ts 2.8.2 with parameter long_type_number
// @generated from protobuf file "hypurr/token.proto" (package "hypurr", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { TelegramUserPublic } from "./common";
import { DoubleValue } from "../google/protobuf/wrappers";
import { Int64Value } from "../google/protobuf/wrappers";
/**
 * @generated from protobuf message hypurr.HyperliquidToken
 */
export interface HyperliquidToken {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: int64 index = 3;
     */
    index: number;
    /**
     * @generated from protobuf field: int64 sz_decimals = 4;
     */
    szDecimals: number;
    /**
     * @generated from protobuf field: int64 wei_decimals = 5;
     */
    weiDecimals: number;
    /**
     * @generated from protobuf field: string token_id = 6;
     */
    tokenId: string;
    /**
     * @generated from protobuf field: double circulating_supply = 7;
     */
    circulatingSupply: number;
    /**
     * @generated from protobuf field: hypurr.HyperliquidTokenDeployInfo deploy_info = 8;
     */
    deployInfo?: HyperliquidTokenDeployInfo;
    /**
     * @generated from protobuf field: repeated hypurr.HyperliquidTokenGenesis geneses = 9;
     */
    geneses: HyperliquidTokenGenesis[];
    /**
     * @generated from protobuf field: double hlq_balance = 10;
     */
    hlqBalance: number;
    /**
     * @generated from protobuf field: string full_name = 11;
     */
    fullName: string;
    /**
     * @generated from protobuf field: hypurr.HyperliquidTokenStatistics statistics = 12;
     */
    statistics?: HyperliquidTokenStatistics;
}
/**
 * @generated from protobuf message hypurr.HyperliquidTokenHolder
 */
export interface HyperliquidTokenHolder {
    /**
     * @generated from protobuf field: double balance = 1;
     */
    balance: number;
    /**
     * @generated from protobuf field: string address = 2;
     */
    address: string;
    /**
     * @generated from protobuf field: string type = 3;
     */
    type: string;
}
/**
 * @generated from protobuf message hypurr.HyperliquidTokenStatistics
 */
export interface HyperliquidTokenStatistics {
    /**
     * @generated from protobuf field: int64 token_id = 1;
     */
    tokenId: number;
    /**
     * @generated from protobuf field: int64 holder_count = 2;
     */
    holderCount: number;
    /**
     * @generated from protobuf field: double concentration_coefficient = 3;
     */
    concentrationCoefficient: number;
}
/**
 * @generated from protobuf message hypurr.HyperliquidTokenDeployInfo
 */
export interface HyperliquidTokenDeployInfo {
    /**
     * @generated from protobuf field: int64 token_id = 1;
     */
    tokenId: number;
    /**
     * @generated from protobuf field: int64 height = 2;
     */
    height: number;
    /**
     * @generated from protobuf field: string deployer = 3;
     */
    deployer: string;
    /**
     * @generated from protobuf field: string register_tx = 4;
     */
    registerTx: string;
    /**
     * @generated from protobuf field: string register_spot_tx = 5;
     */
    registerSpotTx: string;
    /**
     * @generated from protobuf field: string genesis_tx = 6;
     */
    genesisTx: string;
    /**
     * @generated from protobuf field: string hyperliquidity_tx = 7;
     */
    hyperliquidityTx: string;
    /**
     * @generated from protobuf field: double hip2_price = 8;
     */
    hip2Price: number;
    /**
     * @generated from protobuf field: int32 hip2_order_count = 9;
     */
    hip2OrderCount: number;
    /**
     * @generated from protobuf field: double hip2_order_size = 10;
     */
    hip2OrderSize: number;
}
/**
 * @generated from protobuf message hypurr.HyperliquidTokenGenesis
 */
export interface HyperliquidTokenGenesis {
    /**
     * @generated from protobuf field: int64 token_id = 1;
     */
    tokenId: number;
    /**
     * @generated from protobuf field: string target = 2;
     */
    target: string;
    /**
     * @generated from protobuf field: double amount = 3;
     */
    amount: number;
    /**
     * @generated from protobuf field: string type = 4;
     */
    type: string;
    /**
     * @generated from protobuf field: google.protobuf.Int64Value target_token_id = 5;
     */
    targetTokenId?: Int64Value;
}
/**
 * @generated from protobuf message hypurr.HyperliquidDeployAuction
 */
export interface HyperliquidDeployAuction {
    /**
     * @generated from protobuf field: int64 start_time = 1;
     */
    startTime: number;
    /**
     * @generated from protobuf field: int64 duration = 2;
     */
    duration: number;
    /**
     * @generated from protobuf field: double start_gas = 3;
     */
    startGas: number;
    /**
     * @generated from protobuf field: google.protobuf.DoubleValue current_gas = 4;
     */
    currentGas?: DoubleValue;
    /**
     * @generated from protobuf field: google.protobuf.DoubleValue end_gas = 5;
     */
    endGas?: DoubleValue;
}
/**
 * @generated from protobuf message hypurr.HyperliquidTokenMessage
 */
export interface HyperliquidTokenMessage {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf field: int64 timestamp = 2;
     */
    timestamp: number;
    /**
     * @generated from protobuf field: int64 token_id = 3;
     */
    tokenId: number;
    /**
     * @generated from protobuf field: int64 telegram_id = 4;
     */
    telegramId: number;
    /**
     * @generated from protobuf field: hypurr.TelegramUserPublic author = 5;
     */
    author?: TelegramUserPublic;
    /**
     * @generated from protobuf field: int64 chat_id = 6;
     */
    chatId: number;
    /**
     * @generated from protobuf field: int64 topic_id = 7;
     */
    topicId: number;
    /**
     * @generated from protobuf field: string message = 8;
     */
    message: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class HyperliquidToken$Type extends MessageType<HyperliquidToken> {
    constructor() {
        super("hypurr.HyperliquidToken", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "index", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "sz_decimals", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 5, name: "wei_decimals", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 6, name: "token_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "circulating_supply", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 8, name: "deploy_info", kind: "message", T: () => HyperliquidTokenDeployInfo },
            { no: 9, name: "geneses", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => HyperliquidTokenGenesis },
            { no: 10, name: "hlq_balance", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 11, name: "full_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "statistics", kind: "message", T: () => HyperliquidTokenStatistics }
        ]);
    }
    create(value?: PartialMessage<HyperliquidToken>): HyperliquidToken {
        const message = { id: 0, name: "", index: 0, szDecimals: 0, weiDecimals: 0, tokenId: "", circulatingSupply: 0, geneses: [], hlqBalance: 0, fullName: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HyperliquidToken>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HyperliquidToken): HyperliquidToken {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toNumber();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* int64 index */ 3:
                    message.index = reader.int64().toNumber();
                    break;
                case /* int64 sz_decimals */ 4:
                    message.szDecimals = reader.int64().toNumber();
                    break;
                case /* int64 wei_decimals */ 5:
                    message.weiDecimals = reader.int64().toNumber();
                    break;
                case /* string token_id */ 6:
                    message.tokenId = reader.string();
                    break;
                case /* double circulating_supply */ 7:
                    message.circulatingSupply = reader.double();
                    break;
                case /* hypurr.HyperliquidTokenDeployInfo deploy_info */ 8:
                    message.deployInfo = HyperliquidTokenDeployInfo.internalBinaryRead(reader, reader.uint32(), options, message.deployInfo);
                    break;
                case /* repeated hypurr.HyperliquidTokenGenesis geneses */ 9:
                    message.geneses.push(HyperliquidTokenGenesis.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* double hlq_balance */ 10:
                    message.hlqBalance = reader.double();
                    break;
                case /* string full_name */ 11:
                    message.fullName = reader.string();
                    break;
                case /* hypurr.HyperliquidTokenStatistics statistics */ 12:
                    message.statistics = HyperliquidTokenStatistics.internalBinaryRead(reader, reader.uint32(), options, message.statistics);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HyperliquidToken, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* int64 index = 3; */
        if (message.index !== 0)
            writer.tag(3, WireType.Varint).int64(message.index);
        /* int64 sz_decimals = 4; */
        if (message.szDecimals !== 0)
            writer.tag(4, WireType.Varint).int64(message.szDecimals);
        /* int64 wei_decimals = 5; */
        if (message.weiDecimals !== 0)
            writer.tag(5, WireType.Varint).int64(message.weiDecimals);
        /* string token_id = 6; */
        if (message.tokenId !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.tokenId);
        /* double circulating_supply = 7; */
        if (message.circulatingSupply !== 0)
            writer.tag(7, WireType.Bit64).double(message.circulatingSupply);
        /* hypurr.HyperliquidTokenDeployInfo deploy_info = 8; */
        if (message.deployInfo)
            HyperliquidTokenDeployInfo.internalBinaryWrite(message.deployInfo, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* repeated hypurr.HyperliquidTokenGenesis geneses = 9; */
        for (let i = 0; i < message.geneses.length; i++)
            HyperliquidTokenGenesis.internalBinaryWrite(message.geneses[i], writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* double hlq_balance = 10; */
        if (message.hlqBalance !== 0)
            writer.tag(10, WireType.Bit64).double(message.hlqBalance);
        /* string full_name = 11; */
        if (message.fullName !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.fullName);
        /* hypurr.HyperliquidTokenStatistics statistics = 12; */
        if (message.statistics)
            HyperliquidTokenStatistics.internalBinaryWrite(message.statistics, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hypurr.HyperliquidToken
 */
export const HyperliquidToken = new HyperliquidToken$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HyperliquidTokenHolder$Type extends MessageType<HyperliquidTokenHolder> {
    constructor() {
        super("hypurr.HyperliquidTokenHolder", [
            { no: 1, name: "balance", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 2, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<HyperliquidTokenHolder>): HyperliquidTokenHolder {
        const message = { balance: 0, address: "", type: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HyperliquidTokenHolder>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HyperliquidTokenHolder): HyperliquidTokenHolder {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* double balance */ 1:
                    message.balance = reader.double();
                    break;
                case /* string address */ 2:
                    message.address = reader.string();
                    break;
                case /* string type */ 3:
                    message.type = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HyperliquidTokenHolder, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* double balance = 1; */
        if (message.balance !== 0)
            writer.tag(1, WireType.Bit64).double(message.balance);
        /* string address = 2; */
        if (message.address !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.address);
        /* string type = 3; */
        if (message.type !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.type);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hypurr.HyperliquidTokenHolder
 */
export const HyperliquidTokenHolder = new HyperliquidTokenHolder$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HyperliquidTokenStatistics$Type extends MessageType<HyperliquidTokenStatistics> {
    constructor() {
        super("hypurr.HyperliquidTokenStatistics", [
            { no: 1, name: "token_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "holder_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "concentration_coefficient", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<HyperliquidTokenStatistics>): HyperliquidTokenStatistics {
        const message = { tokenId: 0, holderCount: 0, concentrationCoefficient: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HyperliquidTokenStatistics>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HyperliquidTokenStatistics): HyperliquidTokenStatistics {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 token_id */ 1:
                    message.tokenId = reader.int64().toNumber();
                    break;
                case /* int64 holder_count */ 2:
                    message.holderCount = reader.int64().toNumber();
                    break;
                case /* double concentration_coefficient */ 3:
                    message.concentrationCoefficient = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HyperliquidTokenStatistics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 token_id = 1; */
        if (message.tokenId !== 0)
            writer.tag(1, WireType.Varint).int64(message.tokenId);
        /* int64 holder_count = 2; */
        if (message.holderCount !== 0)
            writer.tag(2, WireType.Varint).int64(message.holderCount);
        /* double concentration_coefficient = 3; */
        if (message.concentrationCoefficient !== 0)
            writer.tag(3, WireType.Bit64).double(message.concentrationCoefficient);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hypurr.HyperliquidTokenStatistics
 */
export const HyperliquidTokenStatistics = new HyperliquidTokenStatistics$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HyperliquidTokenDeployInfo$Type extends MessageType<HyperliquidTokenDeployInfo> {
    constructor() {
        super("hypurr.HyperliquidTokenDeployInfo", [
            { no: 1, name: "token_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "height", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "deployer", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "register_tx", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "register_spot_tx", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "genesis_tx", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "hyperliquidity_tx", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "hip2_price", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 9, name: "hip2_order_count", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "hip2_order_size", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<HyperliquidTokenDeployInfo>): HyperliquidTokenDeployInfo {
        const message = { tokenId: 0, height: 0, deployer: "", registerTx: "", registerSpotTx: "", genesisTx: "", hyperliquidityTx: "", hip2Price: 0, hip2OrderCount: 0, hip2OrderSize: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HyperliquidTokenDeployInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HyperliquidTokenDeployInfo): HyperliquidTokenDeployInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 token_id */ 1:
                    message.tokenId = reader.int64().toNumber();
                    break;
                case /* int64 height */ 2:
                    message.height = reader.int64().toNumber();
                    break;
                case /* string deployer */ 3:
                    message.deployer = reader.string();
                    break;
                case /* string register_tx */ 4:
                    message.registerTx = reader.string();
                    break;
                case /* string register_spot_tx */ 5:
                    message.registerSpotTx = reader.string();
                    break;
                case /* string genesis_tx */ 6:
                    message.genesisTx = reader.string();
                    break;
                case /* string hyperliquidity_tx */ 7:
                    message.hyperliquidityTx = reader.string();
                    break;
                case /* double hip2_price */ 8:
                    message.hip2Price = reader.double();
                    break;
                case /* int32 hip2_order_count */ 9:
                    message.hip2OrderCount = reader.int32();
                    break;
                case /* double hip2_order_size */ 10:
                    message.hip2OrderSize = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HyperliquidTokenDeployInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 token_id = 1; */
        if (message.tokenId !== 0)
            writer.tag(1, WireType.Varint).int64(message.tokenId);
        /* int64 height = 2; */
        if (message.height !== 0)
            writer.tag(2, WireType.Varint).int64(message.height);
        /* string deployer = 3; */
        if (message.deployer !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.deployer);
        /* string register_tx = 4; */
        if (message.registerTx !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.registerTx);
        /* string register_spot_tx = 5; */
        if (message.registerSpotTx !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.registerSpotTx);
        /* string genesis_tx = 6; */
        if (message.genesisTx !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.genesisTx);
        /* string hyperliquidity_tx = 7; */
        if (message.hyperliquidityTx !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.hyperliquidityTx);
        /* double hip2_price = 8; */
        if (message.hip2Price !== 0)
            writer.tag(8, WireType.Bit64).double(message.hip2Price);
        /* int32 hip2_order_count = 9; */
        if (message.hip2OrderCount !== 0)
            writer.tag(9, WireType.Varint).int32(message.hip2OrderCount);
        /* double hip2_order_size = 10; */
        if (message.hip2OrderSize !== 0)
            writer.tag(10, WireType.Bit64).double(message.hip2OrderSize);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hypurr.HyperliquidTokenDeployInfo
 */
export const HyperliquidTokenDeployInfo = new HyperliquidTokenDeployInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HyperliquidTokenGenesis$Type extends MessageType<HyperliquidTokenGenesis> {
    constructor() {
        super("hypurr.HyperliquidTokenGenesis", [
            { no: 1, name: "token_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "target", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "amount", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "target_token_id", kind: "message", T: () => Int64Value }
        ]);
    }
    create(value?: PartialMessage<HyperliquidTokenGenesis>): HyperliquidTokenGenesis {
        const message = { tokenId: 0, target: "", amount: 0, type: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HyperliquidTokenGenesis>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HyperliquidTokenGenesis): HyperliquidTokenGenesis {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 token_id */ 1:
                    message.tokenId = reader.int64().toNumber();
                    break;
                case /* string target */ 2:
                    message.target = reader.string();
                    break;
                case /* double amount */ 3:
                    message.amount = reader.double();
                    break;
                case /* string type */ 4:
                    message.type = reader.string();
                    break;
                case /* google.protobuf.Int64Value target_token_id */ 5:
                    message.targetTokenId = Int64Value.internalBinaryRead(reader, reader.uint32(), options, message.targetTokenId);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HyperliquidTokenGenesis, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 token_id = 1; */
        if (message.tokenId !== 0)
            writer.tag(1, WireType.Varint).int64(message.tokenId);
        /* string target = 2; */
        if (message.target !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.target);
        /* double amount = 3; */
        if (message.amount !== 0)
            writer.tag(3, WireType.Bit64).double(message.amount);
        /* string type = 4; */
        if (message.type !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.type);
        /* google.protobuf.Int64Value target_token_id = 5; */
        if (message.targetTokenId)
            Int64Value.internalBinaryWrite(message.targetTokenId, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hypurr.HyperliquidTokenGenesis
 */
export const HyperliquidTokenGenesis = new HyperliquidTokenGenesis$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HyperliquidDeployAuction$Type extends MessageType<HyperliquidDeployAuction> {
    constructor() {
        super("hypurr.HyperliquidDeployAuction", [
            { no: 1, name: "start_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "start_gas", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "current_gas", kind: "message", T: () => DoubleValue },
            { no: 5, name: "end_gas", kind: "message", T: () => DoubleValue }
        ]);
    }
    create(value?: PartialMessage<HyperliquidDeployAuction>): HyperliquidDeployAuction {
        const message = { startTime: 0, duration: 0, startGas: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HyperliquidDeployAuction>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HyperliquidDeployAuction): HyperliquidDeployAuction {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 start_time */ 1:
                    message.startTime = reader.int64().toNumber();
                    break;
                case /* int64 duration */ 2:
                    message.duration = reader.int64().toNumber();
                    break;
                case /* double start_gas */ 3:
                    message.startGas = reader.double();
                    break;
                case /* google.protobuf.DoubleValue current_gas */ 4:
                    message.currentGas = DoubleValue.internalBinaryRead(reader, reader.uint32(), options, message.currentGas);
                    break;
                case /* google.protobuf.DoubleValue end_gas */ 5:
                    message.endGas = DoubleValue.internalBinaryRead(reader, reader.uint32(), options, message.endGas);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HyperliquidDeployAuction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 start_time = 1; */
        if (message.startTime !== 0)
            writer.tag(1, WireType.Varint).int64(message.startTime);
        /* int64 duration = 2; */
        if (message.duration !== 0)
            writer.tag(2, WireType.Varint).int64(message.duration);
        /* double start_gas = 3; */
        if (message.startGas !== 0)
            writer.tag(3, WireType.Bit64).double(message.startGas);
        /* google.protobuf.DoubleValue current_gas = 4; */
        if (message.currentGas)
            DoubleValue.internalBinaryWrite(message.currentGas, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.DoubleValue end_gas = 5; */
        if (message.endGas)
            DoubleValue.internalBinaryWrite(message.endGas, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hypurr.HyperliquidDeployAuction
 */
export const HyperliquidDeployAuction = new HyperliquidDeployAuction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HyperliquidTokenMessage$Type extends MessageType<HyperliquidTokenMessage> {
    constructor() {
        super("hypurr.HyperliquidTokenMessage", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "timestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "token_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "telegram_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 5, name: "author", kind: "message", T: () => TelegramUserPublic },
            { no: 6, name: "chat_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 7, name: "topic_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 8, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<HyperliquidTokenMessage>): HyperliquidTokenMessage {
        const message = { id: 0, timestamp: 0, tokenId: 0, telegramId: 0, chatId: 0, topicId: 0, message: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HyperliquidTokenMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HyperliquidTokenMessage): HyperliquidTokenMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toNumber();
                    break;
                case /* int64 timestamp */ 2:
                    message.timestamp = reader.int64().toNumber();
                    break;
                case /* int64 token_id */ 3:
                    message.tokenId = reader.int64().toNumber();
                    break;
                case /* int64 telegram_id */ 4:
                    message.telegramId = reader.int64().toNumber();
                    break;
                case /* hypurr.TelegramUserPublic author */ 5:
                    message.author = TelegramUserPublic.internalBinaryRead(reader, reader.uint32(), options, message.author);
                    break;
                case /* int64 chat_id */ 6:
                    message.chatId = reader.int64().toNumber();
                    break;
                case /* int64 topic_id */ 7:
                    message.topicId = reader.int64().toNumber();
                    break;
                case /* string message */ 8:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HyperliquidTokenMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* int64 timestamp = 2; */
        if (message.timestamp !== 0)
            writer.tag(2, WireType.Varint).int64(message.timestamp);
        /* int64 token_id = 3; */
        if (message.tokenId !== 0)
            writer.tag(3, WireType.Varint).int64(message.tokenId);
        /* int64 telegram_id = 4; */
        if (message.telegramId !== 0)
            writer.tag(4, WireType.Varint).int64(message.telegramId);
        /* hypurr.TelegramUserPublic author = 5; */
        if (message.author)
            TelegramUserPublic.internalBinaryWrite(message.author, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* int64 chat_id = 6; */
        if (message.chatId !== 0)
            writer.tag(6, WireType.Varint).int64(message.chatId);
        /* int64 topic_id = 7; */
        if (message.topicId !== 0)
            writer.tag(7, WireType.Varint).int64(message.topicId);
        /* string message = 8; */
        if (message.message !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hypurr.HyperliquidTokenMessage
 */
export const HyperliquidTokenMessage = new HyperliquidTokenMessage$Type();
