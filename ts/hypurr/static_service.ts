// @generated by protobuf-ts 2.8.2 with parameter long_type_number
// @generated from protobuf file "hypurr/static_service.proto" (package "hypurr", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { HypurrFunCabalPerformance } from "./cabal";
import { HypurrFunCabal } from "./cabal";
import { Performance } from "./wallet";
import { HyperliquidLaunchHolder } from "./launch";
import { HyperliquidLaunchMessage } from "./launch";
import { BoolValue } from "../google/protobuf/wrappers";
import { HyperliquidLaunchCandle } from "./launch";
import { HyperliquidLaunchPosition } from "./launch";
import { HyperliquidLaunchFill } from "./launch";
import { HyperliquidWalletDeploySession } from "./wallet";
import { Int64Value } from "../google/protobuf/wrappers";
import { HyperliquidLaunch } from "./launch";
import { HyperliquidWallet } from "./wallet";
import { StringValue } from "../google/protobuf/wrappers";
import { HyperliquidPerpPair } from "./pairs";
import { HyperliquidSpotPair } from "./pairs";
import { HyperliquidTokenMessage } from "./token";
import { HyperliquidToken } from "./token";
import { HyperliquidDeployAuction } from "./token";
import { HyperliquidTokenHolder } from "./token";
/**
 * @generated from protobuf message hypurr.HyperliquidTokenHoldersRequest
 */
export interface HyperliquidTokenHoldersRequest {
    /**
     * @generated from protobuf field: int64 token_id = 1;
     */
    tokenId: number;
}
/**
 * @generated from protobuf message hypurr.HyperliquidTokenHoldersResponse
 */
export interface HyperliquidTokenHoldersResponse {
    /**
     * @generated from protobuf field: repeated hypurr.HyperliquidTokenHolder holders = 1;
     */
    holders: HyperliquidTokenHolder[];
}
/**
 * @generated from protobuf message hypurr.HyperliquidDeployAuctionRequest
 */
export interface HyperliquidDeployAuctionRequest {
}
/**
 * @generated from protobuf message hypurr.HyperliquidDeployAuctionResponse
 */
export interface HyperliquidDeployAuctionResponse {
    /**
     * @generated from protobuf field: hypurr.HyperliquidDeployAuction auction = 1;
     */
    auction?: HyperliquidDeployAuction;
}
/**
 * @generated from protobuf message hypurr.HyperliquidTokensRequest
 */
export interface HyperliquidTokensRequest {
}
/**
 * @generated from protobuf message hypurr.HyperliquidTokensResponse
 */
export interface HyperliquidTokensResponse {
    /**
     * @generated from protobuf field: repeated hypurr.HyperliquidToken tokens = 1;
     */
    tokens: HyperliquidToken[];
}
/**
 * @generated from protobuf message hypurr.HyperliquidTokenMessagesRequest
 */
export interface HyperliquidTokenMessagesRequest {
    /**
     * @generated from protobuf field: int64 token_id = 1;
     */
    tokenId: number;
}
/**
 * @generated from protobuf message hypurr.HyperliquidTokenMessagesResponse
 */
export interface HyperliquidTokenMessagesResponse {
    /**
     * @generated from protobuf field: repeated hypurr.HyperliquidTokenMessage messages = 1;
     */
    messages: HyperliquidTokenMessage[];
}
/**
 * @generated from protobuf message hypurr.HyperliquidSpotPairRequest
 */
export interface HyperliquidSpotPairRequest {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: number;
}
/**
 * @generated from protobuf message hypurr.HyperliquidSpotPairResponse
 */
export interface HyperliquidSpotPairResponse {
    /**
     * @generated from protobuf field: hypurr.HyperliquidSpotPair pair = 1;
     */
    pair?: HyperliquidSpotPair;
}
/**
 * @generated from protobuf message hypurr.HyperliquidSpotPairsRequest
 */
export interface HyperliquidSpotPairsRequest {
}
/**
 * @generated from protobuf message hypurr.HyperliquidSpotPairsResponse
 */
export interface HyperliquidSpotPairsResponse {
    /**
     * @generated from protobuf field: repeated hypurr.HyperliquidSpotPair pairs = 1;
     */
    pairs: HyperliquidSpotPair[];
}
/**
 * @generated from protobuf message hypurr.HyperliquidPerpPairsRequest
 */
export interface HyperliquidPerpPairsRequest {
}
/**
 * @generated from protobuf message hypurr.HyperliquidPerpPairsResponse
 */
export interface HyperliquidPerpPairsResponse {
    /**
     * @generated from protobuf field: repeated hypurr.HyperliquidPerpPair pairs = 1;
     */
    pairs: HyperliquidPerpPair[];
}
/**
 * @generated from protobuf message hypurr.HyperliquidWalletRequest
 */
export interface HyperliquidWalletRequest {
    /**
     * @generated from protobuf field: google.protobuf.StringValue ethereum_address = 1;
     */
    ethereumAddress?: StringValue;
}
/**
 * @generated from protobuf message hypurr.HyperliquidWalletResponse
 */
export interface HyperliquidWalletResponse {
    /**
     * @generated from protobuf field: hypurr.HyperliquidWallet wallet = 1;
     */
    wallet?: HyperliquidWallet;
}
/**
 * @generated from protobuf message hypurr.HyperliquidLaunchesRequest
 */
export interface HyperliquidLaunchesRequest {
    /**
     * @generated from protobuf field: repeated int64 launch_ids = 1;
     */
    launchIds: number[];
}
/**
 * @generated from protobuf message hypurr.HyperliquidLaunchesResponse
 */
export interface HyperliquidLaunchesResponse {
    /**
     * @generated from protobuf field: repeated hypurr.HyperliquidLaunch launches = 1;
     */
    launches: HyperliquidLaunch[];
}
/**
 * @generated from protobuf message hypurr.HyperliquidLaunchStreamRequest
 */
export interface HyperliquidLaunchStreamRequest {
    /**
     * @generated from protobuf field: google.protobuf.Int64Value launch_id = 1;
     */
    launchId?: Int64Value;
    /**
     * Default: 200
     *
     * @generated from protobuf field: google.protobuf.Int64Value limit = 2;
     */
    limit?: Int64Value;
}
/**
 * @generated from protobuf message hypurr.HyperliquidLaunchStreamResponse
 */
export interface HyperliquidLaunchStreamResponse {
    /**
     * @generated from protobuf field: repeated hypurr.HyperliquidLaunch launches = 1;
     */
    launches: HyperliquidLaunch[];
}
/**
 * @generated from protobuf message hypurr.HyperliquidWalletDeploySessionsRequest
 */
export interface HyperliquidWalletDeploySessionsRequest {
    /**
     * @generated from protobuf field: google.protobuf.Int64Value telegram_id = 1;
     */
    telegramId?: Int64Value;
    /**
     * @generated from protobuf field: google.protobuf.Int64Value wallet_id = 2;
     */
    walletId?: Int64Value;
    /**
     * @generated from protobuf field: google.protobuf.Int64Value session_id = 3;
     */
    sessionId?: Int64Value;
    /**
     * @generated from protobuf field: google.protobuf.StringValue ethereum_address = 4;
     */
    ethereumAddress?: StringValue;
}
/**
 * @generated from protobuf message hypurr.HyperliquidWalletDeploySessionsResponse
 */
export interface HyperliquidWalletDeploySessionsResponse {
    /**
     * @generated from protobuf field: repeated hypurr.HyperliquidWalletDeploySession sessions = 1;
     */
    sessions: HyperliquidWalletDeploySession[];
}
/**
 * @generated from protobuf message hypurr.SetHyperliquidWalletDeploySessionTargetRequest
 */
export interface SetHyperliquidWalletDeploySessionTargetRequest {
    /**
     * @generated from protobuf field: google.protobuf.StringValue ethereum_address = 1;
     */
    ethereumAddress?: StringValue;
    /**
     * @generated from protobuf field: int64 session_id = 2;
     */
    sessionId: number;
    /**
     * @generated from protobuf field: string name = 3;
     */
    name: string;
    /**
     * @generated from protobuf field: string target = 4;
     */
    target: string;
    /**
     * @generated from protobuf field: int32 share = 5;
     */
    share: number;
}
/**
 * @generated from protobuf message hypurr.SetHyperliquidWalletDeploySessionTargetResponse
 */
export interface SetHyperliquidWalletDeploySessionTargetResponse {
    /**
     * @generated from protobuf field: hypurr.HyperliquidWalletDeploySession session = 1;
     */
    session?: HyperliquidWalletDeploySession;
}
/**
 * @generated from protobuf message hypurr.DeleteHyperliquidWalletDeploySessionTargetRequest
 */
export interface DeleteHyperliquidWalletDeploySessionTargetRequest {
    /**
     * @generated from protobuf field: google.protobuf.StringValue ethereum_address = 1;
     */
    ethereumAddress?: StringValue;
    /**
     * @generated from protobuf field: int64 session_id = 2;
     */
    sessionId: number;
    /**
     * @generated from protobuf field: string name = 3;
     */
    name: string;
}
/**
 * @generated from protobuf message hypurr.DeleteHyperliquidWalletDeploySessionTargetResponse
 */
export interface DeleteHyperliquidWalletDeploySessionTargetResponse {
    /**
     * @generated from protobuf field: hypurr.HyperliquidWalletDeploySession session = 1;
     */
    session?: HyperliquidWalletDeploySession;
}
/**
 * @generated from protobuf message hypurr.HyperliquidLaunchFillsRequest
 */
export interface HyperliquidLaunchFillsRequest {
    /**
     * @generated from protobuf field: google.protobuf.Int64Value launch_id = 1;
     */
    launchId?: Int64Value;
    /**
     * @generated from protobuf field: google.protobuf.Int64Value limit = 2;
     */
    limit?: Int64Value;
}
/**
 * @generated from protobuf message hypurr.HyperliquidLaunchFillsResponse
 */
export interface HyperliquidLaunchFillsResponse {
    /**
     * @generated from protobuf field: repeated hypurr.HyperliquidLaunchFill fills = 1;
     */
    fills: HyperliquidLaunchFill[];
    /**
     * @generated from protobuf field: repeated hypurr.HyperliquidLaunchPosition positions = 2;
     */
    positions: HyperliquidLaunchPosition[];
}
/**
 * @generated from protobuf message hypurr.HyperliquidLaunchCandlesRequest
 */
export interface HyperliquidLaunchCandlesRequest {
    /**
     * @generated from protobuf field: int64 launch_id = 1;
     */
    launchId: number;
    /**
     * @generated from protobuf field: string interval = 2;
     */
    interval: string;
}
/**
 * @generated from protobuf message hypurr.HyperliquidLaunchCandlesResponse
 */
export interface HyperliquidLaunchCandlesResponse {
    /**
     * @generated from protobuf field: repeated hypurr.HyperliquidLaunchCandle candles = 1;
     */
    candles: HyperliquidLaunchCandle[];
}
/**
 * @generated from protobuf message hypurr.HyperliquidLaunchRequest
 */
export interface HyperliquidLaunchRequest {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: number;
}
/**
 * @generated from protobuf message hypurr.HyperliquidLaunchResponse
 */
export interface HyperliquidLaunchResponse {
    /**
     * @generated from protobuf field: hypurr.HyperliquidLaunch launch = 1;
     */
    launch?: HyperliquidLaunch;
}
/**
 * @generated from protobuf message hypurr.HyperliquidLaunchMessagesRequest
 */
export interface HyperliquidLaunchMessagesRequest {
    /**
     * @generated from protobuf field: int64 launch_id = 1;
     */
    launchId: number;
    /**
     * @generated from protobuf field: google.protobuf.BoolValue pinned = 2;
     */
    pinned?: BoolValue;
    /**
     * @generated from protobuf field: google.protobuf.BoolValue dev = 3;
     */
    dev?: BoolValue;
}
/**
 * @generated from protobuf message hypurr.HyperliquidLaunchMessagesResponse
 */
export interface HyperliquidLaunchMessagesResponse {
    /**
     * @generated from protobuf field: repeated hypurr.HyperliquidLaunchMessage messages = 1;
     */
    messages: HyperliquidLaunchMessage[];
}
/**
 * @generated from protobuf message hypurr.HyperliquidLaunchHoldersRequest
 */
export interface HyperliquidLaunchHoldersRequest {
    /**
     * @generated from protobuf field: int64 launch_id = 1;
     */
    launchId: number;
}
/**
 * @generated from protobuf message hypurr.HyperliquidLaunchHoldersResponse
 */
export interface HyperliquidLaunchHoldersResponse {
    /**
     * @generated from protobuf field: repeated hypurr.HyperliquidLaunchHolder holders = 1;
     */
    holders: HyperliquidLaunchHolder[];
}
/**
 * @generated from protobuf message hypurr.LatestHyperliquidLaunchFillsRequest
 */
export interface LatestHyperliquidLaunchFillsRequest {
}
/**
 * @generated from protobuf message hypurr.HyperliquidWalletPerformanceRequest
 */
export interface HyperliquidWalletPerformanceRequest {
    /**
     * @generated from protobuf field: google.protobuf.StringValue ethereum_address = 1;
     */
    ethereumAddress?: StringValue;
    /**
     * @generated from protobuf field: string account_type = 2;
     */
    accountType: string;
}
/**
 * @generated from protobuf message hypurr.HyperliquidWalletPerformanceResponse
 */
export interface HyperliquidWalletPerformanceResponse {
    /**
     * @generated from protobuf field: hypurr.Performance spot = 1;
     */
    spot?: Performance;
    /**
     * @generated from protobuf field: hypurr.Performance perp = 2;
     */
    perp?: Performance;
    /**
     * @generated from protobuf field: hypurr.Performance launch = 3;
     */
    launch?: Performance;
}
/**
 * @generated from protobuf message hypurr.HypurrFunCabalsRequest
 */
export interface HypurrFunCabalsRequest {
}
/**
 * @generated from protobuf message hypurr.HypurrFunCabalsResponse
 */
export interface HypurrFunCabalsResponse {
    /**
     * @generated from protobuf field: repeated hypurr.HypurrFunCabal cabals = 1;
     */
    cabals: HypurrFunCabal[];
}
/**
 * @generated from protobuf message hypurr.HypurrFunCabalPerformanceRequest
 */
export interface HypurrFunCabalPerformanceRequest {
    /**
     * @generated from protobuf field: int64 telegram_chat_id = 1;
     */
    telegramChatId: number;
}
/**
 * @generated from protobuf message hypurr.HypurrFunCabalPerformanceResponse
 */
export interface HypurrFunCabalPerformanceResponse {
    /**
     * @generated from protobuf field: repeated hypurr.HypurrFunCabalPerformance performances = 1;
     */
    performances: HypurrFunCabalPerformance[];
}
// @generated message type with reflection information, may provide speed optimized methods
class HyperliquidTokenHoldersRequest$Type extends MessageType<HyperliquidTokenHoldersRequest> {
    constructor() {
        super("hypurr.HyperliquidTokenHoldersRequest", [
            { no: 1, name: "token_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<HyperliquidTokenHoldersRequest>): HyperliquidTokenHoldersRequest {
        const message = { tokenId: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HyperliquidTokenHoldersRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HyperliquidTokenHoldersRequest): HyperliquidTokenHoldersRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 token_id */ 1:
                    message.tokenId = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HyperliquidTokenHoldersRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 token_id = 1; */
        if (message.tokenId !== 0)
            writer.tag(1, WireType.Varint).int64(message.tokenId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hypurr.HyperliquidTokenHoldersRequest
 */
export const HyperliquidTokenHoldersRequest = new HyperliquidTokenHoldersRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HyperliquidTokenHoldersResponse$Type extends MessageType<HyperliquidTokenHoldersResponse> {
    constructor() {
        super("hypurr.HyperliquidTokenHoldersResponse", [
            { no: 1, name: "holders", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => HyperliquidTokenHolder }
        ]);
    }
    create(value?: PartialMessage<HyperliquidTokenHoldersResponse>): HyperliquidTokenHoldersResponse {
        const message = { holders: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HyperliquidTokenHoldersResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HyperliquidTokenHoldersResponse): HyperliquidTokenHoldersResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated hypurr.HyperliquidTokenHolder holders */ 1:
                    message.holders.push(HyperliquidTokenHolder.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HyperliquidTokenHoldersResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated hypurr.HyperliquidTokenHolder holders = 1; */
        for (let i = 0; i < message.holders.length; i++)
            HyperliquidTokenHolder.internalBinaryWrite(message.holders[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hypurr.HyperliquidTokenHoldersResponse
 */
export const HyperliquidTokenHoldersResponse = new HyperliquidTokenHoldersResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HyperliquidDeployAuctionRequest$Type extends MessageType<HyperliquidDeployAuctionRequest> {
    constructor() {
        super("hypurr.HyperliquidDeployAuctionRequest", []);
    }
    create(value?: PartialMessage<HyperliquidDeployAuctionRequest>): HyperliquidDeployAuctionRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HyperliquidDeployAuctionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HyperliquidDeployAuctionRequest): HyperliquidDeployAuctionRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: HyperliquidDeployAuctionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hypurr.HyperliquidDeployAuctionRequest
 */
export const HyperliquidDeployAuctionRequest = new HyperliquidDeployAuctionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HyperliquidDeployAuctionResponse$Type extends MessageType<HyperliquidDeployAuctionResponse> {
    constructor() {
        super("hypurr.HyperliquidDeployAuctionResponse", [
            { no: 1, name: "auction", kind: "message", T: () => HyperliquidDeployAuction }
        ]);
    }
    create(value?: PartialMessage<HyperliquidDeployAuctionResponse>): HyperliquidDeployAuctionResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HyperliquidDeployAuctionResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HyperliquidDeployAuctionResponse): HyperliquidDeployAuctionResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* hypurr.HyperliquidDeployAuction auction */ 1:
                    message.auction = HyperliquidDeployAuction.internalBinaryRead(reader, reader.uint32(), options, message.auction);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HyperliquidDeployAuctionResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* hypurr.HyperliquidDeployAuction auction = 1; */
        if (message.auction)
            HyperliquidDeployAuction.internalBinaryWrite(message.auction, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hypurr.HyperliquidDeployAuctionResponse
 */
export const HyperliquidDeployAuctionResponse = new HyperliquidDeployAuctionResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HyperliquidTokensRequest$Type extends MessageType<HyperliquidTokensRequest> {
    constructor() {
        super("hypurr.HyperliquidTokensRequest", []);
    }
    create(value?: PartialMessage<HyperliquidTokensRequest>): HyperliquidTokensRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HyperliquidTokensRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HyperliquidTokensRequest): HyperliquidTokensRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: HyperliquidTokensRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hypurr.HyperliquidTokensRequest
 */
export const HyperliquidTokensRequest = new HyperliquidTokensRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HyperliquidTokensResponse$Type extends MessageType<HyperliquidTokensResponse> {
    constructor() {
        super("hypurr.HyperliquidTokensResponse", [
            { no: 1, name: "tokens", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => HyperliquidToken }
        ]);
    }
    create(value?: PartialMessage<HyperliquidTokensResponse>): HyperliquidTokensResponse {
        const message = { tokens: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HyperliquidTokensResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HyperliquidTokensResponse): HyperliquidTokensResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated hypurr.HyperliquidToken tokens */ 1:
                    message.tokens.push(HyperliquidToken.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HyperliquidTokensResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated hypurr.HyperliquidToken tokens = 1; */
        for (let i = 0; i < message.tokens.length; i++)
            HyperliquidToken.internalBinaryWrite(message.tokens[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hypurr.HyperliquidTokensResponse
 */
export const HyperliquidTokensResponse = new HyperliquidTokensResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HyperliquidTokenMessagesRequest$Type extends MessageType<HyperliquidTokenMessagesRequest> {
    constructor() {
        super("hypurr.HyperliquidTokenMessagesRequest", [
            { no: 1, name: "token_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<HyperliquidTokenMessagesRequest>): HyperliquidTokenMessagesRequest {
        const message = { tokenId: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HyperliquidTokenMessagesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HyperliquidTokenMessagesRequest): HyperliquidTokenMessagesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 token_id */ 1:
                    message.tokenId = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HyperliquidTokenMessagesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 token_id = 1; */
        if (message.tokenId !== 0)
            writer.tag(1, WireType.Varint).int64(message.tokenId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hypurr.HyperliquidTokenMessagesRequest
 */
export const HyperliquidTokenMessagesRequest = new HyperliquidTokenMessagesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HyperliquidTokenMessagesResponse$Type extends MessageType<HyperliquidTokenMessagesResponse> {
    constructor() {
        super("hypurr.HyperliquidTokenMessagesResponse", [
            { no: 1, name: "messages", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => HyperliquidTokenMessage }
        ]);
    }
    create(value?: PartialMessage<HyperliquidTokenMessagesResponse>): HyperliquidTokenMessagesResponse {
        const message = { messages: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HyperliquidTokenMessagesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HyperliquidTokenMessagesResponse): HyperliquidTokenMessagesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated hypurr.HyperliquidTokenMessage messages */ 1:
                    message.messages.push(HyperliquidTokenMessage.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HyperliquidTokenMessagesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated hypurr.HyperliquidTokenMessage messages = 1; */
        for (let i = 0; i < message.messages.length; i++)
            HyperliquidTokenMessage.internalBinaryWrite(message.messages[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hypurr.HyperliquidTokenMessagesResponse
 */
export const HyperliquidTokenMessagesResponse = new HyperliquidTokenMessagesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HyperliquidSpotPairRequest$Type extends MessageType<HyperliquidSpotPairRequest> {
    constructor() {
        super("hypurr.HyperliquidSpotPairRequest", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<HyperliquidSpotPairRequest>): HyperliquidSpotPairRequest {
        const message = { id: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HyperliquidSpotPairRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HyperliquidSpotPairRequest): HyperliquidSpotPairRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HyperliquidSpotPairRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int64(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hypurr.HyperliquidSpotPairRequest
 */
export const HyperliquidSpotPairRequest = new HyperliquidSpotPairRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HyperliquidSpotPairResponse$Type extends MessageType<HyperliquidSpotPairResponse> {
    constructor() {
        super("hypurr.HyperliquidSpotPairResponse", [
            { no: 1, name: "pair", kind: "message", T: () => HyperliquidSpotPair }
        ]);
    }
    create(value?: PartialMessage<HyperliquidSpotPairResponse>): HyperliquidSpotPairResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HyperliquidSpotPairResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HyperliquidSpotPairResponse): HyperliquidSpotPairResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* hypurr.HyperliquidSpotPair pair */ 1:
                    message.pair = HyperliquidSpotPair.internalBinaryRead(reader, reader.uint32(), options, message.pair);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HyperliquidSpotPairResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* hypurr.HyperliquidSpotPair pair = 1; */
        if (message.pair)
            HyperliquidSpotPair.internalBinaryWrite(message.pair, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hypurr.HyperliquidSpotPairResponse
 */
export const HyperliquidSpotPairResponse = new HyperliquidSpotPairResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HyperliquidSpotPairsRequest$Type extends MessageType<HyperliquidSpotPairsRequest> {
    constructor() {
        super("hypurr.HyperliquidSpotPairsRequest", []);
    }
    create(value?: PartialMessage<HyperliquidSpotPairsRequest>): HyperliquidSpotPairsRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HyperliquidSpotPairsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HyperliquidSpotPairsRequest): HyperliquidSpotPairsRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: HyperliquidSpotPairsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hypurr.HyperliquidSpotPairsRequest
 */
export const HyperliquidSpotPairsRequest = new HyperliquidSpotPairsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HyperliquidSpotPairsResponse$Type extends MessageType<HyperliquidSpotPairsResponse> {
    constructor() {
        super("hypurr.HyperliquidSpotPairsResponse", [
            { no: 1, name: "pairs", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => HyperliquidSpotPair }
        ]);
    }
    create(value?: PartialMessage<HyperliquidSpotPairsResponse>): HyperliquidSpotPairsResponse {
        const message = { pairs: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HyperliquidSpotPairsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HyperliquidSpotPairsResponse): HyperliquidSpotPairsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated hypurr.HyperliquidSpotPair pairs */ 1:
                    message.pairs.push(HyperliquidSpotPair.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HyperliquidSpotPairsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated hypurr.HyperliquidSpotPair pairs = 1; */
        for (let i = 0; i < message.pairs.length; i++)
            HyperliquidSpotPair.internalBinaryWrite(message.pairs[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hypurr.HyperliquidSpotPairsResponse
 */
export const HyperliquidSpotPairsResponse = new HyperliquidSpotPairsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HyperliquidPerpPairsRequest$Type extends MessageType<HyperliquidPerpPairsRequest> {
    constructor() {
        super("hypurr.HyperliquidPerpPairsRequest", []);
    }
    create(value?: PartialMessage<HyperliquidPerpPairsRequest>): HyperliquidPerpPairsRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HyperliquidPerpPairsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HyperliquidPerpPairsRequest): HyperliquidPerpPairsRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: HyperliquidPerpPairsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hypurr.HyperliquidPerpPairsRequest
 */
export const HyperliquidPerpPairsRequest = new HyperliquidPerpPairsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HyperliquidPerpPairsResponse$Type extends MessageType<HyperliquidPerpPairsResponse> {
    constructor() {
        super("hypurr.HyperliquidPerpPairsResponse", [
            { no: 1, name: "pairs", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => HyperliquidPerpPair }
        ]);
    }
    create(value?: PartialMessage<HyperliquidPerpPairsResponse>): HyperliquidPerpPairsResponse {
        const message = { pairs: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HyperliquidPerpPairsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HyperliquidPerpPairsResponse): HyperliquidPerpPairsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated hypurr.HyperliquidPerpPair pairs */ 1:
                    message.pairs.push(HyperliquidPerpPair.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HyperliquidPerpPairsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated hypurr.HyperliquidPerpPair pairs = 1; */
        for (let i = 0; i < message.pairs.length; i++)
            HyperliquidPerpPair.internalBinaryWrite(message.pairs[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hypurr.HyperliquidPerpPairsResponse
 */
export const HyperliquidPerpPairsResponse = new HyperliquidPerpPairsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HyperliquidWalletRequest$Type extends MessageType<HyperliquidWalletRequest> {
    constructor() {
        super("hypurr.HyperliquidWalletRequest", [
            { no: 1, name: "ethereum_address", kind: "message", T: () => StringValue }
        ]);
    }
    create(value?: PartialMessage<HyperliquidWalletRequest>): HyperliquidWalletRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HyperliquidWalletRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HyperliquidWalletRequest): HyperliquidWalletRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.StringValue ethereum_address */ 1:
                    message.ethereumAddress = StringValue.internalBinaryRead(reader, reader.uint32(), options, message.ethereumAddress);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HyperliquidWalletRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.StringValue ethereum_address = 1; */
        if (message.ethereumAddress)
            StringValue.internalBinaryWrite(message.ethereumAddress, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hypurr.HyperliquidWalletRequest
 */
export const HyperliquidWalletRequest = new HyperliquidWalletRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HyperliquidWalletResponse$Type extends MessageType<HyperliquidWalletResponse> {
    constructor() {
        super("hypurr.HyperliquidWalletResponse", [
            { no: 1, name: "wallet", kind: "message", T: () => HyperliquidWallet }
        ]);
    }
    create(value?: PartialMessage<HyperliquidWalletResponse>): HyperliquidWalletResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HyperliquidWalletResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HyperliquidWalletResponse): HyperliquidWalletResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* hypurr.HyperliquidWallet wallet */ 1:
                    message.wallet = HyperliquidWallet.internalBinaryRead(reader, reader.uint32(), options, message.wallet);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HyperliquidWalletResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* hypurr.HyperliquidWallet wallet = 1; */
        if (message.wallet)
            HyperliquidWallet.internalBinaryWrite(message.wallet, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hypurr.HyperliquidWalletResponse
 */
export const HyperliquidWalletResponse = new HyperliquidWalletResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HyperliquidLaunchesRequest$Type extends MessageType<HyperliquidLaunchesRequest> {
    constructor() {
        super("hypurr.HyperliquidLaunchesRequest", [
            { no: 1, name: "launch_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<HyperliquidLaunchesRequest>): HyperliquidLaunchesRequest {
        const message = { launchIds: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HyperliquidLaunchesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HyperliquidLaunchesRequest): HyperliquidLaunchesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated int64 launch_ids */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.launchIds.push(reader.int64().toNumber());
                    else
                        message.launchIds.push(reader.int64().toNumber());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HyperliquidLaunchesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated int64 launch_ids = 1; */
        if (message.launchIds.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.launchIds.length; i++)
                writer.int64(message.launchIds[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hypurr.HyperliquidLaunchesRequest
 */
export const HyperliquidLaunchesRequest = new HyperliquidLaunchesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HyperliquidLaunchesResponse$Type extends MessageType<HyperliquidLaunchesResponse> {
    constructor() {
        super("hypurr.HyperliquidLaunchesResponse", [
            { no: 1, name: "launches", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => HyperliquidLaunch }
        ]);
    }
    create(value?: PartialMessage<HyperliquidLaunchesResponse>): HyperliquidLaunchesResponse {
        const message = { launches: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HyperliquidLaunchesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HyperliquidLaunchesResponse): HyperliquidLaunchesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated hypurr.HyperliquidLaunch launches */ 1:
                    message.launches.push(HyperliquidLaunch.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HyperliquidLaunchesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated hypurr.HyperliquidLaunch launches = 1; */
        for (let i = 0; i < message.launches.length; i++)
            HyperliquidLaunch.internalBinaryWrite(message.launches[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hypurr.HyperliquidLaunchesResponse
 */
export const HyperliquidLaunchesResponse = new HyperliquidLaunchesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HyperliquidLaunchStreamRequest$Type extends MessageType<HyperliquidLaunchStreamRequest> {
    constructor() {
        super("hypurr.HyperliquidLaunchStreamRequest", [
            { no: 1, name: "launch_id", kind: "message", T: () => Int64Value },
            { no: 2, name: "limit", kind: "message", T: () => Int64Value }
        ]);
    }
    create(value?: PartialMessage<HyperliquidLaunchStreamRequest>): HyperliquidLaunchStreamRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HyperliquidLaunchStreamRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HyperliquidLaunchStreamRequest): HyperliquidLaunchStreamRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Int64Value launch_id */ 1:
                    message.launchId = Int64Value.internalBinaryRead(reader, reader.uint32(), options, message.launchId);
                    break;
                case /* google.protobuf.Int64Value limit */ 2:
                    message.limit = Int64Value.internalBinaryRead(reader, reader.uint32(), options, message.limit);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HyperliquidLaunchStreamRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Int64Value launch_id = 1; */
        if (message.launchId)
            Int64Value.internalBinaryWrite(message.launchId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Int64Value limit = 2; */
        if (message.limit)
            Int64Value.internalBinaryWrite(message.limit, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hypurr.HyperliquidLaunchStreamRequest
 */
export const HyperliquidLaunchStreamRequest = new HyperliquidLaunchStreamRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HyperliquidLaunchStreamResponse$Type extends MessageType<HyperliquidLaunchStreamResponse> {
    constructor() {
        super("hypurr.HyperliquidLaunchStreamResponse", [
            { no: 1, name: "launches", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => HyperliquidLaunch }
        ]);
    }
    create(value?: PartialMessage<HyperliquidLaunchStreamResponse>): HyperliquidLaunchStreamResponse {
        const message = { launches: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HyperliquidLaunchStreamResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HyperliquidLaunchStreamResponse): HyperliquidLaunchStreamResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated hypurr.HyperliquidLaunch launches */ 1:
                    message.launches.push(HyperliquidLaunch.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HyperliquidLaunchStreamResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated hypurr.HyperliquidLaunch launches = 1; */
        for (let i = 0; i < message.launches.length; i++)
            HyperliquidLaunch.internalBinaryWrite(message.launches[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hypurr.HyperliquidLaunchStreamResponse
 */
export const HyperliquidLaunchStreamResponse = new HyperliquidLaunchStreamResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HyperliquidWalletDeploySessionsRequest$Type extends MessageType<HyperliquidWalletDeploySessionsRequest> {
    constructor() {
        super("hypurr.HyperliquidWalletDeploySessionsRequest", [
            { no: 1, name: "telegram_id", kind: "message", T: () => Int64Value },
            { no: 2, name: "wallet_id", kind: "message", T: () => Int64Value },
            { no: 3, name: "session_id", kind: "message", T: () => Int64Value },
            { no: 4, name: "ethereum_address", kind: "message", T: () => StringValue }
        ]);
    }
    create(value?: PartialMessage<HyperliquidWalletDeploySessionsRequest>): HyperliquidWalletDeploySessionsRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HyperliquidWalletDeploySessionsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HyperliquidWalletDeploySessionsRequest): HyperliquidWalletDeploySessionsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Int64Value telegram_id */ 1:
                    message.telegramId = Int64Value.internalBinaryRead(reader, reader.uint32(), options, message.telegramId);
                    break;
                case /* google.protobuf.Int64Value wallet_id */ 2:
                    message.walletId = Int64Value.internalBinaryRead(reader, reader.uint32(), options, message.walletId);
                    break;
                case /* google.protobuf.Int64Value session_id */ 3:
                    message.sessionId = Int64Value.internalBinaryRead(reader, reader.uint32(), options, message.sessionId);
                    break;
                case /* google.protobuf.StringValue ethereum_address */ 4:
                    message.ethereumAddress = StringValue.internalBinaryRead(reader, reader.uint32(), options, message.ethereumAddress);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HyperliquidWalletDeploySessionsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Int64Value telegram_id = 1; */
        if (message.telegramId)
            Int64Value.internalBinaryWrite(message.telegramId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Int64Value wallet_id = 2; */
        if (message.walletId)
            Int64Value.internalBinaryWrite(message.walletId, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Int64Value session_id = 3; */
        if (message.sessionId)
            Int64Value.internalBinaryWrite(message.sessionId, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.StringValue ethereum_address = 4; */
        if (message.ethereumAddress)
            StringValue.internalBinaryWrite(message.ethereumAddress, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hypurr.HyperliquidWalletDeploySessionsRequest
 */
export const HyperliquidWalletDeploySessionsRequest = new HyperliquidWalletDeploySessionsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HyperliquidWalletDeploySessionsResponse$Type extends MessageType<HyperliquidWalletDeploySessionsResponse> {
    constructor() {
        super("hypurr.HyperliquidWalletDeploySessionsResponse", [
            { no: 1, name: "sessions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => HyperliquidWalletDeploySession }
        ]);
    }
    create(value?: PartialMessage<HyperliquidWalletDeploySessionsResponse>): HyperliquidWalletDeploySessionsResponse {
        const message = { sessions: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HyperliquidWalletDeploySessionsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HyperliquidWalletDeploySessionsResponse): HyperliquidWalletDeploySessionsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated hypurr.HyperliquidWalletDeploySession sessions */ 1:
                    message.sessions.push(HyperliquidWalletDeploySession.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HyperliquidWalletDeploySessionsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated hypurr.HyperliquidWalletDeploySession sessions = 1; */
        for (let i = 0; i < message.sessions.length; i++)
            HyperliquidWalletDeploySession.internalBinaryWrite(message.sessions[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hypurr.HyperliquidWalletDeploySessionsResponse
 */
export const HyperliquidWalletDeploySessionsResponse = new HyperliquidWalletDeploySessionsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetHyperliquidWalletDeploySessionTargetRequest$Type extends MessageType<SetHyperliquidWalletDeploySessionTargetRequest> {
    constructor() {
        super("hypurr.SetHyperliquidWalletDeploySessionTargetRequest", [
            { no: 1, name: "ethereum_address", kind: "message", T: () => StringValue },
            { no: 2, name: "session_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "target", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "share", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<SetHyperliquidWalletDeploySessionTargetRequest>): SetHyperliquidWalletDeploySessionTargetRequest {
        const message = { sessionId: 0, name: "", target: "", share: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SetHyperliquidWalletDeploySessionTargetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetHyperliquidWalletDeploySessionTargetRequest): SetHyperliquidWalletDeploySessionTargetRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.StringValue ethereum_address */ 1:
                    message.ethereumAddress = StringValue.internalBinaryRead(reader, reader.uint32(), options, message.ethereumAddress);
                    break;
                case /* int64 session_id */ 2:
                    message.sessionId = reader.int64().toNumber();
                    break;
                case /* string name */ 3:
                    message.name = reader.string();
                    break;
                case /* string target */ 4:
                    message.target = reader.string();
                    break;
                case /* int32 share */ 5:
                    message.share = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetHyperliquidWalletDeploySessionTargetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.StringValue ethereum_address = 1; */
        if (message.ethereumAddress)
            StringValue.internalBinaryWrite(message.ethereumAddress, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 session_id = 2; */
        if (message.sessionId !== 0)
            writer.tag(2, WireType.Varint).int64(message.sessionId);
        /* string name = 3; */
        if (message.name !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        /* string target = 4; */
        if (message.target !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.target);
        /* int32 share = 5; */
        if (message.share !== 0)
            writer.tag(5, WireType.Varint).int32(message.share);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hypurr.SetHyperliquidWalletDeploySessionTargetRequest
 */
export const SetHyperliquidWalletDeploySessionTargetRequest = new SetHyperliquidWalletDeploySessionTargetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetHyperliquidWalletDeploySessionTargetResponse$Type extends MessageType<SetHyperliquidWalletDeploySessionTargetResponse> {
    constructor() {
        super("hypurr.SetHyperliquidWalletDeploySessionTargetResponse", [
            { no: 1, name: "session", kind: "message", T: () => HyperliquidWalletDeploySession }
        ]);
    }
    create(value?: PartialMessage<SetHyperliquidWalletDeploySessionTargetResponse>): SetHyperliquidWalletDeploySessionTargetResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SetHyperliquidWalletDeploySessionTargetResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetHyperliquidWalletDeploySessionTargetResponse): SetHyperliquidWalletDeploySessionTargetResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* hypurr.HyperliquidWalletDeploySession session */ 1:
                    message.session = HyperliquidWalletDeploySession.internalBinaryRead(reader, reader.uint32(), options, message.session);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetHyperliquidWalletDeploySessionTargetResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* hypurr.HyperliquidWalletDeploySession session = 1; */
        if (message.session)
            HyperliquidWalletDeploySession.internalBinaryWrite(message.session, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hypurr.SetHyperliquidWalletDeploySessionTargetResponse
 */
export const SetHyperliquidWalletDeploySessionTargetResponse = new SetHyperliquidWalletDeploySessionTargetResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteHyperliquidWalletDeploySessionTargetRequest$Type extends MessageType<DeleteHyperliquidWalletDeploySessionTargetRequest> {
    constructor() {
        super("hypurr.DeleteHyperliquidWalletDeploySessionTargetRequest", [
            { no: 1, name: "ethereum_address", kind: "message", T: () => StringValue },
            { no: 2, name: "session_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteHyperliquidWalletDeploySessionTargetRequest>): DeleteHyperliquidWalletDeploySessionTargetRequest {
        const message = { sessionId: 0, name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteHyperliquidWalletDeploySessionTargetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteHyperliquidWalletDeploySessionTargetRequest): DeleteHyperliquidWalletDeploySessionTargetRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.StringValue ethereum_address */ 1:
                    message.ethereumAddress = StringValue.internalBinaryRead(reader, reader.uint32(), options, message.ethereumAddress);
                    break;
                case /* int64 session_id */ 2:
                    message.sessionId = reader.int64().toNumber();
                    break;
                case /* string name */ 3:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteHyperliquidWalletDeploySessionTargetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.StringValue ethereum_address = 1; */
        if (message.ethereumAddress)
            StringValue.internalBinaryWrite(message.ethereumAddress, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 session_id = 2; */
        if (message.sessionId !== 0)
            writer.tag(2, WireType.Varint).int64(message.sessionId);
        /* string name = 3; */
        if (message.name !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hypurr.DeleteHyperliquidWalletDeploySessionTargetRequest
 */
export const DeleteHyperliquidWalletDeploySessionTargetRequest = new DeleteHyperliquidWalletDeploySessionTargetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteHyperliquidWalletDeploySessionTargetResponse$Type extends MessageType<DeleteHyperliquidWalletDeploySessionTargetResponse> {
    constructor() {
        super("hypurr.DeleteHyperliquidWalletDeploySessionTargetResponse", [
            { no: 1, name: "session", kind: "message", T: () => HyperliquidWalletDeploySession }
        ]);
    }
    create(value?: PartialMessage<DeleteHyperliquidWalletDeploySessionTargetResponse>): DeleteHyperliquidWalletDeploySessionTargetResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteHyperliquidWalletDeploySessionTargetResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteHyperliquidWalletDeploySessionTargetResponse): DeleteHyperliquidWalletDeploySessionTargetResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* hypurr.HyperliquidWalletDeploySession session */ 1:
                    message.session = HyperliquidWalletDeploySession.internalBinaryRead(reader, reader.uint32(), options, message.session);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteHyperliquidWalletDeploySessionTargetResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* hypurr.HyperliquidWalletDeploySession session = 1; */
        if (message.session)
            HyperliquidWalletDeploySession.internalBinaryWrite(message.session, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hypurr.DeleteHyperliquidWalletDeploySessionTargetResponse
 */
export const DeleteHyperliquidWalletDeploySessionTargetResponse = new DeleteHyperliquidWalletDeploySessionTargetResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HyperliquidLaunchFillsRequest$Type extends MessageType<HyperliquidLaunchFillsRequest> {
    constructor() {
        super("hypurr.HyperliquidLaunchFillsRequest", [
            { no: 1, name: "launch_id", kind: "message", T: () => Int64Value },
            { no: 2, name: "limit", kind: "message", T: () => Int64Value }
        ]);
    }
    create(value?: PartialMessage<HyperliquidLaunchFillsRequest>): HyperliquidLaunchFillsRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HyperliquidLaunchFillsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HyperliquidLaunchFillsRequest): HyperliquidLaunchFillsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Int64Value launch_id */ 1:
                    message.launchId = Int64Value.internalBinaryRead(reader, reader.uint32(), options, message.launchId);
                    break;
                case /* google.protobuf.Int64Value limit */ 2:
                    message.limit = Int64Value.internalBinaryRead(reader, reader.uint32(), options, message.limit);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HyperliquidLaunchFillsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Int64Value launch_id = 1; */
        if (message.launchId)
            Int64Value.internalBinaryWrite(message.launchId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Int64Value limit = 2; */
        if (message.limit)
            Int64Value.internalBinaryWrite(message.limit, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hypurr.HyperliquidLaunchFillsRequest
 */
export const HyperliquidLaunchFillsRequest = new HyperliquidLaunchFillsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HyperliquidLaunchFillsResponse$Type extends MessageType<HyperliquidLaunchFillsResponse> {
    constructor() {
        super("hypurr.HyperliquidLaunchFillsResponse", [
            { no: 1, name: "fills", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => HyperliquidLaunchFill },
            { no: 2, name: "positions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => HyperliquidLaunchPosition }
        ]);
    }
    create(value?: PartialMessage<HyperliquidLaunchFillsResponse>): HyperliquidLaunchFillsResponse {
        const message = { fills: [], positions: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HyperliquidLaunchFillsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HyperliquidLaunchFillsResponse): HyperliquidLaunchFillsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated hypurr.HyperliquidLaunchFill fills */ 1:
                    message.fills.push(HyperliquidLaunchFill.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated hypurr.HyperliquidLaunchPosition positions */ 2:
                    message.positions.push(HyperliquidLaunchPosition.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HyperliquidLaunchFillsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated hypurr.HyperliquidLaunchFill fills = 1; */
        for (let i = 0; i < message.fills.length; i++)
            HyperliquidLaunchFill.internalBinaryWrite(message.fills[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated hypurr.HyperliquidLaunchPosition positions = 2; */
        for (let i = 0; i < message.positions.length; i++)
            HyperliquidLaunchPosition.internalBinaryWrite(message.positions[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hypurr.HyperliquidLaunchFillsResponse
 */
export const HyperliquidLaunchFillsResponse = new HyperliquidLaunchFillsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HyperliquidLaunchCandlesRequest$Type extends MessageType<HyperliquidLaunchCandlesRequest> {
    constructor() {
        super("hypurr.HyperliquidLaunchCandlesRequest", [
            { no: 1, name: "launch_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "interval", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<HyperliquidLaunchCandlesRequest>): HyperliquidLaunchCandlesRequest {
        const message = { launchId: 0, interval: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HyperliquidLaunchCandlesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HyperliquidLaunchCandlesRequest): HyperliquidLaunchCandlesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 launch_id */ 1:
                    message.launchId = reader.int64().toNumber();
                    break;
                case /* string interval */ 2:
                    message.interval = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HyperliquidLaunchCandlesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 launch_id = 1; */
        if (message.launchId !== 0)
            writer.tag(1, WireType.Varint).int64(message.launchId);
        /* string interval = 2; */
        if (message.interval !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.interval);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hypurr.HyperliquidLaunchCandlesRequest
 */
export const HyperliquidLaunchCandlesRequest = new HyperliquidLaunchCandlesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HyperliquidLaunchCandlesResponse$Type extends MessageType<HyperliquidLaunchCandlesResponse> {
    constructor() {
        super("hypurr.HyperliquidLaunchCandlesResponse", [
            { no: 1, name: "candles", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => HyperliquidLaunchCandle }
        ]);
    }
    create(value?: PartialMessage<HyperliquidLaunchCandlesResponse>): HyperliquidLaunchCandlesResponse {
        const message = { candles: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HyperliquidLaunchCandlesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HyperliquidLaunchCandlesResponse): HyperliquidLaunchCandlesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated hypurr.HyperliquidLaunchCandle candles */ 1:
                    message.candles.push(HyperliquidLaunchCandle.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HyperliquidLaunchCandlesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated hypurr.HyperliquidLaunchCandle candles = 1; */
        for (let i = 0; i < message.candles.length; i++)
            HyperliquidLaunchCandle.internalBinaryWrite(message.candles[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hypurr.HyperliquidLaunchCandlesResponse
 */
export const HyperliquidLaunchCandlesResponse = new HyperliquidLaunchCandlesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HyperliquidLaunchRequest$Type extends MessageType<HyperliquidLaunchRequest> {
    constructor() {
        super("hypurr.HyperliquidLaunchRequest", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<HyperliquidLaunchRequest>): HyperliquidLaunchRequest {
        const message = { id: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HyperliquidLaunchRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HyperliquidLaunchRequest): HyperliquidLaunchRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HyperliquidLaunchRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int64(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hypurr.HyperliquidLaunchRequest
 */
export const HyperliquidLaunchRequest = new HyperliquidLaunchRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HyperliquidLaunchResponse$Type extends MessageType<HyperliquidLaunchResponse> {
    constructor() {
        super("hypurr.HyperliquidLaunchResponse", [
            { no: 1, name: "launch", kind: "message", T: () => HyperliquidLaunch }
        ]);
    }
    create(value?: PartialMessage<HyperliquidLaunchResponse>): HyperliquidLaunchResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HyperliquidLaunchResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HyperliquidLaunchResponse): HyperliquidLaunchResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* hypurr.HyperliquidLaunch launch */ 1:
                    message.launch = HyperliquidLaunch.internalBinaryRead(reader, reader.uint32(), options, message.launch);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HyperliquidLaunchResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* hypurr.HyperliquidLaunch launch = 1; */
        if (message.launch)
            HyperliquidLaunch.internalBinaryWrite(message.launch, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hypurr.HyperliquidLaunchResponse
 */
export const HyperliquidLaunchResponse = new HyperliquidLaunchResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HyperliquidLaunchMessagesRequest$Type extends MessageType<HyperliquidLaunchMessagesRequest> {
    constructor() {
        super("hypurr.HyperliquidLaunchMessagesRequest", [
            { no: 1, name: "launch_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "pinned", kind: "message", T: () => BoolValue },
            { no: 3, name: "dev", kind: "message", T: () => BoolValue }
        ]);
    }
    create(value?: PartialMessage<HyperliquidLaunchMessagesRequest>): HyperliquidLaunchMessagesRequest {
        const message = { launchId: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HyperliquidLaunchMessagesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HyperliquidLaunchMessagesRequest): HyperliquidLaunchMessagesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 launch_id */ 1:
                    message.launchId = reader.int64().toNumber();
                    break;
                case /* google.protobuf.BoolValue pinned */ 2:
                    message.pinned = BoolValue.internalBinaryRead(reader, reader.uint32(), options, message.pinned);
                    break;
                case /* google.protobuf.BoolValue dev */ 3:
                    message.dev = BoolValue.internalBinaryRead(reader, reader.uint32(), options, message.dev);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HyperliquidLaunchMessagesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 launch_id = 1; */
        if (message.launchId !== 0)
            writer.tag(1, WireType.Varint).int64(message.launchId);
        /* google.protobuf.BoolValue pinned = 2; */
        if (message.pinned)
            BoolValue.internalBinaryWrite(message.pinned, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.BoolValue dev = 3; */
        if (message.dev)
            BoolValue.internalBinaryWrite(message.dev, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hypurr.HyperliquidLaunchMessagesRequest
 */
export const HyperliquidLaunchMessagesRequest = new HyperliquidLaunchMessagesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HyperliquidLaunchMessagesResponse$Type extends MessageType<HyperliquidLaunchMessagesResponse> {
    constructor() {
        super("hypurr.HyperliquidLaunchMessagesResponse", [
            { no: 1, name: "messages", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => HyperliquidLaunchMessage }
        ]);
    }
    create(value?: PartialMessage<HyperliquidLaunchMessagesResponse>): HyperliquidLaunchMessagesResponse {
        const message = { messages: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HyperliquidLaunchMessagesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HyperliquidLaunchMessagesResponse): HyperliquidLaunchMessagesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated hypurr.HyperliquidLaunchMessage messages */ 1:
                    message.messages.push(HyperliquidLaunchMessage.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HyperliquidLaunchMessagesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated hypurr.HyperliquidLaunchMessage messages = 1; */
        for (let i = 0; i < message.messages.length; i++)
            HyperliquidLaunchMessage.internalBinaryWrite(message.messages[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hypurr.HyperliquidLaunchMessagesResponse
 */
export const HyperliquidLaunchMessagesResponse = new HyperliquidLaunchMessagesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HyperliquidLaunchHoldersRequest$Type extends MessageType<HyperliquidLaunchHoldersRequest> {
    constructor() {
        super("hypurr.HyperliquidLaunchHoldersRequest", [
            { no: 1, name: "launch_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<HyperliquidLaunchHoldersRequest>): HyperliquidLaunchHoldersRequest {
        const message = { launchId: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HyperliquidLaunchHoldersRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HyperliquidLaunchHoldersRequest): HyperliquidLaunchHoldersRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 launch_id */ 1:
                    message.launchId = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HyperliquidLaunchHoldersRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 launch_id = 1; */
        if (message.launchId !== 0)
            writer.tag(1, WireType.Varint).int64(message.launchId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hypurr.HyperliquidLaunchHoldersRequest
 */
export const HyperliquidLaunchHoldersRequest = new HyperliquidLaunchHoldersRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HyperliquidLaunchHoldersResponse$Type extends MessageType<HyperliquidLaunchHoldersResponse> {
    constructor() {
        super("hypurr.HyperliquidLaunchHoldersResponse", [
            { no: 1, name: "holders", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => HyperliquidLaunchHolder }
        ]);
    }
    create(value?: PartialMessage<HyperliquidLaunchHoldersResponse>): HyperliquidLaunchHoldersResponse {
        const message = { holders: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HyperliquidLaunchHoldersResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HyperliquidLaunchHoldersResponse): HyperliquidLaunchHoldersResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated hypurr.HyperliquidLaunchHolder holders */ 1:
                    message.holders.push(HyperliquidLaunchHolder.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HyperliquidLaunchHoldersResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated hypurr.HyperliquidLaunchHolder holders = 1; */
        for (let i = 0; i < message.holders.length; i++)
            HyperliquidLaunchHolder.internalBinaryWrite(message.holders[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hypurr.HyperliquidLaunchHoldersResponse
 */
export const HyperliquidLaunchHoldersResponse = new HyperliquidLaunchHoldersResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LatestHyperliquidLaunchFillsRequest$Type extends MessageType<LatestHyperliquidLaunchFillsRequest> {
    constructor() {
        super("hypurr.LatestHyperliquidLaunchFillsRequest", []);
    }
    create(value?: PartialMessage<LatestHyperliquidLaunchFillsRequest>): LatestHyperliquidLaunchFillsRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LatestHyperliquidLaunchFillsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LatestHyperliquidLaunchFillsRequest): LatestHyperliquidLaunchFillsRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: LatestHyperliquidLaunchFillsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hypurr.LatestHyperliquidLaunchFillsRequest
 */
export const LatestHyperliquidLaunchFillsRequest = new LatestHyperliquidLaunchFillsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HyperliquidWalletPerformanceRequest$Type extends MessageType<HyperliquidWalletPerformanceRequest> {
    constructor() {
        super("hypurr.HyperliquidWalletPerformanceRequest", [
            { no: 1, name: "ethereum_address", kind: "message", T: () => StringValue },
            { no: 2, name: "account_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<HyperliquidWalletPerformanceRequest>): HyperliquidWalletPerformanceRequest {
        const message = { accountType: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HyperliquidWalletPerformanceRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HyperliquidWalletPerformanceRequest): HyperliquidWalletPerformanceRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.StringValue ethereum_address */ 1:
                    message.ethereumAddress = StringValue.internalBinaryRead(reader, reader.uint32(), options, message.ethereumAddress);
                    break;
                case /* string account_type */ 2:
                    message.accountType = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HyperliquidWalletPerformanceRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.StringValue ethereum_address = 1; */
        if (message.ethereumAddress)
            StringValue.internalBinaryWrite(message.ethereumAddress, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string account_type = 2; */
        if (message.accountType !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.accountType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hypurr.HyperliquidWalletPerformanceRequest
 */
export const HyperliquidWalletPerformanceRequest = new HyperliquidWalletPerformanceRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HyperliquidWalletPerformanceResponse$Type extends MessageType<HyperliquidWalletPerformanceResponse> {
    constructor() {
        super("hypurr.HyperliquidWalletPerformanceResponse", [
            { no: 1, name: "spot", kind: "message", T: () => Performance },
            { no: 2, name: "perp", kind: "message", T: () => Performance },
            { no: 3, name: "launch", kind: "message", T: () => Performance }
        ]);
    }
    create(value?: PartialMessage<HyperliquidWalletPerformanceResponse>): HyperliquidWalletPerformanceResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HyperliquidWalletPerformanceResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HyperliquidWalletPerformanceResponse): HyperliquidWalletPerformanceResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* hypurr.Performance spot */ 1:
                    message.spot = Performance.internalBinaryRead(reader, reader.uint32(), options, message.spot);
                    break;
                case /* hypurr.Performance perp */ 2:
                    message.perp = Performance.internalBinaryRead(reader, reader.uint32(), options, message.perp);
                    break;
                case /* hypurr.Performance launch */ 3:
                    message.launch = Performance.internalBinaryRead(reader, reader.uint32(), options, message.launch);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HyperliquidWalletPerformanceResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* hypurr.Performance spot = 1; */
        if (message.spot)
            Performance.internalBinaryWrite(message.spot, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* hypurr.Performance perp = 2; */
        if (message.perp)
            Performance.internalBinaryWrite(message.perp, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* hypurr.Performance launch = 3; */
        if (message.launch)
            Performance.internalBinaryWrite(message.launch, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hypurr.HyperliquidWalletPerformanceResponse
 */
export const HyperliquidWalletPerformanceResponse = new HyperliquidWalletPerformanceResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HypurrFunCabalsRequest$Type extends MessageType<HypurrFunCabalsRequest> {
    constructor() {
        super("hypurr.HypurrFunCabalsRequest", []);
    }
    create(value?: PartialMessage<HypurrFunCabalsRequest>): HypurrFunCabalsRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HypurrFunCabalsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HypurrFunCabalsRequest): HypurrFunCabalsRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: HypurrFunCabalsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hypurr.HypurrFunCabalsRequest
 */
export const HypurrFunCabalsRequest = new HypurrFunCabalsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HypurrFunCabalsResponse$Type extends MessageType<HypurrFunCabalsResponse> {
    constructor() {
        super("hypurr.HypurrFunCabalsResponse", [
            { no: 1, name: "cabals", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => HypurrFunCabal }
        ]);
    }
    create(value?: PartialMessage<HypurrFunCabalsResponse>): HypurrFunCabalsResponse {
        const message = { cabals: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HypurrFunCabalsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HypurrFunCabalsResponse): HypurrFunCabalsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated hypurr.HypurrFunCabal cabals */ 1:
                    message.cabals.push(HypurrFunCabal.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HypurrFunCabalsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated hypurr.HypurrFunCabal cabals = 1; */
        for (let i = 0; i < message.cabals.length; i++)
            HypurrFunCabal.internalBinaryWrite(message.cabals[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hypurr.HypurrFunCabalsResponse
 */
export const HypurrFunCabalsResponse = new HypurrFunCabalsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HypurrFunCabalPerformanceRequest$Type extends MessageType<HypurrFunCabalPerformanceRequest> {
    constructor() {
        super("hypurr.HypurrFunCabalPerformanceRequest", [
            { no: 1, name: "telegram_chat_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<HypurrFunCabalPerformanceRequest>): HypurrFunCabalPerformanceRequest {
        const message = { telegramChatId: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HypurrFunCabalPerformanceRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HypurrFunCabalPerformanceRequest): HypurrFunCabalPerformanceRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 telegram_chat_id */ 1:
                    message.telegramChatId = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HypurrFunCabalPerformanceRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 telegram_chat_id = 1; */
        if (message.telegramChatId !== 0)
            writer.tag(1, WireType.Varint).int64(message.telegramChatId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hypurr.HypurrFunCabalPerformanceRequest
 */
export const HypurrFunCabalPerformanceRequest = new HypurrFunCabalPerformanceRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HypurrFunCabalPerformanceResponse$Type extends MessageType<HypurrFunCabalPerformanceResponse> {
    constructor() {
        super("hypurr.HypurrFunCabalPerformanceResponse", [
            { no: 1, name: "performances", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => HypurrFunCabalPerformance }
        ]);
    }
    create(value?: PartialMessage<HypurrFunCabalPerformanceResponse>): HypurrFunCabalPerformanceResponse {
        const message = { performances: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HypurrFunCabalPerformanceResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HypurrFunCabalPerformanceResponse): HypurrFunCabalPerformanceResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated hypurr.HypurrFunCabalPerformance performances */ 1:
                    message.performances.push(HypurrFunCabalPerformance.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HypurrFunCabalPerformanceResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated hypurr.HypurrFunCabalPerformance performances = 1; */
        for (let i = 0; i < message.performances.length; i++)
            HypurrFunCabalPerformance.internalBinaryWrite(message.performances[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hypurr.HypurrFunCabalPerformanceResponse
 */
export const HypurrFunCabalPerformanceResponse = new HypurrFunCabalPerformanceResponse$Type();
/**
 * @generated ServiceType for protobuf service hypurr.Static
 */
export const Static = new ServiceType("hypurr.Static", [
    { name: "HyperliquidDeployAuction", options: {}, I: HyperliquidDeployAuctionRequest, O: HyperliquidDeployAuctionResponse },
    { name: "HyperliquidTokens", options: {}, I: HyperliquidTokensRequest, O: HyperliquidTokensResponse },
    { name: "HyperliquidTokenHolders", options: {}, I: HyperliquidTokenHoldersRequest, O: HyperliquidTokenHoldersResponse },
    { name: "HyperliquidTokenMessages", serverStreaming: true, options: {}, I: HyperliquidTokenMessagesRequest, O: HyperliquidTokenMessagesResponse },
    { name: "HyperliquidSpotPair", options: {}, I: HyperliquidSpotPairRequest, O: HyperliquidSpotPairResponse },
    { name: "HyperliquidSpotPairs", options: {}, I: HyperliquidSpotPairsRequest, O: HyperliquidSpotPairsResponse },
    { name: "HyperliquidPerpPairs", options: {}, I: HyperliquidPerpPairsRequest, O: HyperliquidPerpPairsResponse },
    { name: "HyperliquidWallet", options: {}, I: HyperliquidWalletRequest, O: HyperliquidWalletResponse },
    { name: "HyperliquidWalletDeploySessions", options: {}, I: HyperliquidWalletDeploySessionsRequest, O: HyperliquidWalletDeploySessionsResponse },
    { name: "HyperliquidWalletPerformance", options: {}, I: HyperliquidWalletPerformanceRequest, O: HyperliquidWalletPerformanceResponse },
    { name: "HyperliquidLaunch", options: {}, I: HyperliquidLaunchRequest, O: HyperliquidLaunchResponse },
    { name: "HyperliquidLaunches", options: {}, I: HyperliquidLaunchesRequest, O: HyperliquidLaunchesResponse },
    { name: "HyperliquidLaunchStream", serverStreaming: true, options: {}, I: HyperliquidLaunchStreamRequest, O: HyperliquidLaunchStreamResponse },
    { name: "HyperliquidLaunchFills", serverStreaming: true, options: {}, I: HyperliquidLaunchFillsRequest, O: HyperliquidLaunchFillsResponse },
    { name: "HyperliquidLaunchCandles", options: {}, I: HyperliquidLaunchCandlesRequest, O: HyperliquidLaunchCandlesResponse },
    { name: "HyperliquidLaunchCandleStream", serverStreaming: true, options: {}, I: HyperliquidLaunchCandlesRequest, O: HyperliquidLaunchCandlesResponse },
    { name: "HyperliquidLaunchMessages", serverStreaming: true, options: {}, I: HyperliquidLaunchMessagesRequest, O: HyperliquidLaunchMessagesResponse },
    { name: "LatestHyperliquidLaunchFills", serverStreaming: true, options: {}, I: LatestHyperliquidLaunchFillsRequest, O: HyperliquidLaunchFillsResponse },
    { name: "HyperliquidLaunchHolders", options: {}, I: HyperliquidLaunchHoldersRequest, O: HyperliquidLaunchHoldersResponse },
    { name: "HypurrFunCabals", options: {}, I: HypurrFunCabalsRequest, O: HypurrFunCabalsResponse },
    { name: "HypurrFunCabalPerformance", options: {}, I: HypurrFunCabalPerformanceRequest, O: HypurrFunCabalPerformanceResponse },
    { name: "SetHyperliquidWalletDeploySessionTarget", options: {}, I: SetHyperliquidWalletDeploySessionTargetRequest, O: SetHyperliquidWalletDeploySessionTargetResponse },
    { name: "DeleteHyperliquidWalletDeploySessionTarget", options: {}, I: DeleteHyperliquidWalletDeploySessionTargetRequest, O: DeleteHyperliquidWalletDeploySessionTargetResponse }
]);
