// @generated by protobuf-ts 2.8.2 with parameter long_type_number
// @generated from protobuf file "hypurr/tools.proto" (package "hypurr", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Int64Value } from "../google/protobuf/wrappers";
/**
 * @generated from protobuf message hypurr.HyperliquidSpotSniperConfig
 */
export interface HyperliquidSpotSniperConfig {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf field: int64 telegram_id = 2;
     */
    telegramId: number;
    /**
     * @generated from protobuf field: string name = 3;
     */
    name: string;
    /**
     * @generated from protobuf field: string target_token = 4;
     */
    targetToken: string;
    /**
     * @generated from protobuf field: double max_market_cap = 5;
     */
    maxMarketCap: number;
    /**
     * @generated from protobuf field: double max_notional = 6;
     */
    maxNotional: number;
    /**
     * @generated from protobuf field: int64 max_slippage = 7;
     */
    maxSlippage: number;
    /**
     * @generated from protobuf field: int64 max_user_allocation = 8;
     */
    maxUserAllocation: number;
    /**
     * @generated from protobuf field: int64 max_liquidity_allocation = 9;
     */
    maxLiquidityAllocation: number;
    /**
     * @generated from protobuf field: int64 max_airdrop_allocation = 10;
     */
    maxAirdropAllocation: number;
    /**
     * @generated from protobuf field: bool enabled = 11;
     */
    enabled: boolean;
    /**
     * @generated from protobuf field: bool anti_rug = 12;
     */
    antiRug: boolean;
}
/**
 * @generated from protobuf message hypurr.HyperliquidWalletSpotTwapSession
 */
export interface HyperliquidWalletSpotTwapSession {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf field: int64 wallet_id = 2;
     */
    walletId: number;
    /**
     * @generated from protobuf field: int64 pair_id = 3;
     */
    pairId: number;
    /**
     * @generated from protobuf field: google.protobuf.Int64Value telegram_id = 4;
     */
    telegramId?: Int64Value;
    /**
     * @generated from protobuf field: double target_notional = 5;
     */
    targetNotional: number;
    /**
     * @generated from protobuf field: double filled_quantity = 6;
     */
    filledQuantity: number;
    /**
     * @generated from protobuf field: double filled_cost = 7;
     */
    filledCost: number;
    /**
     * @generated from protobuf field: int64 duration = 8;
     */
    duration: number;
    /**
     * @generated from protobuf field: bool enabled = 9;
     */
    enabled: boolean;
    /**
     * @generated from protobuf field: bool buy = 10;
     */
    buy: boolean;
    /**
     * @generated from protobuf field: bool ended = 11;
     */
    ended: boolean;
}
// @generated message type with reflection information, may provide speed optimized methods
class HyperliquidSpotSniperConfig$Type extends MessageType<HyperliquidSpotSniperConfig> {
    constructor() {
        super("hypurr.HyperliquidSpotSniperConfig", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "telegram_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "target_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "max_market_cap", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 6, name: "max_notional", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 7, name: "max_slippage", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 8, name: "max_user_allocation", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 9, name: "max_liquidity_allocation", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 10, name: "max_airdrop_allocation", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 11, name: "enabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "anti_rug", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<HyperliquidSpotSniperConfig>): HyperliquidSpotSniperConfig {
        const message = { id: 0, telegramId: 0, name: "", targetToken: "", maxMarketCap: 0, maxNotional: 0, maxSlippage: 0, maxUserAllocation: 0, maxLiquidityAllocation: 0, maxAirdropAllocation: 0, enabled: false, antiRug: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HyperliquidSpotSniperConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HyperliquidSpotSniperConfig): HyperliquidSpotSniperConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toNumber();
                    break;
                case /* int64 telegram_id */ 2:
                    message.telegramId = reader.int64().toNumber();
                    break;
                case /* string name */ 3:
                    message.name = reader.string();
                    break;
                case /* string target_token */ 4:
                    message.targetToken = reader.string();
                    break;
                case /* double max_market_cap */ 5:
                    message.maxMarketCap = reader.double();
                    break;
                case /* double max_notional */ 6:
                    message.maxNotional = reader.double();
                    break;
                case /* int64 max_slippage */ 7:
                    message.maxSlippage = reader.int64().toNumber();
                    break;
                case /* int64 max_user_allocation */ 8:
                    message.maxUserAllocation = reader.int64().toNumber();
                    break;
                case /* int64 max_liquidity_allocation */ 9:
                    message.maxLiquidityAllocation = reader.int64().toNumber();
                    break;
                case /* int64 max_airdrop_allocation */ 10:
                    message.maxAirdropAllocation = reader.int64().toNumber();
                    break;
                case /* bool enabled */ 11:
                    message.enabled = reader.bool();
                    break;
                case /* bool anti_rug */ 12:
                    message.antiRug = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HyperliquidSpotSniperConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* int64 telegram_id = 2; */
        if (message.telegramId !== 0)
            writer.tag(2, WireType.Varint).int64(message.telegramId);
        /* string name = 3; */
        if (message.name !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        /* string target_token = 4; */
        if (message.targetToken !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.targetToken);
        /* double max_market_cap = 5; */
        if (message.maxMarketCap !== 0)
            writer.tag(5, WireType.Bit64).double(message.maxMarketCap);
        /* double max_notional = 6; */
        if (message.maxNotional !== 0)
            writer.tag(6, WireType.Bit64).double(message.maxNotional);
        /* int64 max_slippage = 7; */
        if (message.maxSlippage !== 0)
            writer.tag(7, WireType.Varint).int64(message.maxSlippage);
        /* int64 max_user_allocation = 8; */
        if (message.maxUserAllocation !== 0)
            writer.tag(8, WireType.Varint).int64(message.maxUserAllocation);
        /* int64 max_liquidity_allocation = 9; */
        if (message.maxLiquidityAllocation !== 0)
            writer.tag(9, WireType.Varint).int64(message.maxLiquidityAllocation);
        /* int64 max_airdrop_allocation = 10; */
        if (message.maxAirdropAllocation !== 0)
            writer.tag(10, WireType.Varint).int64(message.maxAirdropAllocation);
        /* bool enabled = 11; */
        if (message.enabled !== false)
            writer.tag(11, WireType.Varint).bool(message.enabled);
        /* bool anti_rug = 12; */
        if (message.antiRug !== false)
            writer.tag(12, WireType.Varint).bool(message.antiRug);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hypurr.HyperliquidSpotSniperConfig
 */
export const HyperliquidSpotSniperConfig = new HyperliquidSpotSniperConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HyperliquidWalletSpotTwapSession$Type extends MessageType<HyperliquidWalletSpotTwapSession> {
    constructor() {
        super("hypurr.HyperliquidWalletSpotTwapSession", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "wallet_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "pair_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "telegram_id", kind: "message", T: () => Int64Value },
            { no: 5, name: "target_notional", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 6, name: "filled_quantity", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 7, name: "filled_cost", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 8, name: "duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 9, name: "enabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "buy", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "ended", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<HyperliquidWalletSpotTwapSession>): HyperliquidWalletSpotTwapSession {
        const message = { id: 0, walletId: 0, pairId: 0, targetNotional: 0, filledQuantity: 0, filledCost: 0, duration: 0, enabled: false, buy: false, ended: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HyperliquidWalletSpotTwapSession>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HyperliquidWalletSpotTwapSession): HyperliquidWalletSpotTwapSession {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toNumber();
                    break;
                case /* int64 wallet_id */ 2:
                    message.walletId = reader.int64().toNumber();
                    break;
                case /* int64 pair_id */ 3:
                    message.pairId = reader.int64().toNumber();
                    break;
                case /* google.protobuf.Int64Value telegram_id */ 4:
                    message.telegramId = Int64Value.internalBinaryRead(reader, reader.uint32(), options, message.telegramId);
                    break;
                case /* double target_notional */ 5:
                    message.targetNotional = reader.double();
                    break;
                case /* double filled_quantity */ 6:
                    message.filledQuantity = reader.double();
                    break;
                case /* double filled_cost */ 7:
                    message.filledCost = reader.double();
                    break;
                case /* int64 duration */ 8:
                    message.duration = reader.int64().toNumber();
                    break;
                case /* bool enabled */ 9:
                    message.enabled = reader.bool();
                    break;
                case /* bool buy */ 10:
                    message.buy = reader.bool();
                    break;
                case /* bool ended */ 11:
                    message.ended = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HyperliquidWalletSpotTwapSession, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* int64 wallet_id = 2; */
        if (message.walletId !== 0)
            writer.tag(2, WireType.Varint).int64(message.walletId);
        /* int64 pair_id = 3; */
        if (message.pairId !== 0)
            writer.tag(3, WireType.Varint).int64(message.pairId);
        /* google.protobuf.Int64Value telegram_id = 4; */
        if (message.telegramId)
            Int64Value.internalBinaryWrite(message.telegramId, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* double target_notional = 5; */
        if (message.targetNotional !== 0)
            writer.tag(5, WireType.Bit64).double(message.targetNotional);
        /* double filled_quantity = 6; */
        if (message.filledQuantity !== 0)
            writer.tag(6, WireType.Bit64).double(message.filledQuantity);
        /* double filled_cost = 7; */
        if (message.filledCost !== 0)
            writer.tag(7, WireType.Bit64).double(message.filledCost);
        /* int64 duration = 8; */
        if (message.duration !== 0)
            writer.tag(8, WireType.Varint).int64(message.duration);
        /* bool enabled = 9; */
        if (message.enabled !== false)
            writer.tag(9, WireType.Varint).bool(message.enabled);
        /* bool buy = 10; */
        if (message.buy !== false)
            writer.tag(10, WireType.Varint).bool(message.buy);
        /* bool ended = 11; */
        if (message.ended !== false)
            writer.tag(11, WireType.Varint).bool(message.ended);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hypurr.HyperliquidWalletSpotTwapSession
 */
export const HyperliquidWalletSpotTwapSession = new HyperliquidWalletSpotTwapSession$Type();
