// @generated by protobuf-ts 2.8.2 with parameter long_type_number
// @generated from protobuf file "hypurr/pairs.proto" (package "hypurr", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { HyperliquidToken } from "./token";
/**
 * @generated from protobuf message hypurr.HyperliquidSpotPair
 */
export interface HyperliquidSpotPair {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: int64 base_id = 3;
     */
    baseId: number;
    /**
     * @generated from protobuf field: hypurr.HyperliquidToken base = 4;
     */
    base?: HyperliquidToken;
    /**
     * @generated from protobuf field: int64 quote_id = 5;
     */
    quoteId: number;
    /**
     * @generated from protobuf field: hypurr.HyperliquidToken quote = 6;
     */
    quote?: HyperliquidToken;
    /**
     * @generated from protobuf field: int64 index = 7;
     */
    index: number;
    /**
     * @generated from protobuf field: double mid_price = 8;
     */
    midPrice: number;
    /**
     * @generated from protobuf field: double mark_price = 9;
     */
    markPrice: number;
    /**
     * @generated from protobuf field: double daily_ntl_volume = 10;
     */
    dailyNtlVolume: number;
    /**
     * @generated from protobuf field: double previous_day_px = 11;
     */
    previousDayPx: number;
}
/**
 * @generated from protobuf message hypurr.HyperliquidPerpPair
 */
export interface HyperliquidPerpPair {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: int64 index = 3;
     */
    index: number;
    /**
     * @generated from protobuf field: double mid_price = 4;
     */
    midPrice: number;
    /**
     * @generated from protobuf field: double mark_price = 5;
     */
    markPrice: number;
    /**
     * @generated from protobuf field: double daily_ntl_volume = 6;
     */
    dailyNtlVolume: number;
    /**
     * @generated from protobuf field: double previous_day_px = 7;
     */
    previousDayPx: number;
    /**
     * @generated from protobuf field: double funding = 8;
     */
    funding: number;
    /**
     * @generated from protobuf field: double open_interest = 9;
     */
    openInterest: number;
    /**
     * @generated from protobuf field: double premium = 10;
     */
    premium: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class HyperliquidSpotPair$Type extends MessageType<HyperliquidSpotPair> {
    constructor() {
        super("hypurr.HyperliquidSpotPair", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "base_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "base", kind: "message", T: () => HyperliquidToken },
            { no: 5, name: "quote_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 6, name: "quote", kind: "message", T: () => HyperliquidToken },
            { no: 7, name: "index", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 8, name: "mid_price", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 9, name: "mark_price", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 10, name: "daily_ntl_volume", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 11, name: "previous_day_px", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<HyperliquidSpotPair>): HyperliquidSpotPair {
        const message = { id: 0, name: "", baseId: 0, quoteId: 0, index: 0, midPrice: 0, markPrice: 0, dailyNtlVolume: 0, previousDayPx: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HyperliquidSpotPair>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HyperliquidSpotPair): HyperliquidSpotPair {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toNumber();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* int64 base_id */ 3:
                    message.baseId = reader.int64().toNumber();
                    break;
                case /* hypurr.HyperliquidToken base */ 4:
                    message.base = HyperliquidToken.internalBinaryRead(reader, reader.uint32(), options, message.base);
                    break;
                case /* int64 quote_id */ 5:
                    message.quoteId = reader.int64().toNumber();
                    break;
                case /* hypurr.HyperliquidToken quote */ 6:
                    message.quote = HyperliquidToken.internalBinaryRead(reader, reader.uint32(), options, message.quote);
                    break;
                case /* int64 index */ 7:
                    message.index = reader.int64().toNumber();
                    break;
                case /* double mid_price */ 8:
                    message.midPrice = reader.double();
                    break;
                case /* double mark_price */ 9:
                    message.markPrice = reader.double();
                    break;
                case /* double daily_ntl_volume */ 10:
                    message.dailyNtlVolume = reader.double();
                    break;
                case /* double previous_day_px */ 11:
                    message.previousDayPx = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HyperliquidSpotPair, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* int64 base_id = 3; */
        if (message.baseId !== 0)
            writer.tag(3, WireType.Varint).int64(message.baseId);
        /* hypurr.HyperliquidToken base = 4; */
        if (message.base)
            HyperliquidToken.internalBinaryWrite(message.base, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* int64 quote_id = 5; */
        if (message.quoteId !== 0)
            writer.tag(5, WireType.Varint).int64(message.quoteId);
        /* hypurr.HyperliquidToken quote = 6; */
        if (message.quote)
            HyperliquidToken.internalBinaryWrite(message.quote, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* int64 index = 7; */
        if (message.index !== 0)
            writer.tag(7, WireType.Varint).int64(message.index);
        /* double mid_price = 8; */
        if (message.midPrice !== 0)
            writer.tag(8, WireType.Bit64).double(message.midPrice);
        /* double mark_price = 9; */
        if (message.markPrice !== 0)
            writer.tag(9, WireType.Bit64).double(message.markPrice);
        /* double daily_ntl_volume = 10; */
        if (message.dailyNtlVolume !== 0)
            writer.tag(10, WireType.Bit64).double(message.dailyNtlVolume);
        /* double previous_day_px = 11; */
        if (message.previousDayPx !== 0)
            writer.tag(11, WireType.Bit64).double(message.previousDayPx);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hypurr.HyperliquidSpotPair
 */
export const HyperliquidSpotPair = new HyperliquidSpotPair$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HyperliquidPerpPair$Type extends MessageType<HyperliquidPerpPair> {
    constructor() {
        super("hypurr.HyperliquidPerpPair", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "index", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "mid_price", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 5, name: "mark_price", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 6, name: "daily_ntl_volume", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 7, name: "previous_day_px", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 8, name: "funding", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 9, name: "open_interest", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 10, name: "premium", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<HyperliquidPerpPair>): HyperliquidPerpPair {
        const message = { id: 0, name: "", index: 0, midPrice: 0, markPrice: 0, dailyNtlVolume: 0, previousDayPx: 0, funding: 0, openInterest: 0, premium: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HyperliquidPerpPair>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HyperliquidPerpPair): HyperliquidPerpPair {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toNumber();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* int64 index */ 3:
                    message.index = reader.int64().toNumber();
                    break;
                case /* double mid_price */ 4:
                    message.midPrice = reader.double();
                    break;
                case /* double mark_price */ 5:
                    message.markPrice = reader.double();
                    break;
                case /* double daily_ntl_volume */ 6:
                    message.dailyNtlVolume = reader.double();
                    break;
                case /* double previous_day_px */ 7:
                    message.previousDayPx = reader.double();
                    break;
                case /* double funding */ 8:
                    message.funding = reader.double();
                    break;
                case /* double open_interest */ 9:
                    message.openInterest = reader.double();
                    break;
                case /* double premium */ 10:
                    message.premium = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HyperliquidPerpPair, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* int64 index = 3; */
        if (message.index !== 0)
            writer.tag(3, WireType.Varint).int64(message.index);
        /* double mid_price = 4; */
        if (message.midPrice !== 0)
            writer.tag(4, WireType.Bit64).double(message.midPrice);
        /* double mark_price = 5; */
        if (message.markPrice !== 0)
            writer.tag(5, WireType.Bit64).double(message.markPrice);
        /* double daily_ntl_volume = 6; */
        if (message.dailyNtlVolume !== 0)
            writer.tag(6, WireType.Bit64).double(message.dailyNtlVolume);
        /* double previous_day_px = 7; */
        if (message.previousDayPx !== 0)
            writer.tag(7, WireType.Bit64).double(message.previousDayPx);
        /* double funding = 8; */
        if (message.funding !== 0)
            writer.tag(8, WireType.Bit64).double(message.funding);
        /* double open_interest = 9; */
        if (message.openInterest !== 0)
            writer.tag(9, WireType.Bit64).double(message.openInterest);
        /* double premium = 10; */
        if (message.premium !== 0)
            writer.tag(10, WireType.Bit64).double(message.premium);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hypurr.HyperliquidPerpPair
 */
export const HyperliquidPerpPair = new HyperliquidPerpPair$Type();
