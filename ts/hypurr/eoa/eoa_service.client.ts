// @generated by protobuf-ts 2.8.2 with parameter long_type_number
// @generated from protobuf file "hypurr/eoa/eoa_service.proto" (package "eoa", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { EOA } from "./eoa_service";
import type { HyperliquidSpotTradeResponse } from "./eoa_service";
import type { HyperliquidSpotTradeRequest } from "./eoa_service";
import type { HyperliquidLaunchTradeResponse } from "./eoa_service";
import type { HyperliquidLaunchTradeRequest } from "./eoa_service";
import type { PendingHyperliquidLaunchResponse } from "./eoa_service";
import type { PendingHyperliquidLaunchRequest } from "./eoa_service";
import type { EOAUserResponse } from "./eoa_service";
import type { EOAUserRequest } from "./eoa_service";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { EOAUserAgentChallengeResponse } from "./eoa_service";
import type { EOAUserAgentChallengeRequest } from "./eoa_service";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Authed endpoints
 *
 * @generated from protobuf service eoa.EOA
 */
export interface IEOAClient {
    /**
     * @generated from protobuf rpc: EOAUserAgentChallenge(eoa.EOAUserAgentChallengeRequest) returns (eoa.EOAUserAgentChallengeResponse);
     */
    eOAUserAgentChallenge(input: EOAUserAgentChallengeRequest, options?: RpcOptions): UnaryCall<EOAUserAgentChallengeRequest, EOAUserAgentChallengeResponse>;
    /**
     * @generated from protobuf rpc: EOAUser(eoa.EOAUserRequest) returns (eoa.EOAUserResponse);
     */
    eOAUser(input: EOAUserRequest, options?: RpcOptions): UnaryCall<EOAUserRequest, EOAUserResponse>;
    /**
     * Launch
     *
     * @generated from protobuf rpc: PendingHyperliquidLaunch(eoa.PendingHyperliquidLaunchRequest) returns (eoa.PendingHyperliquidLaunchResponse);
     */
    pendingHyperliquidLaunch(input: PendingHyperliquidLaunchRequest, options?: RpcOptions): UnaryCall<PendingHyperliquidLaunchRequest, PendingHyperliquidLaunchResponse>;
    /**
     * @generated from protobuf rpc: HyperliquidLaunchTrade(eoa.HyperliquidLaunchTradeRequest) returns (eoa.HyperliquidLaunchTradeResponse);
     */
    hyperliquidLaunchTrade(input: HyperliquidLaunchTradeRequest, options?: RpcOptions): UnaryCall<HyperliquidLaunchTradeRequest, HyperliquidLaunchTradeResponse>;
    /**
     * Spot
     *
     * @generated from protobuf rpc: HyperliquidSpotTrade(eoa.HyperliquidSpotTradeRequest) returns (eoa.HyperliquidSpotTradeResponse);
     */
    hyperliquidSpotTrade(input: HyperliquidSpotTradeRequest, options?: RpcOptions): UnaryCall<HyperliquidSpotTradeRequest, HyperliquidSpotTradeResponse>;
}
/**
 * Authed endpoints
 *
 * @generated from protobuf service eoa.EOA
 */
export class EOAClient implements IEOAClient, ServiceInfo {
    typeName = EOA.typeName;
    methods = EOA.methods;
    options = EOA.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: EOAUserAgentChallenge(eoa.EOAUserAgentChallengeRequest) returns (eoa.EOAUserAgentChallengeResponse);
     */
    eOAUserAgentChallenge(input: EOAUserAgentChallengeRequest, options?: RpcOptions): UnaryCall<EOAUserAgentChallengeRequest, EOAUserAgentChallengeResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<EOAUserAgentChallengeRequest, EOAUserAgentChallengeResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: EOAUser(eoa.EOAUserRequest) returns (eoa.EOAUserResponse);
     */
    eOAUser(input: EOAUserRequest, options?: RpcOptions): UnaryCall<EOAUserRequest, EOAUserResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<EOAUserRequest, EOAUserResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Launch
     *
     * @generated from protobuf rpc: PendingHyperliquidLaunch(eoa.PendingHyperliquidLaunchRequest) returns (eoa.PendingHyperliquidLaunchResponse);
     */
    pendingHyperliquidLaunch(input: PendingHyperliquidLaunchRequest, options?: RpcOptions): UnaryCall<PendingHyperliquidLaunchRequest, PendingHyperliquidLaunchResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<PendingHyperliquidLaunchRequest, PendingHyperliquidLaunchResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: HyperliquidLaunchTrade(eoa.HyperliquidLaunchTradeRequest) returns (eoa.HyperliquidLaunchTradeResponse);
     */
    hyperliquidLaunchTrade(input: HyperliquidLaunchTradeRequest, options?: RpcOptions): UnaryCall<HyperliquidLaunchTradeRequest, HyperliquidLaunchTradeResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<HyperliquidLaunchTradeRequest, HyperliquidLaunchTradeResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Spot
     *
     * @generated from protobuf rpc: HyperliquidSpotTrade(eoa.HyperliquidSpotTradeRequest) returns (eoa.HyperliquidSpotTradeResponse);
     */
    hyperliquidSpotTrade(input: HyperliquidSpotTradeRequest, options?: RpcOptions): UnaryCall<HyperliquidSpotTradeRequest, HyperliquidSpotTradeResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<HyperliquidSpotTradeRequest, HyperliquidSpotTradeResponse>("unary", this._transport, method, opt, input);
    }
}
