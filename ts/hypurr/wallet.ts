// @generated by protobuf-ts 2.8.2 with parameter long_type_number
// @generated from protobuf file "hypurr/wallet.proto" (package "hypurr", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { HyperliquidToken } from "./token";
import { Int64Value } from "../google/protobuf/wrappers";
/**
 * @generated from protobuf message hypurr.HyperliquidWallet
 */
export interface HyperliquidWallet {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: google.protobuf.Int64Value telegram_id = 3;
     */
    telegramId?: Int64Value;
    /**
     * @generated from protobuf field: string ethereum_address = 4;
     */
    ethereumAddress: string;
    /**
     * @generated from protobuf field: int32 points = 5;
     */
    points: number;
    /**
     * @generated from protobuf field: repeated hypurr.HyperliquidWalletMovement movements = 6;
     */
    movements: HyperliquidWalletMovement[];
    /**
     * @generated from protobuf field: repeated hypurr.HyperliquidWalletBalance spot_balances = 7;
     */
    spotBalances: HyperliquidWalletBalance[];
    /**
     * @generated from protobuf field: repeated hypurr.HyperliquidLaunchBalance launch_balances = 8;
     */
    launchBalances: HyperliquidLaunchBalance[];
    /**
     * @generated from protobuf field: bool is_agent = 9;
     */
    isAgent: boolean;
    /**
     * @generated from protobuf field: bool is_read_only = 10;
     */
    isReadOnly: boolean;
}
/**
 * @generated from protobuf message hypurr.HyperliquidWalletMovement
 */
export interface HyperliquidWalletMovement {
    /**
     * @generated from protobuf field: google.protobuf.Int64Value telegram_id = 1;
     */
    telegramId?: Int64Value;
    /**
     * @generated from protobuf field: hypurr.HyperliquidWallet wallet = 2;
     */
    wallet?: HyperliquidWallet;
    /**
     * @generated from protobuf field: int64 wallet_id = 3;
     */
    walletId: number;
    /**
     * @generated from protobuf field: string hash = 4;
     */
    hash: string;
    /**
     * @generated from protobuf field: string type = 5;
     */
    type: string;
    /**
     * @generated from protobuf field: int64 token_id = 6;
     */
    tokenId: number;
    /**
     * @generated from protobuf field: hypurr.HyperliquidToken token = 7;
     */
    token?: HyperliquidToken;
    /**
     * @generated from protobuf field: double amount = 8;
     */
    amount: number;
    /**
     * @generated from protobuf field: double usdc_value = 9;
     */
    usdcValue: number;
    /**
     * @generated from protobuf field: string destination = 10;
     */
    destination: string;
    /**
     * @generated from protobuf field: double fee = 11;
     */
    fee: number;
    /**
     * @generated from protobuf field: google.protobuf.Int64Value timestamp = 12;
     */
    timestamp?: Int64Value;
}
/**
 * @generated from protobuf message hypurr.HyperliquidPublicWallet
 */
export interface HyperliquidPublicWallet {
    /**
     * @generated from protobuf field: string ethereum_address = 1;
     */
    ethereumAddress: string;
}
/**
 * @generated from protobuf message hypurr.HyperliquidWalletBalance
 */
export interface HyperliquidWalletBalance {
    /**
     * @generated from protobuf field: google.protobuf.Int64Value telegram_id = 1;
     */
    telegramId?: Int64Value;
    /**
     * @generated from protobuf field: int64 wallet_id = 2;
     */
    walletId: number;
    /**
     * @generated from protobuf field: int64 token_id = 3;
     */
    tokenId: number;
    /**
     * @generated from protobuf field: double balance = 4;
     */
    balance: number;
}
/**
 * @generated from protobuf message hypurr.HyperliquidLaunchBalance
 */
export interface HyperliquidLaunchBalance {
    /**
     * @generated from protobuf field: google.protobuf.Int64Value telegram_id = 1;
     */
    telegramId?: Int64Value;
    /**
     * @generated from protobuf field: int64 wallet_id = 2;
     */
    walletId: number;
    /**
     * @generated from protobuf field: int64 launch_id = 3;
     */
    launchId: number;
    /**
     * @generated from protobuf field: int64 balance = 4;
     */
    balance: number;
}
/**
 * @generated from protobuf message hypurr.HyperliquidWalletDeploySession
 */
export interface HyperliquidWalletDeploySession {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf field: google.protobuf.Int64Value telegram_id = 2;
     */
    telegramId?: Int64Value;
    /**
     * @generated from protobuf field: int32 step = 3;
     */
    step: number;
    /**
     * @generated from protobuf field: string token_name = 4;
     */
    tokenName: string;
    /**
     * @generated from protobuf field: string full_name = 5;
     */
    fullName: string;
    /**
     * @generated from protobuf field: int32 token_decimals = 6;
     */
    tokenDecimals: number;
    /**
     * @generated from protobuf field: int32 token_wei = 7;
     */
    tokenWei: number;
    /**
     * @generated from protobuf field: double token_supply = 8;
     */
    tokenSupply: number;
    /**
     * @generated from protobuf field: int32 start_market_cap = 9;
     */
    startMarketCap: number;
    /**
     * @generated from protobuf field: google.protobuf.Int64Value anchor1_token_id = 10;
     */
    anchor1TokenId?: Int64Value;
    /**
     * @generated from protobuf field: hypurr.HyperliquidToken anchor1_token = 11;
     */
    anchor1Token?: HyperliquidToken;
    /**
     * @generated from protobuf field: google.protobuf.Int64Value anchor2_token_id = 12;
     */
    anchor2TokenId?: Int64Value;
    /**
     * @generated from protobuf field: hypurr.HyperliquidToken anchor2_token = 13;
     */
    anchor2Token?: HyperliquidToken;
    /**
     * @generated from protobuf field: google.protobuf.Int64Value token_id = 14;
     */
    tokenId?: Int64Value;
    /**
     * @generated from protobuf field: int32 spot_pair_id = 15;
     */
    spotPairId: number;
    /**
     * @generated from protobuf field: double deploy_threshold = 16;
     */
    deployThreshold: number;
    /**
     * @generated from protobuf field: map<string, hypurr.HyperliquidWalletDeploySessionGenesis> geneses = 17;
     */
    geneses: {
        [key: string]: HyperliquidWalletDeploySessionGenesis;
    };
}
/**
 * @generated from protobuf message hypurr.HyperliquidWalletDeploySessionGenesis
 */
export interface HyperliquidWalletDeploySessionGenesis {
    /**
     * @generated from protobuf field: string target = 1;
     */
    target: string;
    /**
     * @generated from protobuf field: int32 share = 2;
     */
    share: number;
}
/**
 * @generated from protobuf message hypurr.PerformancePoint
 */
export interface PerformancePoint {
    /**
     * @generated from protobuf field: int64 time = 1;
     */
    time: number;
    /**
     * @generated from protobuf field: float notional = 2;
     */
    notional: number;
    /**
     * @generated from protobuf field: float pnl = 3;
     */
    pnl: number;
}
/**
 * @generated from protobuf message hypurr.PerformanceReport
 */
export interface PerformanceReport {
    /**
     * @generated from protobuf field: int64 token_id = 1;
     */
    tokenId: number;
    /**
     * @generated from protobuf field: float total_pnl = 2;
     */
    totalPnl: number;
    /**
     * @generated from protobuf field: float running_pnl = 3;
     */
    runningPnl: number;
    /**
     * @generated from protobuf field: float size = 4;
     */
    size: number;
    /**
     * @generated from protobuf field: float price = 5;
     */
    price: number;
    /**
     * @generated from protobuf field: float entry_price = 6;
     */
    entryPrice: number;
    /**
     * @generated from protobuf field: float total_cost = 7;
     */
    totalCost: number;
    /**
     * @generated from protobuf field: float running_cost = 8;
     */
    runningCost: number;
}
/**
 * @generated from protobuf message hypurr.Performance
 */
export interface Performance {
    /**
     * @generated from protobuf field: float net_cash = 1;
     */
    netCash: number;
    /**
     * @generated from protobuf field: float notional = 2;
     */
    notional: number;
    /**
     * @generated from protobuf field: repeated hypurr.PerformanceReport reports = 3;
     */
    reports: PerformanceReport[];
    /**
     * @generated from protobuf field: repeated hypurr.PerformancePoint points = 4;
     */
    points: PerformancePoint[];
}
// @generated message type with reflection information, may provide speed optimized methods
class HyperliquidWallet$Type extends MessageType<HyperliquidWallet> {
    constructor() {
        super("hypurr.HyperliquidWallet", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "telegram_id", kind: "message", T: () => Int64Value },
            { no: 4, name: "ethereum_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "points", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "movements", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => HyperliquidWalletMovement },
            { no: 7, name: "spot_balances", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => HyperliquidWalletBalance },
            { no: 8, name: "launch_balances", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => HyperliquidLaunchBalance },
            { no: 9, name: "is_agent", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "is_read_only", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<HyperliquidWallet>): HyperliquidWallet {
        const message = { id: 0, name: "", ethereumAddress: "", points: 0, movements: [], spotBalances: [], launchBalances: [], isAgent: false, isReadOnly: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HyperliquidWallet>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HyperliquidWallet): HyperliquidWallet {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toNumber();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* google.protobuf.Int64Value telegram_id */ 3:
                    message.telegramId = Int64Value.internalBinaryRead(reader, reader.uint32(), options, message.telegramId);
                    break;
                case /* string ethereum_address */ 4:
                    message.ethereumAddress = reader.string();
                    break;
                case /* int32 points */ 5:
                    message.points = reader.int32();
                    break;
                case /* repeated hypurr.HyperliquidWalletMovement movements */ 6:
                    message.movements.push(HyperliquidWalletMovement.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated hypurr.HyperliquidWalletBalance spot_balances */ 7:
                    message.spotBalances.push(HyperliquidWalletBalance.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated hypurr.HyperliquidLaunchBalance launch_balances */ 8:
                    message.launchBalances.push(HyperliquidLaunchBalance.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bool is_agent */ 9:
                    message.isAgent = reader.bool();
                    break;
                case /* bool is_read_only */ 10:
                    message.isReadOnly = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HyperliquidWallet, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* google.protobuf.Int64Value telegram_id = 3; */
        if (message.telegramId)
            Int64Value.internalBinaryWrite(message.telegramId, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string ethereum_address = 4; */
        if (message.ethereumAddress !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.ethereumAddress);
        /* int32 points = 5; */
        if (message.points !== 0)
            writer.tag(5, WireType.Varint).int32(message.points);
        /* repeated hypurr.HyperliquidWalletMovement movements = 6; */
        for (let i = 0; i < message.movements.length; i++)
            HyperliquidWalletMovement.internalBinaryWrite(message.movements[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* repeated hypurr.HyperliquidWalletBalance spot_balances = 7; */
        for (let i = 0; i < message.spotBalances.length; i++)
            HyperliquidWalletBalance.internalBinaryWrite(message.spotBalances[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* repeated hypurr.HyperliquidLaunchBalance launch_balances = 8; */
        for (let i = 0; i < message.launchBalances.length; i++)
            HyperliquidLaunchBalance.internalBinaryWrite(message.launchBalances[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* bool is_agent = 9; */
        if (message.isAgent !== false)
            writer.tag(9, WireType.Varint).bool(message.isAgent);
        /* bool is_read_only = 10; */
        if (message.isReadOnly !== false)
            writer.tag(10, WireType.Varint).bool(message.isReadOnly);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hypurr.HyperliquidWallet
 */
export const HyperliquidWallet = new HyperliquidWallet$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HyperliquidWalletMovement$Type extends MessageType<HyperliquidWalletMovement> {
    constructor() {
        super("hypurr.HyperliquidWalletMovement", [
            { no: 1, name: "telegram_id", kind: "message", T: () => Int64Value },
            { no: 2, name: "wallet", kind: "message", T: () => HyperliquidWallet },
            { no: 3, name: "wallet_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "hash", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "token_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 7, name: "token", kind: "message", T: () => HyperliquidToken },
            { no: 8, name: "amount", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 9, name: "usdc_value", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 10, name: "destination", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "fee", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 12, name: "timestamp", kind: "message", T: () => Int64Value }
        ]);
    }
    create(value?: PartialMessage<HyperliquidWalletMovement>): HyperliquidWalletMovement {
        const message = { walletId: 0, hash: "", type: "", tokenId: 0, amount: 0, usdcValue: 0, destination: "", fee: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HyperliquidWalletMovement>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HyperliquidWalletMovement): HyperliquidWalletMovement {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Int64Value telegram_id */ 1:
                    message.telegramId = Int64Value.internalBinaryRead(reader, reader.uint32(), options, message.telegramId);
                    break;
                case /* hypurr.HyperliquidWallet wallet */ 2:
                    message.wallet = HyperliquidWallet.internalBinaryRead(reader, reader.uint32(), options, message.wallet);
                    break;
                case /* int64 wallet_id */ 3:
                    message.walletId = reader.int64().toNumber();
                    break;
                case /* string hash */ 4:
                    message.hash = reader.string();
                    break;
                case /* string type */ 5:
                    message.type = reader.string();
                    break;
                case /* int64 token_id */ 6:
                    message.tokenId = reader.int64().toNumber();
                    break;
                case /* hypurr.HyperliquidToken token */ 7:
                    message.token = HyperliquidToken.internalBinaryRead(reader, reader.uint32(), options, message.token);
                    break;
                case /* double amount */ 8:
                    message.amount = reader.double();
                    break;
                case /* double usdc_value */ 9:
                    message.usdcValue = reader.double();
                    break;
                case /* string destination */ 10:
                    message.destination = reader.string();
                    break;
                case /* double fee */ 11:
                    message.fee = reader.double();
                    break;
                case /* google.protobuf.Int64Value timestamp */ 12:
                    message.timestamp = Int64Value.internalBinaryRead(reader, reader.uint32(), options, message.timestamp);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HyperliquidWalletMovement, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Int64Value telegram_id = 1; */
        if (message.telegramId)
            Int64Value.internalBinaryWrite(message.telegramId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* hypurr.HyperliquidWallet wallet = 2; */
        if (message.wallet)
            HyperliquidWallet.internalBinaryWrite(message.wallet, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int64 wallet_id = 3; */
        if (message.walletId !== 0)
            writer.tag(3, WireType.Varint).int64(message.walletId);
        /* string hash = 4; */
        if (message.hash !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.hash);
        /* string type = 5; */
        if (message.type !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.type);
        /* int64 token_id = 6; */
        if (message.tokenId !== 0)
            writer.tag(6, WireType.Varint).int64(message.tokenId);
        /* hypurr.HyperliquidToken token = 7; */
        if (message.token)
            HyperliquidToken.internalBinaryWrite(message.token, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* double amount = 8; */
        if (message.amount !== 0)
            writer.tag(8, WireType.Bit64).double(message.amount);
        /* double usdc_value = 9; */
        if (message.usdcValue !== 0)
            writer.tag(9, WireType.Bit64).double(message.usdcValue);
        /* string destination = 10; */
        if (message.destination !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.destination);
        /* double fee = 11; */
        if (message.fee !== 0)
            writer.tag(11, WireType.Bit64).double(message.fee);
        /* google.protobuf.Int64Value timestamp = 12; */
        if (message.timestamp)
            Int64Value.internalBinaryWrite(message.timestamp, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hypurr.HyperliquidWalletMovement
 */
export const HyperliquidWalletMovement = new HyperliquidWalletMovement$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HyperliquidPublicWallet$Type extends MessageType<HyperliquidPublicWallet> {
    constructor() {
        super("hypurr.HyperliquidPublicWallet", [
            { no: 1, name: "ethereum_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<HyperliquidPublicWallet>): HyperliquidPublicWallet {
        const message = { ethereumAddress: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HyperliquidPublicWallet>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HyperliquidPublicWallet): HyperliquidPublicWallet {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string ethereum_address */ 1:
                    message.ethereumAddress = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HyperliquidPublicWallet, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string ethereum_address = 1; */
        if (message.ethereumAddress !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.ethereumAddress);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hypurr.HyperliquidPublicWallet
 */
export const HyperliquidPublicWallet = new HyperliquidPublicWallet$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HyperliquidWalletBalance$Type extends MessageType<HyperliquidWalletBalance> {
    constructor() {
        super("hypurr.HyperliquidWalletBalance", [
            { no: 1, name: "telegram_id", kind: "message", T: () => Int64Value },
            { no: 2, name: "wallet_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "token_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "balance", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<HyperliquidWalletBalance>): HyperliquidWalletBalance {
        const message = { walletId: 0, tokenId: 0, balance: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HyperliquidWalletBalance>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HyperliquidWalletBalance): HyperliquidWalletBalance {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Int64Value telegram_id */ 1:
                    message.telegramId = Int64Value.internalBinaryRead(reader, reader.uint32(), options, message.telegramId);
                    break;
                case /* int64 wallet_id */ 2:
                    message.walletId = reader.int64().toNumber();
                    break;
                case /* int64 token_id */ 3:
                    message.tokenId = reader.int64().toNumber();
                    break;
                case /* double balance */ 4:
                    message.balance = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HyperliquidWalletBalance, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Int64Value telegram_id = 1; */
        if (message.telegramId)
            Int64Value.internalBinaryWrite(message.telegramId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 wallet_id = 2; */
        if (message.walletId !== 0)
            writer.tag(2, WireType.Varint).int64(message.walletId);
        /* int64 token_id = 3; */
        if (message.tokenId !== 0)
            writer.tag(3, WireType.Varint).int64(message.tokenId);
        /* double balance = 4; */
        if (message.balance !== 0)
            writer.tag(4, WireType.Bit64).double(message.balance);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hypurr.HyperliquidWalletBalance
 */
export const HyperliquidWalletBalance = new HyperliquidWalletBalance$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HyperliquidLaunchBalance$Type extends MessageType<HyperliquidLaunchBalance> {
    constructor() {
        super("hypurr.HyperliquidLaunchBalance", [
            { no: 1, name: "telegram_id", kind: "message", T: () => Int64Value },
            { no: 2, name: "wallet_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "launch_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "balance", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<HyperliquidLaunchBalance>): HyperliquidLaunchBalance {
        const message = { walletId: 0, launchId: 0, balance: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HyperliquidLaunchBalance>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HyperliquidLaunchBalance): HyperliquidLaunchBalance {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Int64Value telegram_id */ 1:
                    message.telegramId = Int64Value.internalBinaryRead(reader, reader.uint32(), options, message.telegramId);
                    break;
                case /* int64 wallet_id */ 2:
                    message.walletId = reader.int64().toNumber();
                    break;
                case /* int64 launch_id */ 3:
                    message.launchId = reader.int64().toNumber();
                    break;
                case /* int64 balance */ 4:
                    message.balance = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HyperliquidLaunchBalance, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Int64Value telegram_id = 1; */
        if (message.telegramId)
            Int64Value.internalBinaryWrite(message.telegramId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 wallet_id = 2; */
        if (message.walletId !== 0)
            writer.tag(2, WireType.Varint).int64(message.walletId);
        /* int64 launch_id = 3; */
        if (message.launchId !== 0)
            writer.tag(3, WireType.Varint).int64(message.launchId);
        /* int64 balance = 4; */
        if (message.balance !== 0)
            writer.tag(4, WireType.Varint).int64(message.balance);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hypurr.HyperliquidLaunchBalance
 */
export const HyperliquidLaunchBalance = new HyperliquidLaunchBalance$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HyperliquidWalletDeploySession$Type extends MessageType<HyperliquidWalletDeploySession> {
    constructor() {
        super("hypurr.HyperliquidWalletDeploySession", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "telegram_id", kind: "message", T: () => Int64Value },
            { no: 3, name: "step", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "token_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "full_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "token_decimals", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "token_wei", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "token_supply", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 9, name: "start_market_cap", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "anchor1_token_id", kind: "message", T: () => Int64Value },
            { no: 11, name: "anchor1_token", kind: "message", T: () => HyperliquidToken },
            { no: 12, name: "anchor2_token_id", kind: "message", T: () => Int64Value },
            { no: 13, name: "anchor2_token", kind: "message", T: () => HyperliquidToken },
            { no: 14, name: "token_id", kind: "message", T: () => Int64Value },
            { no: 15, name: "spot_pair_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 16, name: "deploy_threshold", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 17, name: "geneses", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => HyperliquidWalletDeploySessionGenesis } }
        ]);
    }
    create(value?: PartialMessage<HyperliquidWalletDeploySession>): HyperliquidWalletDeploySession {
        const message = { id: 0, step: 0, tokenName: "", fullName: "", tokenDecimals: 0, tokenWei: 0, tokenSupply: 0, startMarketCap: 0, spotPairId: 0, deployThreshold: 0, geneses: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HyperliquidWalletDeploySession>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HyperliquidWalletDeploySession): HyperliquidWalletDeploySession {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toNumber();
                    break;
                case /* google.protobuf.Int64Value telegram_id */ 2:
                    message.telegramId = Int64Value.internalBinaryRead(reader, reader.uint32(), options, message.telegramId);
                    break;
                case /* int32 step */ 3:
                    message.step = reader.int32();
                    break;
                case /* string token_name */ 4:
                    message.tokenName = reader.string();
                    break;
                case /* string full_name */ 5:
                    message.fullName = reader.string();
                    break;
                case /* int32 token_decimals */ 6:
                    message.tokenDecimals = reader.int32();
                    break;
                case /* int32 token_wei */ 7:
                    message.tokenWei = reader.int32();
                    break;
                case /* double token_supply */ 8:
                    message.tokenSupply = reader.double();
                    break;
                case /* int32 start_market_cap */ 9:
                    message.startMarketCap = reader.int32();
                    break;
                case /* google.protobuf.Int64Value anchor1_token_id */ 10:
                    message.anchor1TokenId = Int64Value.internalBinaryRead(reader, reader.uint32(), options, message.anchor1TokenId);
                    break;
                case /* hypurr.HyperliquidToken anchor1_token */ 11:
                    message.anchor1Token = HyperliquidToken.internalBinaryRead(reader, reader.uint32(), options, message.anchor1Token);
                    break;
                case /* google.protobuf.Int64Value anchor2_token_id */ 12:
                    message.anchor2TokenId = Int64Value.internalBinaryRead(reader, reader.uint32(), options, message.anchor2TokenId);
                    break;
                case /* hypurr.HyperliquidToken anchor2_token */ 13:
                    message.anchor2Token = HyperliquidToken.internalBinaryRead(reader, reader.uint32(), options, message.anchor2Token);
                    break;
                case /* google.protobuf.Int64Value token_id */ 14:
                    message.tokenId = Int64Value.internalBinaryRead(reader, reader.uint32(), options, message.tokenId);
                    break;
                case /* int32 spot_pair_id */ 15:
                    message.spotPairId = reader.int32();
                    break;
                case /* double deploy_threshold */ 16:
                    message.deployThreshold = reader.double();
                    break;
                case /* map<string, hypurr.HyperliquidWalletDeploySessionGenesis> geneses */ 17:
                    this.binaryReadMap17(message.geneses, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap17(map: HyperliquidWalletDeploySession["geneses"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof HyperliquidWalletDeploySession["geneses"] | undefined, val: HyperliquidWalletDeploySession["geneses"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = HyperliquidWalletDeploySessionGenesis.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field hypurr.HyperliquidWalletDeploySession.geneses");
            }
        }
        map[key ?? ""] = val ?? HyperliquidWalletDeploySessionGenesis.create();
    }
    internalBinaryWrite(message: HyperliquidWalletDeploySession, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* google.protobuf.Int64Value telegram_id = 2; */
        if (message.telegramId)
            Int64Value.internalBinaryWrite(message.telegramId, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int32 step = 3; */
        if (message.step !== 0)
            writer.tag(3, WireType.Varint).int32(message.step);
        /* string token_name = 4; */
        if (message.tokenName !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.tokenName);
        /* string full_name = 5; */
        if (message.fullName !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.fullName);
        /* int32 token_decimals = 6; */
        if (message.tokenDecimals !== 0)
            writer.tag(6, WireType.Varint).int32(message.tokenDecimals);
        /* int32 token_wei = 7; */
        if (message.tokenWei !== 0)
            writer.tag(7, WireType.Varint).int32(message.tokenWei);
        /* double token_supply = 8; */
        if (message.tokenSupply !== 0)
            writer.tag(8, WireType.Bit64).double(message.tokenSupply);
        /* int32 start_market_cap = 9; */
        if (message.startMarketCap !== 0)
            writer.tag(9, WireType.Varint).int32(message.startMarketCap);
        /* google.protobuf.Int64Value anchor1_token_id = 10; */
        if (message.anchor1TokenId)
            Int64Value.internalBinaryWrite(message.anchor1TokenId, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* hypurr.HyperliquidToken anchor1_token = 11; */
        if (message.anchor1Token)
            HyperliquidToken.internalBinaryWrite(message.anchor1Token, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Int64Value anchor2_token_id = 12; */
        if (message.anchor2TokenId)
            Int64Value.internalBinaryWrite(message.anchor2TokenId, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* hypurr.HyperliquidToken anchor2_token = 13; */
        if (message.anchor2Token)
            HyperliquidToken.internalBinaryWrite(message.anchor2Token, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Int64Value token_id = 14; */
        if (message.tokenId)
            Int64Value.internalBinaryWrite(message.tokenId, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* int32 spot_pair_id = 15; */
        if (message.spotPairId !== 0)
            writer.tag(15, WireType.Varint).int32(message.spotPairId);
        /* double deploy_threshold = 16; */
        if (message.deployThreshold !== 0)
            writer.tag(16, WireType.Bit64).double(message.deployThreshold);
        /* map<string, hypurr.HyperliquidWalletDeploySessionGenesis> geneses = 17; */
        for (let k of Object.keys(message.geneses)) {
            writer.tag(17, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            HyperliquidWalletDeploySessionGenesis.internalBinaryWrite(message.geneses[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hypurr.HyperliquidWalletDeploySession
 */
export const HyperliquidWalletDeploySession = new HyperliquidWalletDeploySession$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HyperliquidWalletDeploySessionGenesis$Type extends MessageType<HyperliquidWalletDeploySessionGenesis> {
    constructor() {
        super("hypurr.HyperliquidWalletDeploySessionGenesis", [
            { no: 1, name: "target", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "share", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<HyperliquidWalletDeploySessionGenesis>): HyperliquidWalletDeploySessionGenesis {
        const message = { target: "", share: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HyperliquidWalletDeploySessionGenesis>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HyperliquidWalletDeploySessionGenesis): HyperliquidWalletDeploySessionGenesis {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string target */ 1:
                    message.target = reader.string();
                    break;
                case /* int32 share */ 2:
                    message.share = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HyperliquidWalletDeploySessionGenesis, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string target = 1; */
        if (message.target !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.target);
        /* int32 share = 2; */
        if (message.share !== 0)
            writer.tag(2, WireType.Varint).int32(message.share);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hypurr.HyperliquidWalletDeploySessionGenesis
 */
export const HyperliquidWalletDeploySessionGenesis = new HyperliquidWalletDeploySessionGenesis$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PerformancePoint$Type extends MessageType<PerformancePoint> {
    constructor() {
        super("hypurr.PerformancePoint", [
            { no: 1, name: "time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "notional", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "pnl", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<PerformancePoint>): PerformancePoint {
        const message = { time: 0, notional: 0, pnl: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PerformancePoint>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PerformancePoint): PerformancePoint {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 time */ 1:
                    message.time = reader.int64().toNumber();
                    break;
                case /* float notional */ 2:
                    message.notional = reader.float();
                    break;
                case /* float pnl */ 3:
                    message.pnl = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PerformancePoint, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 time = 1; */
        if (message.time !== 0)
            writer.tag(1, WireType.Varint).int64(message.time);
        /* float notional = 2; */
        if (message.notional !== 0)
            writer.tag(2, WireType.Bit32).float(message.notional);
        /* float pnl = 3; */
        if (message.pnl !== 0)
            writer.tag(3, WireType.Bit32).float(message.pnl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hypurr.PerformancePoint
 */
export const PerformancePoint = new PerformancePoint$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PerformanceReport$Type extends MessageType<PerformanceReport> {
    constructor() {
        super("hypurr.PerformanceReport", [
            { no: 1, name: "token_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "total_pnl", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "running_pnl", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "size", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 5, name: "price", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 6, name: "entry_price", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 7, name: "total_cost", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 8, name: "running_cost", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<PerformanceReport>): PerformanceReport {
        const message = { tokenId: 0, totalPnl: 0, runningPnl: 0, size: 0, price: 0, entryPrice: 0, totalCost: 0, runningCost: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PerformanceReport>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PerformanceReport): PerformanceReport {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 token_id */ 1:
                    message.tokenId = reader.int64().toNumber();
                    break;
                case /* float total_pnl */ 2:
                    message.totalPnl = reader.float();
                    break;
                case /* float running_pnl */ 3:
                    message.runningPnl = reader.float();
                    break;
                case /* float size */ 4:
                    message.size = reader.float();
                    break;
                case /* float price */ 5:
                    message.price = reader.float();
                    break;
                case /* float entry_price */ 6:
                    message.entryPrice = reader.float();
                    break;
                case /* float total_cost */ 7:
                    message.totalCost = reader.float();
                    break;
                case /* float running_cost */ 8:
                    message.runningCost = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PerformanceReport, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 token_id = 1; */
        if (message.tokenId !== 0)
            writer.tag(1, WireType.Varint).int64(message.tokenId);
        /* float total_pnl = 2; */
        if (message.totalPnl !== 0)
            writer.tag(2, WireType.Bit32).float(message.totalPnl);
        /* float running_pnl = 3; */
        if (message.runningPnl !== 0)
            writer.tag(3, WireType.Bit32).float(message.runningPnl);
        /* float size = 4; */
        if (message.size !== 0)
            writer.tag(4, WireType.Bit32).float(message.size);
        /* float price = 5; */
        if (message.price !== 0)
            writer.tag(5, WireType.Bit32).float(message.price);
        /* float entry_price = 6; */
        if (message.entryPrice !== 0)
            writer.tag(6, WireType.Bit32).float(message.entryPrice);
        /* float total_cost = 7; */
        if (message.totalCost !== 0)
            writer.tag(7, WireType.Bit32).float(message.totalCost);
        /* float running_cost = 8; */
        if (message.runningCost !== 0)
            writer.tag(8, WireType.Bit32).float(message.runningCost);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hypurr.PerformanceReport
 */
export const PerformanceReport = new PerformanceReport$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Performance$Type extends MessageType<Performance> {
    constructor() {
        super("hypurr.Performance", [
            { no: 1, name: "net_cash", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 2, name: "notional", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "reports", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PerformanceReport },
            { no: 4, name: "points", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PerformancePoint }
        ]);
    }
    create(value?: PartialMessage<Performance>): Performance {
        const message = { netCash: 0, notional: 0, reports: [], points: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Performance>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Performance): Performance {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* float net_cash */ 1:
                    message.netCash = reader.float();
                    break;
                case /* float notional */ 2:
                    message.notional = reader.float();
                    break;
                case /* repeated hypurr.PerformanceReport reports */ 3:
                    message.reports.push(PerformanceReport.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated hypurr.PerformancePoint points */ 4:
                    message.points.push(PerformancePoint.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Performance, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* float net_cash = 1; */
        if (message.netCash !== 0)
            writer.tag(1, WireType.Bit32).float(message.netCash);
        /* float notional = 2; */
        if (message.notional !== 0)
            writer.tag(2, WireType.Bit32).float(message.notional);
        /* repeated hypurr.PerformanceReport reports = 3; */
        for (let i = 0; i < message.reports.length; i++)
            PerformanceReport.internalBinaryWrite(message.reports[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated hypurr.PerformancePoint points = 4; */
        for (let i = 0; i < message.points.length; i++)
            PerformancePoint.internalBinaryWrite(message.points[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hypurr.Performance
 */
export const Performance = new Performance$Type();
