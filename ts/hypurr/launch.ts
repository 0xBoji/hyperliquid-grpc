// @generated by protobuf-ts 2.8.2 with parameter long_type_number
// @generated from protobuf file "hypurr/launch.proto" (package "hypurr", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { StringValue } from "../google/protobuf/wrappers";
import { HyperliquidPublicWallet } from "./wallet";
import { Int64Value } from "../google/protobuf/wrappers";
import { HyperliquidWalletDeploySession } from "./wallet";
import { TelegramUserPublic } from "./common";
/**
 * @generated from protobuf message hypurr.HyperliquidLaunch
 */
export interface HyperliquidLaunch {
    /**
     * Launch id
     *
     * @generated from protobuf field: int64 id = 1;
     */
    id: number;
    /**
     * Dev telegram id
     *
     * @generated from protobuf field: int64 telegram_id = 2;
     */
    telegramId: number;
    /**
     * Dev telegram user
     *
     * @generated from protobuf field: hypurr.TelegramUserPublic telegram_user = 3;
     */
    telegramUser?: TelegramUserPublic;
    /**
     * Description
     *
     * @generated from protobuf field: string description = 4;
     */
    description: string;
    /**
     * Listed
     *
     * @generated from protobuf field: bool listed = 5;
     */
    listed: boolean;
    /**
     * Settled
     *
     * @generated from protobuf field: bool settled = 6;
     */
    settled: boolean;
    /**
     * Initial x, virtual USDC balance
     *
     * @generated from protobuf field: int64 x0 = 7;
     */
    x0: number;
    /**
     * Session id
     *
     * @generated from protobuf field: int64 session_id = 8;
     */
    sessionId: number;
    /**
     * Deploy session
     *
     * @generated from protobuf field: hypurr.HyperliquidWalletDeploySession session = 9;
     */
    session?: HyperliquidWalletDeploySession;
    /**
     * @generated from protobuf field: string media_file_id = 10;
     */
    mediaFileId: string;
    /**
     * @generated from protobuf field: google.protobuf.Int64Value topic_id = 11;
     */
    topicId?: Int64Value;
    /**
     * @generated from protobuf field: int64 x = 12;
     */
    x: number;
    /**
     * Constant y
     *
     * @generated from protobuf field: int64 y = 13;
     */
    y: number;
    /**
     * Constant k
     *
     * @generated from protobuf field: int64 k = 14;
     */
    k: number;
    /**
     * Fills
     *
     * @generated from protobuf field: repeated hypurr.HyperliquidLaunchFill fills = 15;
     */
    fills: HyperliquidLaunchFill[];
    /**
     * Daily notional volume
     *
     * @generated from protobuf field: double daily_ntl_volume = 16;
     */
    dailyNtlVolume: number;
    /**
     * Previous day price
     *
     * @generated from protobuf field: double previous_day_px = 17;
     */
    previousDayPx: number;
    /**
     * Last trade timestamp
     *
     * @generated from protobuf field: int64 last_event_timestamp = 18;
     */
    lastEventTimestamp: number;
    /**
     * Pool type (quadratic, linear, fixed)
     *
     * @generated from protobuf field: hypurr.HyperliquidLaunchPoolType pool_type = 19;
     */
    poolType: HyperliquidLaunchPoolType;
    /**
     * Decimals
     *
     * @generated from protobuf field: int64 decimals = 20;
     */
    decimals: number;
    /**
     * Session pool wallet
     *
     * @generated from protobuf field: hypurr.HyperliquidPublicWallet session_wallet = 21;
     */
    sessionWallet?: HyperliquidPublicWallet;
    /**
     * Media type (photo, video,..)
     *
     * @generated from protobuf field: string media_type = 22;
     */
    mediaType: string;
    /**
     * Timestamp of when the launch was listed
     *
     * @generated from protobuf field: int64 listed_timestamp = 23;
     */
    listedTimestamp: number;
    /**
     * Dev wallet
     *
     * @generated from protobuf field: hypurr.HyperliquidPublicWallet dev_wallet = 24;
     */
    devWallet?: HyperliquidPublicWallet;
    /**
     * Dev lockup time in nanoseconds
     * deprecated
     *
     * @generated from protobuf field: int64 dev_lockup = 25 [jstype = JS_STRING];
     */
    devLockup: string;
    /**
     * dev lockup time in seconds
     *
     * @generated from protobuf field: int64 dev_lockup_seconds = 26;
     */
    devLockupSeconds: number;
}
/**
 * @generated from protobuf message hypurr.HyperliquidLaunchPosition
 */
export interface HyperliquidLaunchPosition {
    /**
     * @generated from protobuf field: string address = 1;
     */
    address: string;
    /**
     * @generated from protobuf field: int64 balance = 2;
     */
    balance: number;
    /**
     * @generated from protobuf field: int64 cost = 3;
     */
    cost: number;
}
/**
 * @generated from protobuf message hypurr.HyperliquidLaunchFill
 */
export interface HyperliquidLaunchFill {
    /**
     * @generated from protobuf field: int64 launch_id = 1;
     */
    launchId: number;
    /**
     * @generated from protobuf field: int64 telegram_id = 2;
     */
    telegramId: number;
    /**
     * @generated from protobuf field: hypurr.TelegramUserPublic telegram = 3;
     */
    telegram?: TelegramUserPublic;
    /**
     * @generated from protobuf field: hypurr.HyperliquidPublicWallet wallet = 4;
     */
    wallet?: HyperliquidPublicWallet;
    /**
     * @generated from protobuf field: int64 usdc_delta = 5;
     */
    usdcDelta: number;
    /**
     * @generated from protobuf field: int64 launch_delta = 6;
     */
    launchDelta: number;
    /**
     * @generated from protobuf field: int64 timestamp = 7;
     */
    timestamp: number;
    /**
     * @generated from protobuf field: google.protobuf.StringValue movement_hash = 8;
     */
    movementHash?: StringValue;
    /**
     * @generated from protobuf field: int64 id = 9;
     */
    id: number;
}
/**
 * @generated from protobuf message hypurr.HyperliquidLaunchCandle
 */
export interface HyperliquidLaunchCandle {
    /**
     * @generated from protobuf field: int64 time = 1;
     */
    time: number;
    /**
     * @generated from protobuf field: float open = 2;
     */
    open: number;
    /**
     * @generated from protobuf field: float high = 3;
     */
    high: number;
    /**
     * @generated from protobuf field: float low = 4;
     */
    low: number;
    /**
     * @generated from protobuf field: float close = 5;
     */
    close: number;
    /**
     * @generated from protobuf field: float volume = 6;
     */
    volume: number;
}
/**
 * @generated from protobuf message hypurr.HyperliquidLaunchMessage
 */
export interface HyperliquidLaunchMessage {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf field: int64 timestamp = 2;
     */
    timestamp: number;
    /**
     * @generated from protobuf field: int64 launch_id = 3;
     */
    launchId: number;
    /**
     * @generated from protobuf field: int64 telegram_id = 4;
     */
    telegramId: number;
    /**
     * @generated from protobuf field: hypurr.TelegramUserPublic author = 5;
     */
    author?: TelegramUserPublic;
    /**
     * @generated from protobuf field: int64 chat_id = 6;
     */
    chatId: number;
    /**
     * @generated from protobuf field: int64 topic_id = 7;
     */
    topicId: number;
    /**
     * @generated from protobuf field: string message = 8;
     */
    message: string;
    /**
     * @generated from protobuf field: bool pinned = 9;
     */
    pinned: boolean;
}
/**
 * @generated from protobuf message hypurr.HyperliquidLaunchHolder
 */
export interface HyperliquidLaunchHolder {
    /**
     * @generated from protobuf field: int64 balance = 1;
     */
    balance: number;
    /**
     * @generated from protobuf field: string address = 2;
     */
    address: string;
    /**
     * @generated from protobuf field: string type = 3;
     */
    type: string;
}
/**
 * @generated from protobuf enum hypurr.HyperliquidLaunchPoolType
 */
export enum HyperliquidLaunchPoolType {
    /**
     * @generated from protobuf enum value: Quadratic = 0;
     */
    Quadratic = 0,
    /**
     * @generated from protobuf enum value: QuadraticV2 = 1;
     */
    QuadraticV2 = 1,
    /**
     * @generated from protobuf enum value: Linear = 2;
     */
    Linear = 2,
    /**
     * @generated from protobuf enum value: Fixed = 3;
     */
    Fixed = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class HyperliquidLaunch$Type extends MessageType<HyperliquidLaunch> {
    constructor() {
        super("hypurr.HyperliquidLaunch", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "telegram_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "telegram_user", kind: "message", T: () => TelegramUserPublic },
            { no: 4, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "listed", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "settled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "x0", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 8, name: "session_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 9, name: "session", kind: "message", T: () => HyperliquidWalletDeploySession },
            { no: 10, name: "media_file_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "topic_id", kind: "message", T: () => Int64Value },
            { no: 12, name: "x", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 13, name: "y", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 14, name: "k", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 15, name: "fills", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => HyperliquidLaunchFill },
            { no: 16, name: "daily_ntl_volume", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 17, name: "previous_day_px", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 18, name: "last_event_timestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 19, name: "pool_type", kind: "enum", T: () => ["hypurr.HyperliquidLaunchPoolType", HyperliquidLaunchPoolType] },
            { no: 20, name: "decimals", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 21, name: "session_wallet", kind: "message", T: () => HyperliquidPublicWallet },
            { no: 22, name: "media_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 23, name: "listed_timestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 24, name: "dev_wallet", kind: "message", T: () => HyperliquidPublicWallet },
            { no: 25, name: "dev_lockup", kind: "scalar", T: 3 /*ScalarType.INT64*/ },
            { no: 26, name: "dev_lockup_seconds", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<HyperliquidLaunch>): HyperliquidLaunch {
        const message = { id: 0, telegramId: 0, description: "", listed: false, settled: false, x0: 0, sessionId: 0, mediaFileId: "", x: 0, y: 0, k: 0, fills: [], dailyNtlVolume: 0, previousDayPx: 0, lastEventTimestamp: 0, poolType: 0, decimals: 0, mediaType: "", listedTimestamp: 0, devLockup: "0", devLockupSeconds: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HyperliquidLaunch>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HyperliquidLaunch): HyperliquidLaunch {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toNumber();
                    break;
                case /* int64 telegram_id */ 2:
                    message.telegramId = reader.int64().toNumber();
                    break;
                case /* hypurr.TelegramUserPublic telegram_user */ 3:
                    message.telegramUser = TelegramUserPublic.internalBinaryRead(reader, reader.uint32(), options, message.telegramUser);
                    break;
                case /* string description */ 4:
                    message.description = reader.string();
                    break;
                case /* bool listed */ 5:
                    message.listed = reader.bool();
                    break;
                case /* bool settled */ 6:
                    message.settled = reader.bool();
                    break;
                case /* int64 x0 */ 7:
                    message.x0 = reader.int64().toNumber();
                    break;
                case /* int64 session_id */ 8:
                    message.sessionId = reader.int64().toNumber();
                    break;
                case /* hypurr.HyperliquidWalletDeploySession session */ 9:
                    message.session = HyperliquidWalletDeploySession.internalBinaryRead(reader, reader.uint32(), options, message.session);
                    break;
                case /* string media_file_id */ 10:
                    message.mediaFileId = reader.string();
                    break;
                case /* google.protobuf.Int64Value topic_id */ 11:
                    message.topicId = Int64Value.internalBinaryRead(reader, reader.uint32(), options, message.topicId);
                    break;
                case /* int64 x */ 12:
                    message.x = reader.int64().toNumber();
                    break;
                case /* int64 y */ 13:
                    message.y = reader.int64().toNumber();
                    break;
                case /* int64 k */ 14:
                    message.k = reader.int64().toNumber();
                    break;
                case /* repeated hypurr.HyperliquidLaunchFill fills */ 15:
                    message.fills.push(HyperliquidLaunchFill.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* double daily_ntl_volume */ 16:
                    message.dailyNtlVolume = reader.double();
                    break;
                case /* double previous_day_px */ 17:
                    message.previousDayPx = reader.double();
                    break;
                case /* int64 last_event_timestamp */ 18:
                    message.lastEventTimestamp = reader.int64().toNumber();
                    break;
                case /* hypurr.HyperliquidLaunchPoolType pool_type */ 19:
                    message.poolType = reader.int32();
                    break;
                case /* int64 decimals */ 20:
                    message.decimals = reader.int64().toNumber();
                    break;
                case /* hypurr.HyperliquidPublicWallet session_wallet */ 21:
                    message.sessionWallet = HyperliquidPublicWallet.internalBinaryRead(reader, reader.uint32(), options, message.sessionWallet);
                    break;
                case /* string media_type */ 22:
                    message.mediaType = reader.string();
                    break;
                case /* int64 listed_timestamp */ 23:
                    message.listedTimestamp = reader.int64().toNumber();
                    break;
                case /* hypurr.HyperliquidPublicWallet dev_wallet */ 24:
                    message.devWallet = HyperliquidPublicWallet.internalBinaryRead(reader, reader.uint32(), options, message.devWallet);
                    break;
                case /* int64 dev_lockup = 25 [jstype = JS_STRING];*/ 25:
                    message.devLockup = reader.int64().toString();
                    break;
                case /* int64 dev_lockup_seconds */ 26:
                    message.devLockupSeconds = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HyperliquidLaunch, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* int64 telegram_id = 2; */
        if (message.telegramId !== 0)
            writer.tag(2, WireType.Varint).int64(message.telegramId);
        /* hypurr.TelegramUserPublic telegram_user = 3; */
        if (message.telegramUser)
            TelegramUserPublic.internalBinaryWrite(message.telegramUser, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string description = 4; */
        if (message.description !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.description);
        /* bool listed = 5; */
        if (message.listed !== false)
            writer.tag(5, WireType.Varint).bool(message.listed);
        /* bool settled = 6; */
        if (message.settled !== false)
            writer.tag(6, WireType.Varint).bool(message.settled);
        /* int64 x0 = 7; */
        if (message.x0 !== 0)
            writer.tag(7, WireType.Varint).int64(message.x0);
        /* int64 session_id = 8; */
        if (message.sessionId !== 0)
            writer.tag(8, WireType.Varint).int64(message.sessionId);
        /* hypurr.HyperliquidWalletDeploySession session = 9; */
        if (message.session)
            HyperliquidWalletDeploySession.internalBinaryWrite(message.session, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* string media_file_id = 10; */
        if (message.mediaFileId !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.mediaFileId);
        /* google.protobuf.Int64Value topic_id = 11; */
        if (message.topicId)
            Int64Value.internalBinaryWrite(message.topicId, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* int64 x = 12; */
        if (message.x !== 0)
            writer.tag(12, WireType.Varint).int64(message.x);
        /* int64 y = 13; */
        if (message.y !== 0)
            writer.tag(13, WireType.Varint).int64(message.y);
        /* int64 k = 14; */
        if (message.k !== 0)
            writer.tag(14, WireType.Varint).int64(message.k);
        /* repeated hypurr.HyperliquidLaunchFill fills = 15; */
        for (let i = 0; i < message.fills.length; i++)
            HyperliquidLaunchFill.internalBinaryWrite(message.fills[i], writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* double daily_ntl_volume = 16; */
        if (message.dailyNtlVolume !== 0)
            writer.tag(16, WireType.Bit64).double(message.dailyNtlVolume);
        /* double previous_day_px = 17; */
        if (message.previousDayPx !== 0)
            writer.tag(17, WireType.Bit64).double(message.previousDayPx);
        /* int64 last_event_timestamp = 18; */
        if (message.lastEventTimestamp !== 0)
            writer.tag(18, WireType.Varint).int64(message.lastEventTimestamp);
        /* hypurr.HyperliquidLaunchPoolType pool_type = 19; */
        if (message.poolType !== 0)
            writer.tag(19, WireType.Varint).int32(message.poolType);
        /* int64 decimals = 20; */
        if (message.decimals !== 0)
            writer.tag(20, WireType.Varint).int64(message.decimals);
        /* hypurr.HyperliquidPublicWallet session_wallet = 21; */
        if (message.sessionWallet)
            HyperliquidPublicWallet.internalBinaryWrite(message.sessionWallet, writer.tag(21, WireType.LengthDelimited).fork(), options).join();
        /* string media_type = 22; */
        if (message.mediaType !== "")
            writer.tag(22, WireType.LengthDelimited).string(message.mediaType);
        /* int64 listed_timestamp = 23; */
        if (message.listedTimestamp !== 0)
            writer.tag(23, WireType.Varint).int64(message.listedTimestamp);
        /* hypurr.HyperliquidPublicWallet dev_wallet = 24; */
        if (message.devWallet)
            HyperliquidPublicWallet.internalBinaryWrite(message.devWallet, writer.tag(24, WireType.LengthDelimited).fork(), options).join();
        /* int64 dev_lockup = 25 [jstype = JS_STRING]; */
        if (message.devLockup !== "0")
            writer.tag(25, WireType.Varint).int64(message.devLockup);
        /* int64 dev_lockup_seconds = 26; */
        if (message.devLockupSeconds !== 0)
            writer.tag(26, WireType.Varint).int64(message.devLockupSeconds);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hypurr.HyperliquidLaunch
 */
export const HyperliquidLaunch = new HyperliquidLaunch$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HyperliquidLaunchPosition$Type extends MessageType<HyperliquidLaunchPosition> {
    constructor() {
        super("hypurr.HyperliquidLaunchPosition", [
            { no: 1, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "balance", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "cost", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<HyperliquidLaunchPosition>): HyperliquidLaunchPosition {
        const message = { address: "", balance: 0, cost: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HyperliquidLaunchPosition>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HyperliquidLaunchPosition): HyperliquidLaunchPosition {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string address */ 1:
                    message.address = reader.string();
                    break;
                case /* int64 balance */ 2:
                    message.balance = reader.int64().toNumber();
                    break;
                case /* int64 cost */ 3:
                    message.cost = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HyperliquidLaunchPosition, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string address = 1; */
        if (message.address !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.address);
        /* int64 balance = 2; */
        if (message.balance !== 0)
            writer.tag(2, WireType.Varint).int64(message.balance);
        /* int64 cost = 3; */
        if (message.cost !== 0)
            writer.tag(3, WireType.Varint).int64(message.cost);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hypurr.HyperliquidLaunchPosition
 */
export const HyperliquidLaunchPosition = new HyperliquidLaunchPosition$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HyperliquidLaunchFill$Type extends MessageType<HyperliquidLaunchFill> {
    constructor() {
        super("hypurr.HyperliquidLaunchFill", [
            { no: 1, name: "launch_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "telegram_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "telegram", kind: "message", T: () => TelegramUserPublic },
            { no: 4, name: "wallet", kind: "message", T: () => HyperliquidPublicWallet },
            { no: 5, name: "usdc_delta", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 6, name: "launch_delta", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 7, name: "timestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 8, name: "movement_hash", kind: "message", T: () => StringValue },
            { no: 9, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<HyperliquidLaunchFill>): HyperliquidLaunchFill {
        const message = { launchId: 0, telegramId: 0, usdcDelta: 0, launchDelta: 0, timestamp: 0, id: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HyperliquidLaunchFill>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HyperliquidLaunchFill): HyperliquidLaunchFill {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 launch_id */ 1:
                    message.launchId = reader.int64().toNumber();
                    break;
                case /* int64 telegram_id */ 2:
                    message.telegramId = reader.int64().toNumber();
                    break;
                case /* hypurr.TelegramUserPublic telegram */ 3:
                    message.telegram = TelegramUserPublic.internalBinaryRead(reader, reader.uint32(), options, message.telegram);
                    break;
                case /* hypurr.HyperliquidPublicWallet wallet */ 4:
                    message.wallet = HyperliquidPublicWallet.internalBinaryRead(reader, reader.uint32(), options, message.wallet);
                    break;
                case /* int64 usdc_delta */ 5:
                    message.usdcDelta = reader.int64().toNumber();
                    break;
                case /* int64 launch_delta */ 6:
                    message.launchDelta = reader.int64().toNumber();
                    break;
                case /* int64 timestamp */ 7:
                    message.timestamp = reader.int64().toNumber();
                    break;
                case /* google.protobuf.StringValue movement_hash */ 8:
                    message.movementHash = StringValue.internalBinaryRead(reader, reader.uint32(), options, message.movementHash);
                    break;
                case /* int64 id */ 9:
                    message.id = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HyperliquidLaunchFill, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 launch_id = 1; */
        if (message.launchId !== 0)
            writer.tag(1, WireType.Varint).int64(message.launchId);
        /* int64 telegram_id = 2; */
        if (message.telegramId !== 0)
            writer.tag(2, WireType.Varint).int64(message.telegramId);
        /* hypurr.TelegramUserPublic telegram = 3; */
        if (message.telegram)
            TelegramUserPublic.internalBinaryWrite(message.telegram, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* hypurr.HyperliquidPublicWallet wallet = 4; */
        if (message.wallet)
            HyperliquidPublicWallet.internalBinaryWrite(message.wallet, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* int64 usdc_delta = 5; */
        if (message.usdcDelta !== 0)
            writer.tag(5, WireType.Varint).int64(message.usdcDelta);
        /* int64 launch_delta = 6; */
        if (message.launchDelta !== 0)
            writer.tag(6, WireType.Varint).int64(message.launchDelta);
        /* int64 timestamp = 7; */
        if (message.timestamp !== 0)
            writer.tag(7, WireType.Varint).int64(message.timestamp);
        /* google.protobuf.StringValue movement_hash = 8; */
        if (message.movementHash)
            StringValue.internalBinaryWrite(message.movementHash, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* int64 id = 9; */
        if (message.id !== 0)
            writer.tag(9, WireType.Varint).int64(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hypurr.HyperliquidLaunchFill
 */
export const HyperliquidLaunchFill = new HyperliquidLaunchFill$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HyperliquidLaunchCandle$Type extends MessageType<HyperliquidLaunchCandle> {
    constructor() {
        super("hypurr.HyperliquidLaunchCandle", [
            { no: 1, name: "time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "open", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "high", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "low", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 5, name: "close", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 6, name: "volume", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<HyperliquidLaunchCandle>): HyperliquidLaunchCandle {
        const message = { time: 0, open: 0, high: 0, low: 0, close: 0, volume: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HyperliquidLaunchCandle>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HyperliquidLaunchCandle): HyperliquidLaunchCandle {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 time */ 1:
                    message.time = reader.int64().toNumber();
                    break;
                case /* float open */ 2:
                    message.open = reader.float();
                    break;
                case /* float high */ 3:
                    message.high = reader.float();
                    break;
                case /* float low */ 4:
                    message.low = reader.float();
                    break;
                case /* float close */ 5:
                    message.close = reader.float();
                    break;
                case /* float volume */ 6:
                    message.volume = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HyperliquidLaunchCandle, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 time = 1; */
        if (message.time !== 0)
            writer.tag(1, WireType.Varint).int64(message.time);
        /* float open = 2; */
        if (message.open !== 0)
            writer.tag(2, WireType.Bit32).float(message.open);
        /* float high = 3; */
        if (message.high !== 0)
            writer.tag(3, WireType.Bit32).float(message.high);
        /* float low = 4; */
        if (message.low !== 0)
            writer.tag(4, WireType.Bit32).float(message.low);
        /* float close = 5; */
        if (message.close !== 0)
            writer.tag(5, WireType.Bit32).float(message.close);
        /* float volume = 6; */
        if (message.volume !== 0)
            writer.tag(6, WireType.Bit32).float(message.volume);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hypurr.HyperliquidLaunchCandle
 */
export const HyperliquidLaunchCandle = new HyperliquidLaunchCandle$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HyperliquidLaunchMessage$Type extends MessageType<HyperliquidLaunchMessage> {
    constructor() {
        super("hypurr.HyperliquidLaunchMessage", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "timestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "launch_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "telegram_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 5, name: "author", kind: "message", T: () => TelegramUserPublic },
            { no: 6, name: "chat_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 7, name: "topic_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 8, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "pinned", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<HyperliquidLaunchMessage>): HyperliquidLaunchMessage {
        const message = { id: 0, timestamp: 0, launchId: 0, telegramId: 0, chatId: 0, topicId: 0, message: "", pinned: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HyperliquidLaunchMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HyperliquidLaunchMessage): HyperliquidLaunchMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toNumber();
                    break;
                case /* int64 timestamp */ 2:
                    message.timestamp = reader.int64().toNumber();
                    break;
                case /* int64 launch_id */ 3:
                    message.launchId = reader.int64().toNumber();
                    break;
                case /* int64 telegram_id */ 4:
                    message.telegramId = reader.int64().toNumber();
                    break;
                case /* hypurr.TelegramUserPublic author */ 5:
                    message.author = TelegramUserPublic.internalBinaryRead(reader, reader.uint32(), options, message.author);
                    break;
                case /* int64 chat_id */ 6:
                    message.chatId = reader.int64().toNumber();
                    break;
                case /* int64 topic_id */ 7:
                    message.topicId = reader.int64().toNumber();
                    break;
                case /* string message */ 8:
                    message.message = reader.string();
                    break;
                case /* bool pinned */ 9:
                    message.pinned = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HyperliquidLaunchMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* int64 timestamp = 2; */
        if (message.timestamp !== 0)
            writer.tag(2, WireType.Varint).int64(message.timestamp);
        /* int64 launch_id = 3; */
        if (message.launchId !== 0)
            writer.tag(3, WireType.Varint).int64(message.launchId);
        /* int64 telegram_id = 4; */
        if (message.telegramId !== 0)
            writer.tag(4, WireType.Varint).int64(message.telegramId);
        /* hypurr.TelegramUserPublic author = 5; */
        if (message.author)
            TelegramUserPublic.internalBinaryWrite(message.author, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* int64 chat_id = 6; */
        if (message.chatId !== 0)
            writer.tag(6, WireType.Varint).int64(message.chatId);
        /* int64 topic_id = 7; */
        if (message.topicId !== 0)
            writer.tag(7, WireType.Varint).int64(message.topicId);
        /* string message = 8; */
        if (message.message !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.message);
        /* bool pinned = 9; */
        if (message.pinned !== false)
            writer.tag(9, WireType.Varint).bool(message.pinned);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hypurr.HyperliquidLaunchMessage
 */
export const HyperliquidLaunchMessage = new HyperliquidLaunchMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HyperliquidLaunchHolder$Type extends MessageType<HyperliquidLaunchHolder> {
    constructor() {
        super("hypurr.HyperliquidLaunchHolder", [
            { no: 1, name: "balance", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<HyperliquidLaunchHolder>): HyperliquidLaunchHolder {
        const message = { balance: 0, address: "", type: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HyperliquidLaunchHolder>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HyperliquidLaunchHolder): HyperliquidLaunchHolder {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 balance */ 1:
                    message.balance = reader.int64().toNumber();
                    break;
                case /* string address */ 2:
                    message.address = reader.string();
                    break;
                case /* string type */ 3:
                    message.type = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HyperliquidLaunchHolder, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 balance = 1; */
        if (message.balance !== 0)
            writer.tag(1, WireType.Varint).int64(message.balance);
        /* string address = 2; */
        if (message.address !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.address);
        /* string type = 3; */
        if (message.type !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.type);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hypurr.HyperliquidLaunchHolder
 */
export const HyperliquidLaunchHolder = new HyperliquidLaunchHolder$Type();
