// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.21.12
// source: hypurr/evm.proto

package hypurr

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ERC20 Token messages
type ERC20Token struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address          string  `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Name             string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Symbol           string  `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Decimals         int32   `protobuf:"varint,4,opt,name=decimals,proto3" json:"decimals,omitempty"`
	TotalSupply      string  `protobuf:"bytes,5,opt,name=total_supply,json=totalSupply,proto3" json:"total_supply,omitempty"`           // Using string for big integers
	PriceInWhype     float64 `protobuf:"fixed64,6,opt,name=price_in_whype,json=priceInWhype,proto3" json:"price_in_whype,omitempty"`    // New field for price in WHYPE
	VolumeInWhype    float64 `protobuf:"fixed64,7,opt,name=volume_in_whype,json=volumeInWhype,proto3" json:"volume_in_whype,omitempty"` // Added field for volume in WHYPE
	LastVolumeUpdate int64   `protobuf:"varint,8,opt,name=last_volume_update,json=lastVolumeUpdate,proto3" json:"last_volume_update,omitempty"`
}

func (x *ERC20Token) Reset() {
	*x = ERC20Token{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_evm_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ERC20Token) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ERC20Token) ProtoMessage() {}

func (x *ERC20Token) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_evm_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ERC20Token.ProtoReflect.Descriptor instead.
func (*ERC20Token) Descriptor() ([]byte, []int) {
	return file_hypurr_evm_proto_rawDescGZIP(), []int{0}
}

func (x *ERC20Token) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ERC20Token) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ERC20Token) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *ERC20Token) GetDecimals() int32 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

func (x *ERC20Token) GetTotalSupply() string {
	if x != nil {
		return x.TotalSupply
	}
	return ""
}

func (x *ERC20Token) GetPriceInWhype() float64 {
	if x != nil {
		return x.PriceInWhype
	}
	return 0
}

func (x *ERC20Token) GetVolumeInWhype() float64 {
	if x != nil {
		return x.VolumeInWhype
	}
	return 0
}

func (x *ERC20Token) GetLastVolumeUpdate() int64 {
	if x != nil {
		return x.LastVolumeUpdate
	}
	return 0
}

// Account Balance messages
type ERC20AccountBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address  string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Contract string `protobuf:"bytes,2,opt,name=contract,proto3" json:"contract,omitempty"`
	Balance  string `protobuf:"bytes,3,opt,name=balance,proto3" json:"balance,omitempty"` // Using string for big integers
	IsOwner  bool   `protobuf:"varint,4,opt,name=is_owner,json=isOwner,proto3" json:"is_owner,omitempty"`
}

func (x *ERC20AccountBalance) Reset() {
	*x = ERC20AccountBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_evm_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ERC20AccountBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ERC20AccountBalance) ProtoMessage() {}

func (x *ERC20AccountBalance) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_evm_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ERC20AccountBalance.ProtoReflect.Descriptor instead.
func (*ERC20AccountBalance) Descriptor() ([]byte, []int) {
	return file_hypurr_evm_proto_rawDescGZIP(), []int{1}
}

func (x *ERC20AccountBalance) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ERC20AccountBalance) GetContract() string {
	if x != nil {
		return x.Contract
	}
	return ""
}

func (x *ERC20AccountBalance) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

func (x *ERC20AccountBalance) GetIsOwner() bool {
	if x != nil {
		return x.IsOwner
	}
	return false
}

// UniswapV2 Pair messages
type UniV2Pair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address     string      `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Token0      *ERC20Token `protobuf:"bytes,2,opt,name=token0,proto3" json:"token0,omitempty"`                              // Embedded token object
	Token1      *ERC20Token `protobuf:"bytes,3,opt,name=token1,proto3" json:"token1,omitempty"`                              // Embedded token object
	Reserve0    string      `protobuf:"bytes,4,opt,name=reserve0,proto3" json:"reserve0,omitempty"`                          // Using string for big integers
	Reserve1    string      `protobuf:"bytes,5,opt,name=reserve1,proto3" json:"reserve1,omitempty"`                          // Using string for big integers
	TotalSupply string      `protobuf:"bytes,6,opt,name=total_supply,json=totalSupply,proto3" json:"total_supply,omitempty"` // Using string for big integers
	Factory     string      `protobuf:"bytes,7,opt,name=factory,proto3" json:"factory,omitempty"`
}

func (x *UniV2Pair) Reset() {
	*x = UniV2Pair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_evm_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniV2Pair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniV2Pair) ProtoMessage() {}

func (x *UniV2Pair) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_evm_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniV2Pair.ProtoReflect.Descriptor instead.
func (*UniV2Pair) Descriptor() ([]byte, []int) {
	return file_hypurr_evm_proto_rawDescGZIP(), []int{2}
}

func (x *UniV2Pair) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *UniV2Pair) GetToken0() *ERC20Token {
	if x != nil {
		return x.Token0
	}
	return nil
}

func (x *UniV2Pair) GetToken1() *ERC20Token {
	if x != nil {
		return x.Token1
	}
	return nil
}

func (x *UniV2Pair) GetReserve0() string {
	if x != nil {
		return x.Reserve0
	}
	return ""
}

func (x *UniV2Pair) GetReserve1() string {
	if x != nil {
		return x.Reserve1
	}
	return ""
}

func (x *UniV2Pair) GetTotalSupply() string {
	if x != nil {
		return x.TotalSupply
	}
	return ""
}

func (x *UniV2Pair) GetFactory() string {
	if x != nil {
		return x.Factory
	}
	return ""
}

// Swap messages
type UniV2Swap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Pair       string `protobuf:"bytes,2,opt,name=pair,proto3" json:"pair,omitempty"`
	Sender     string `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty"`
	Amount0In  string `protobuf:"bytes,4,opt,name=amount0_in,json=amount0In,proto3" json:"amount0_in,omitempty"`    // Using string for big integers
	Amount1In  string `protobuf:"bytes,5,opt,name=amount1_in,json=amount1In,proto3" json:"amount1_in,omitempty"`    // Using string for big integers
	Amount0Out string `protobuf:"bytes,6,opt,name=amount0_out,json=amount0Out,proto3" json:"amount0_out,omitempty"` // Using string for big integers
	Amount1Out string `protobuf:"bytes,7,opt,name=amount1_out,json=amount1Out,proto3" json:"amount1_out,omitempty"` // Using string for big integers
	To         string `protobuf:"bytes,8,opt,name=to,proto3" json:"to,omitempty"`
	Timestamp  int64  `protobuf:"varint,9,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *UniV2Swap) Reset() {
	*x = UniV2Swap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_evm_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniV2Swap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniV2Swap) ProtoMessage() {}

func (x *UniV2Swap) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_evm_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniV2Swap.ProtoReflect.Descriptor instead.
func (*UniV2Swap) Descriptor() ([]byte, []int) {
	return file_hypurr_evm_proto_rawDescGZIP(), []int{3}
}

func (x *UniV2Swap) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UniV2Swap) GetPair() string {
	if x != nil {
		return x.Pair
	}
	return ""
}

func (x *UniV2Swap) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *UniV2Swap) GetAmount0In() string {
	if x != nil {
		return x.Amount0In
	}
	return ""
}

func (x *UniV2Swap) GetAmount1In() string {
	if x != nil {
		return x.Amount1In
	}
	return ""
}

func (x *UniV2Swap) GetAmount0Out() string {
	if x != nil {
		return x.Amount0Out
	}
	return ""
}

func (x *UniV2Swap) GetAmount1Out() string {
	if x != nil {
		return x.Amount1Out
	}
	return ""
}

func (x *UniV2Swap) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *UniV2Swap) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// ERC20 Transfer Event messages
type ERC20TransferEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Contract  string `protobuf:"bytes,2,opt,name=contract,proto3" json:"contract,omitempty"`
	Amount    string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"` // Using string for big integers
	Timestamp int64  `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	From      string `protobuf:"bytes,5,opt,name=from,proto3" json:"from,omitempty"`
	To        string `protobuf:"bytes,6,opt,name=to,proto3" json:"to,omitempty"`
}

func (x *ERC20TransferEvent) Reset() {
	*x = ERC20TransferEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_evm_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ERC20TransferEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ERC20TransferEvent) ProtoMessage() {}

func (x *ERC20TransferEvent) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_evm_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ERC20TransferEvent.ProtoReflect.Descriptor instead.
func (*ERC20TransferEvent) Descriptor() ([]byte, []int) {
	return file_hypurr_evm_proto_rawDescGZIP(), []int{4}
}

func (x *ERC20TransferEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ERC20TransferEvent) GetContract() string {
	if x != nil {
		return x.Contract
	}
	return ""
}

func (x *ERC20TransferEvent) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *ERC20TransferEvent) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ERC20TransferEvent) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *ERC20TransferEvent) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

// ERC20 Approval Event messages
type ERC20ApprovalEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Contract  string `protobuf:"bytes,2,opt,name=contract,proto3" json:"contract,omitempty"`
	Amount    string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"` // Using string for big integers
	Timestamp int64  `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Owner     string `protobuf:"bytes,5,opt,name=owner,proto3" json:"owner,omitempty"`
	Spender   string `protobuf:"bytes,6,opt,name=spender,proto3" json:"spender,omitempty"`
}

func (x *ERC20ApprovalEvent) Reset() {
	*x = ERC20ApprovalEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_evm_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ERC20ApprovalEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ERC20ApprovalEvent) ProtoMessage() {}

func (x *ERC20ApprovalEvent) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_evm_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ERC20ApprovalEvent.ProtoReflect.Descriptor instead.
func (*ERC20ApprovalEvent) Descriptor() ([]byte, []int) {
	return file_hypurr_evm_proto_rawDescGZIP(), []int{5}
}

func (x *ERC20ApprovalEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ERC20ApprovalEvent) GetContract() string {
	if x != nil {
		return x.Contract
	}
	return ""
}

func (x *ERC20ApprovalEvent) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *ERC20ApprovalEvent) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ERC20ApprovalEvent) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *ERC20ApprovalEvent) GetSpender() string {
	if x != nil {
		return x.Spender
	}
	return ""
}

// ERC20 Allowance messages
type ERC20Allowance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner   string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Spender string `protobuf:"bytes,2,opt,name=spender,proto3" json:"spender,omitempty"`
	Amount  string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"` // Using string for big integers
}

func (x *ERC20Allowance) Reset() {
	*x = ERC20Allowance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_evm_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ERC20Allowance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ERC20Allowance) ProtoMessage() {}

func (x *ERC20Allowance) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_evm_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ERC20Allowance.ProtoReflect.Descriptor instead.
func (*ERC20Allowance) Descriptor() ([]byte, []int) {
	return file_hypurr_evm_proto_rawDescGZIP(), []int{6}
}

func (x *ERC20Allowance) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *ERC20Allowance) GetSpender() string {
	if x != nil {
		return x.Spender
	}
	return ""
}

func (x *ERC20Allowance) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

// UniV2 Price Candle messages
type UniV2Candle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp    int64   `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Open         float64 `protobuf:"fixed64,2,opt,name=open,proto3" json:"open,omitempty"`
	High         float64 `protobuf:"fixed64,3,opt,name=high,proto3" json:"high,omitempty"`
	Low          float64 `protobuf:"fixed64,4,opt,name=low,proto3" json:"low,omitempty"`
	Close        float64 `protobuf:"fixed64,5,opt,name=close,proto3" json:"close,omitempty"`
	VolumeToken0 string  `protobuf:"bytes,6,opt,name=volume_token0,json=volumeToken0,proto3" json:"volume_token0,omitempty"` // Using string for big integers
	VolumeToken1 string  `protobuf:"bytes,7,opt,name=volume_token1,json=volumeToken1,proto3" json:"volume_token1,omitempty"` // Using string for big integers
}

func (x *UniV2Candle) Reset() {
	*x = UniV2Candle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_evm_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniV2Candle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniV2Candle) ProtoMessage() {}

func (x *UniV2Candle) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_evm_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniV2Candle.ProtoReflect.Descriptor instead.
func (*UniV2Candle) Descriptor() ([]byte, []int) {
	return file_hypurr_evm_proto_rawDescGZIP(), []int{7}
}

func (x *UniV2Candle) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *UniV2Candle) GetOpen() float64 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *UniV2Candle) GetHigh() float64 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *UniV2Candle) GetLow() float64 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *UniV2Candle) GetClose() float64 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *UniV2Candle) GetVolumeToken0() string {
	if x != nil {
		return x.VolumeToken0
	}
	return ""
}

func (x *UniV2Candle) GetVolumeToken1() string {
	if x != nil {
		return x.VolumeToken1
	}
	return ""
}

var File_hypurr_evm_proto protoreflect.FileDescriptor

var file_hypurr_evm_proto_rawDesc = []byte{
	0x0a, 0x10, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2f, 0x65, 0x76, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x06, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x22, 0x8d, 0x02, 0x0a, 0x0a, 0x45,
	0x52, 0x43, 0x32, 0x30, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x24,
	0x0a, 0x0e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x77, 0x68, 0x79, 0x70, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x57,
	0x68, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69,
	0x6e, 0x5f, 0x77, 0x68, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x6e, 0x57, 0x68, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x12,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x13, 0x45,
	0x52, 0x43, 0x32, 0x30, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0xf2, 0x01,
	0x0a, 0x09, 0x55, 0x6e, 0x69, 0x56, 0x32, 0x50, 0x61, 0x69, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x30, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x45,
	0x52, 0x43, 0x32, 0x30, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x30, 0x12, 0x2a, 0x0a, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x45, 0x52, 0x43, 0x32, 0x30,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x31, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x30, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x30, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x31, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73,
	0x75, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x22, 0xf5, 0x01, 0x0a, 0x09, 0x55, 0x6e, 0x69, 0x56, 0x32, 0x53, 0x77, 0x61, 0x70,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x61, 0x69, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x5f, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x49, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x5f, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x49, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x30, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x4f, 0x75, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x4f, 0x75, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x74, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x9a, 0x01, 0x0a, 0x12, 0x45,
	0x52, 0x43, 0x32, 0x30, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x22, 0xa6, 0x01, 0x0a, 0x12, 0x45, 0x52, 0x43, 0x32,
	0x30, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x22, 0x58, 0x0a, 0x0e, 0x45, 0x52, 0x43, 0x32, 0x30, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc5, 0x01, 0x0a, 0x0b, 0x55,
	0x6e, 0x69, 0x56, 0x32, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x69, 0x67, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68,
	0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c,
	0x6f, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x30, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x30, 0x12, 0x23, 0x0a,
	0x0d, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x31, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x31, 0x42, 0x29, 0x5a, 0x27, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2f, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2d, 0x67,
	0x72, 0x70, 0x63, 0x2f, 0x67, 0x6f, 0x2f, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_hypurr_evm_proto_rawDescOnce sync.Once
	file_hypurr_evm_proto_rawDescData = file_hypurr_evm_proto_rawDesc
)

func file_hypurr_evm_proto_rawDescGZIP() []byte {
	file_hypurr_evm_proto_rawDescOnce.Do(func() {
		file_hypurr_evm_proto_rawDescData = protoimpl.X.CompressGZIP(file_hypurr_evm_proto_rawDescData)
	})
	return file_hypurr_evm_proto_rawDescData
}

var file_hypurr_evm_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_hypurr_evm_proto_goTypes = []any{
	(*ERC20Token)(nil),          // 0: hypurr.ERC20Token
	(*ERC20AccountBalance)(nil), // 1: hypurr.ERC20AccountBalance
	(*UniV2Pair)(nil),           // 2: hypurr.UniV2Pair
	(*UniV2Swap)(nil),           // 3: hypurr.UniV2Swap
	(*ERC20TransferEvent)(nil),  // 4: hypurr.ERC20TransferEvent
	(*ERC20ApprovalEvent)(nil),  // 5: hypurr.ERC20ApprovalEvent
	(*ERC20Allowance)(nil),      // 6: hypurr.ERC20Allowance
	(*UniV2Candle)(nil),         // 7: hypurr.UniV2Candle
}
var file_hypurr_evm_proto_depIdxs = []int32{
	0, // 0: hypurr.UniV2Pair.token0:type_name -> hypurr.ERC20Token
	0, // 1: hypurr.UniV2Pair.token1:type_name -> hypurr.ERC20Token
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_hypurr_evm_proto_init() }
func file_hypurr_evm_proto_init() {
	if File_hypurr_evm_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_hypurr_evm_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*ERC20Token); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_evm_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ERC20AccountBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_evm_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*UniV2Pair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_evm_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*UniV2Swap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_evm_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*ERC20TransferEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_evm_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ERC20ApprovalEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_evm_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*ERC20Allowance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_evm_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*UniV2Candle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_hypurr_evm_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_hypurr_evm_proto_goTypes,
		DependencyIndexes: file_hypurr_evm_proto_depIdxs,
		MessageInfos:      file_hypurr_evm_proto_msgTypes,
	}.Build()
	File_hypurr_evm_proto = out.File
	file_hypurr_evm_proto_rawDesc = nil
	file_hypurr_evm_proto_goTypes = nil
	file_hypurr_evm_proto_depIdxs = nil
}
