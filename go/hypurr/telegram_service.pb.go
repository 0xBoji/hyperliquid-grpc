// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.21.12
// source: hypurr/telegram_service.proto

package hypurr

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HyperliquidLaunchTradeDirection int32

const (
	HyperliquidLaunchTradeDirection_BUY  HyperliquidLaunchTradeDirection = 0
	HyperliquidLaunchTradeDirection_SELL HyperliquidLaunchTradeDirection = 1
)

// Enum value maps for HyperliquidLaunchTradeDirection.
var (
	HyperliquidLaunchTradeDirection_name = map[int32]string{
		0: "BUY",
		1: "SELL",
	}
	HyperliquidLaunchTradeDirection_value = map[string]int32{
		"BUY":  0,
		"SELL": 1,
	}
)

func (x HyperliquidLaunchTradeDirection) Enum() *HyperliquidLaunchTradeDirection {
	p := new(HyperliquidLaunchTradeDirection)
	*p = x
	return p
}

func (x HyperliquidLaunchTradeDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HyperliquidLaunchTradeDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_hypurr_telegram_service_proto_enumTypes[0].Descriptor()
}

func (HyperliquidLaunchTradeDirection) Type() protoreflect.EnumType {
	return &file_hypurr_telegram_service_proto_enumTypes[0]
}

func (x HyperliquidLaunchTradeDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HyperliquidLaunchTradeDirection.Descriptor instead.
func (HyperliquidLaunchTradeDirection) EnumDescriptor() ([]byte, []int) {
	return file_hypurr_telegram_service_proto_rawDescGZIP(), []int{0}
}

type MediaType int32

const (
	MediaType_MEDIA_TYPE_PHOTO     MediaType = 0
	MediaType_MEDIA_TYPE_ANIMATION MediaType = 1
	MediaType_MEDIA_TYPE_VIDEO     MediaType = 2
)

// Enum value maps for MediaType.
var (
	MediaType_name = map[int32]string{
		0: "MEDIA_TYPE_PHOTO",
		1: "MEDIA_TYPE_ANIMATION",
		2: "MEDIA_TYPE_VIDEO",
	}
	MediaType_value = map[string]int32{
		"MEDIA_TYPE_PHOTO":     0,
		"MEDIA_TYPE_ANIMATION": 1,
		"MEDIA_TYPE_VIDEO":     2,
	}
)

func (x MediaType) Enum() *MediaType {
	p := new(MediaType)
	*p = x
	return p
}

func (x MediaType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MediaType) Descriptor() protoreflect.EnumDescriptor {
	return file_hypurr_telegram_service_proto_enumTypes[1].Descriptor()
}

func (MediaType) Type() protoreflect.EnumType {
	return &file_hypurr_telegram_service_proto_enumTypes[1]
}

func (x MediaType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MediaType.Descriptor instead.
func (MediaType) EnumDescriptor() ([]byte, []int) {
	return file_hypurr_telegram_service_proto_rawDescGZIP(), []int{1}
}

// Auth endpoints
type TelegramUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthData map[string]string `protobuf:"bytes,1,rep,name=auth_data,json=authData,proto3" json:"auth_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TelegramUserRequest) Reset() {
	*x = TelegramUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_telegram_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelegramUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelegramUserRequest) ProtoMessage() {}

func (x *TelegramUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_telegram_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelegramUserRequest.ProtoReflect.Descriptor instead.
func (*TelegramUserRequest) Descriptor() ([]byte, []int) {
	return file_hypurr_telegram_service_proto_rawDescGZIP(), []int{0}
}

func (x *TelegramUserRequest) GetAuthData() map[string]string {
	if x != nil {
		return x.AuthData
	}
	return nil
}

type TelegramUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User *TelegramUser `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *TelegramUserResponse) Reset() {
	*x = TelegramUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_telegram_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelegramUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelegramUserResponse) ProtoMessage() {}

func (x *TelegramUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_telegram_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelegramUserResponse.ProtoReflect.Descriptor instead.
func (*TelegramUserResponse) Descriptor() ([]byte, []int) {
	return file_hypurr_telegram_service_proto_rawDescGZIP(), []int{1}
}

func (x *TelegramUserResponse) GetUser() *TelegramUser {
	if x != nil {
		return x.User
	}
	return nil
}

type TelegramUserWalletsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthData map[string]string `protobuf:"bytes,1,rep,name=auth_data,json=authData,proto3" json:"auth_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TelegramUserWalletsRequest) Reset() {
	*x = TelegramUserWalletsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_telegram_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelegramUserWalletsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelegramUserWalletsRequest) ProtoMessage() {}

func (x *TelegramUserWalletsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_telegram_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelegramUserWalletsRequest.ProtoReflect.Descriptor instead.
func (*TelegramUserWalletsRequest) Descriptor() ([]byte, []int) {
	return file_hypurr_telegram_service_proto_rawDescGZIP(), []int{2}
}

func (x *TelegramUserWalletsRequest) GetAuthData() map[string]string {
	if x != nil {
		return x.AuthData
	}
	return nil
}

type TelegramUserWalletsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Wallets []*HyperliquidWallet `protobuf:"bytes,1,rep,name=wallets,proto3" json:"wallets,omitempty"`
}

func (x *TelegramUserWalletsResponse) Reset() {
	*x = TelegramUserWalletsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_telegram_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelegramUserWalletsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelegramUserWalletsResponse) ProtoMessage() {}

func (x *TelegramUserWalletsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_telegram_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelegramUserWalletsResponse.ProtoReflect.Descriptor instead.
func (*TelegramUserWalletsResponse) Descriptor() ([]byte, []int) {
	return file_hypurr_telegram_service_proto_rawDescGZIP(), []int{3}
}

func (x *TelegramUserWalletsResponse) GetWallets() []*HyperliquidWallet {
	if x != nil {
		return x.Wallets
	}
	return nil
}

type HyperliquidLaunchTradeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthData  map[string]string               `protobuf:"bytes,1,rep,name=auth_data,json=authData,proto3" json:"auth_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	LaunchId  int64                           `protobuf:"varint,2,opt,name=launch_id,json=launchId,proto3" json:"launch_id,omitempty"`
	WalletId  int64                           `protobuf:"varint,3,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	Direction HyperliquidLaunchTradeDirection `protobuf:"varint,4,opt,name=direction,proto3,enum=hypurr.HyperliquidLaunchTradeDirection" json:"direction,omitempty"`
	Amount    float64                         `protobuf:"fixed64,5,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *HyperliquidLaunchTradeRequest) Reset() {
	*x = HyperliquidLaunchTradeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_telegram_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidLaunchTradeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidLaunchTradeRequest) ProtoMessage() {}

func (x *HyperliquidLaunchTradeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_telegram_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidLaunchTradeRequest.ProtoReflect.Descriptor instead.
func (*HyperliquidLaunchTradeRequest) Descriptor() ([]byte, []int) {
	return file_hypurr_telegram_service_proto_rawDescGZIP(), []int{4}
}

func (x *HyperliquidLaunchTradeRequest) GetAuthData() map[string]string {
	if x != nil {
		return x.AuthData
	}
	return nil
}

func (x *HyperliquidLaunchTradeRequest) GetLaunchId() int64 {
	if x != nil {
		return x.LaunchId
	}
	return 0
}

func (x *HyperliquidLaunchTradeRequest) GetWalletId() int64 {
	if x != nil {
		return x.WalletId
	}
	return 0
}

func (x *HyperliquidLaunchTradeRequest) GetDirection() HyperliquidLaunchTradeDirection {
	if x != nil {
		return x.Direction
	}
	return HyperliquidLaunchTradeDirection_BUY
}

func (x *HyperliquidLaunchTradeRequest) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type HyperliquidLaunchTradeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseAmount  float64 `protobuf:"fixed64,1,opt,name=base_amount,json=baseAmount,proto3" json:"base_amount,omitempty"`
	QuoteAmount float64 `protobuf:"fixed64,2,opt,name=quote_amount,json=quoteAmount,proto3" json:"quote_amount,omitempty"`
	Message     string  `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Success     bool    `protobuf:"varint,4,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *HyperliquidLaunchTradeResponse) Reset() {
	*x = HyperliquidLaunchTradeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_telegram_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidLaunchTradeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidLaunchTradeResponse) ProtoMessage() {}

func (x *HyperliquidLaunchTradeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_telegram_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidLaunchTradeResponse.ProtoReflect.Descriptor instead.
func (*HyperliquidLaunchTradeResponse) Descriptor() ([]byte, []int) {
	return file_hypurr_telegram_service_proto_rawDescGZIP(), []int{5}
}

func (x *HyperliquidLaunchTradeResponse) GetBaseAmount() float64 {
	if x != nil {
		return x.BaseAmount
	}
	return 0
}

func (x *HyperliquidLaunchTradeResponse) GetQuoteAmount() float64 {
	if x != nil {
		return x.QuoteAmount
	}
	return 0
}

func (x *HyperliquidLaunchTradeResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *HyperliquidLaunchTradeResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type HyperliquidSpotTradeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthData  map[string]string               `protobuf:"bytes,1,rep,name=auth_data,json=authData,proto3" json:"auth_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PairId    int64                           `protobuf:"varint,2,opt,name=pair_id,json=pairId,proto3" json:"pair_id,omitempty"`
	WalletId  int64                           `protobuf:"varint,3,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	Direction HyperliquidLaunchTradeDirection `protobuf:"varint,4,opt,name=direction,proto3,enum=hypurr.HyperliquidLaunchTradeDirection" json:"direction,omitempty"`
	Amount    float64                         `protobuf:"fixed64,5,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *HyperliquidSpotTradeRequest) Reset() {
	*x = HyperliquidSpotTradeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_telegram_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidSpotTradeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidSpotTradeRequest) ProtoMessage() {}

func (x *HyperliquidSpotTradeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_telegram_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidSpotTradeRequest.ProtoReflect.Descriptor instead.
func (*HyperliquidSpotTradeRequest) Descriptor() ([]byte, []int) {
	return file_hypurr_telegram_service_proto_rawDescGZIP(), []int{6}
}

func (x *HyperliquidSpotTradeRequest) GetAuthData() map[string]string {
	if x != nil {
		return x.AuthData
	}
	return nil
}

func (x *HyperliquidSpotTradeRequest) GetPairId() int64 {
	if x != nil {
		return x.PairId
	}
	return 0
}

func (x *HyperliquidSpotTradeRequest) GetWalletId() int64 {
	if x != nil {
		return x.WalletId
	}
	return 0
}

func (x *HyperliquidSpotTradeRequest) GetDirection() HyperliquidLaunchTradeDirection {
	if x != nil {
		return x.Direction
	}
	return HyperliquidLaunchTradeDirection_BUY
}

func (x *HyperliquidSpotTradeRequest) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type HyperliquidSpotTradeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseAmount  float64 `protobuf:"fixed64,1,opt,name=base_amount,json=baseAmount,proto3" json:"base_amount,omitempty"`
	QuoteAmount float64 `protobuf:"fixed64,2,opt,name=quote_amount,json=quoteAmount,proto3" json:"quote_amount,omitempty"`
	Message     string  `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Success     bool    `protobuf:"varint,4,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *HyperliquidSpotTradeResponse) Reset() {
	*x = HyperliquidSpotTradeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_telegram_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidSpotTradeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidSpotTradeResponse) ProtoMessage() {}

func (x *HyperliquidSpotTradeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_telegram_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidSpotTradeResponse.ProtoReflect.Descriptor instead.
func (*HyperliquidSpotTradeResponse) Descriptor() ([]byte, []int) {
	return file_hypurr_telegram_service_proto_rawDescGZIP(), []int{7}
}

func (x *HyperliquidSpotTradeResponse) GetBaseAmount() float64 {
	if x != nil {
		return x.BaseAmount
	}
	return 0
}

func (x *HyperliquidSpotTradeResponse) GetQuoteAmount() float64 {
	if x != nil {
		return x.QuoteAmount
	}
	return 0
}

func (x *HyperliquidSpotTradeResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *HyperliquidSpotTradeResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type HyperliquidSpotSniperConfigsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthData map[string]string `protobuf:"bytes,1,rep,name=auth_data,json=authData,proto3" json:"auth_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *HyperliquidSpotSniperConfigsRequest) Reset() {
	*x = HyperliquidSpotSniperConfigsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_telegram_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidSpotSniperConfigsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidSpotSniperConfigsRequest) ProtoMessage() {}

func (x *HyperliquidSpotSniperConfigsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_telegram_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidSpotSniperConfigsRequest.ProtoReflect.Descriptor instead.
func (*HyperliquidSpotSniperConfigsRequest) Descriptor() ([]byte, []int) {
	return file_hypurr_telegram_service_proto_rawDescGZIP(), []int{8}
}

func (x *HyperliquidSpotSniperConfigsRequest) GetAuthData() map[string]string {
	if x != nil {
		return x.AuthData
	}
	return nil
}

type HyperliquidSpotSniperConfigsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Configs []*HyperliquidSpotSniperConfig `protobuf:"bytes,1,rep,name=configs,proto3" json:"configs,omitempty"`
}

func (x *HyperliquidSpotSniperConfigsResponse) Reset() {
	*x = HyperliquidSpotSniperConfigsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_telegram_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidSpotSniperConfigsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidSpotSniperConfigsResponse) ProtoMessage() {}

func (x *HyperliquidSpotSniperConfigsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_telegram_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidSpotSniperConfigsResponse.ProtoReflect.Descriptor instead.
func (*HyperliquidSpotSniperConfigsResponse) Descriptor() ([]byte, []int) {
	return file_hypurr_telegram_service_proto_rawDescGZIP(), []int{9}
}

func (x *HyperliquidSpotSniperConfigsResponse) GetConfigs() []*HyperliquidSpotSniperConfig {
	if x != nil {
		return x.Configs
	}
	return nil
}

type DeleteHyperliquidSpotSniperConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthData map[string]string `protobuf:"bytes,1,rep,name=auth_data,json=authData,proto3" json:"auth_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ConfigId int64             `protobuf:"varint,2,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
}

func (x *DeleteHyperliquidSpotSniperConfigRequest) Reset() {
	*x = DeleteHyperliquidSpotSniperConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_telegram_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteHyperliquidSpotSniperConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteHyperliquidSpotSniperConfigRequest) ProtoMessage() {}

func (x *DeleteHyperliquidSpotSniperConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_telegram_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteHyperliquidSpotSniperConfigRequest.ProtoReflect.Descriptor instead.
func (*DeleteHyperliquidSpotSniperConfigRequest) Descriptor() ([]byte, []int) {
	return file_hypurr_telegram_service_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteHyperliquidSpotSniperConfigRequest) GetAuthData() map[string]string {
	if x != nil {
		return x.AuthData
	}
	return nil
}

func (x *DeleteHyperliquidSpotSniperConfigRequest) GetConfigId() int64 {
	if x != nil {
		return x.ConfigId
	}
	return 0
}

type DeleteHyperliquidSpotSniperConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *DeleteHyperliquidSpotSniperConfigResponse) Reset() {
	*x = DeleteHyperliquidSpotSniperConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_telegram_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteHyperliquidSpotSniperConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteHyperliquidSpotSniperConfigResponse) ProtoMessage() {}

func (x *DeleteHyperliquidSpotSniperConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_telegram_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteHyperliquidSpotSniperConfigResponse.ProtoReflect.Descriptor instead.
func (*DeleteHyperliquidSpotSniperConfigResponse) Descriptor() ([]byte, []int) {
	return file_hypurr_telegram_service_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteHyperliquidSpotSniperConfigResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type CreateHyperliquidSpotSniperConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthData map[string]string            `protobuf:"bytes,1,rep,name=auth_data,json=authData,proto3" json:"auth_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Config   *HyperliquidSpotSniperConfig `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *CreateHyperliquidSpotSniperConfigRequest) Reset() {
	*x = CreateHyperliquidSpotSniperConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_telegram_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateHyperliquidSpotSniperConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHyperliquidSpotSniperConfigRequest) ProtoMessage() {}

func (x *CreateHyperliquidSpotSniperConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_telegram_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHyperliquidSpotSniperConfigRequest.ProtoReflect.Descriptor instead.
func (*CreateHyperliquidSpotSniperConfigRequest) Descriptor() ([]byte, []int) {
	return file_hypurr_telegram_service_proto_rawDescGZIP(), []int{12}
}

func (x *CreateHyperliquidSpotSniperConfigRequest) GetAuthData() map[string]string {
	if x != nil {
		return x.AuthData
	}
	return nil
}

func (x *CreateHyperliquidSpotSniperConfigRequest) GetConfig() *HyperliquidSpotSniperConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type CreateHyperliquidSpotSniperConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool                         `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Config  *HyperliquidSpotSniperConfig `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *CreateHyperliquidSpotSniperConfigResponse) Reset() {
	*x = CreateHyperliquidSpotSniperConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_telegram_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateHyperliquidSpotSniperConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHyperliquidSpotSniperConfigResponse) ProtoMessage() {}

func (x *CreateHyperliquidSpotSniperConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_telegram_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHyperliquidSpotSniperConfigResponse.ProtoReflect.Descriptor instead.
func (*CreateHyperliquidSpotSniperConfigResponse) Descriptor() ([]byte, []int) {
	return file_hypurr_telegram_service_proto_rawDescGZIP(), []int{13}
}

func (x *CreateHyperliquidSpotSniperConfigResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CreateHyperliquidSpotSniperConfigResponse) GetConfig() *HyperliquidSpotSniperConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type UpdateHyperliquidSpotSniperConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthData map[string]string            `protobuf:"bytes,1,rep,name=auth_data,json=authData,proto3" json:"auth_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Config   *HyperliquidSpotSniperConfig `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *UpdateHyperliquidSpotSniperConfigRequest) Reset() {
	*x = UpdateHyperliquidSpotSniperConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_telegram_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHyperliquidSpotSniperConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHyperliquidSpotSniperConfigRequest) ProtoMessage() {}

func (x *UpdateHyperliquidSpotSniperConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_telegram_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHyperliquidSpotSniperConfigRequest.ProtoReflect.Descriptor instead.
func (*UpdateHyperliquidSpotSniperConfigRequest) Descriptor() ([]byte, []int) {
	return file_hypurr_telegram_service_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateHyperliquidSpotSniperConfigRequest) GetAuthData() map[string]string {
	if x != nil {
		return x.AuthData
	}
	return nil
}

func (x *UpdateHyperliquidSpotSniperConfigRequest) GetConfig() *HyperliquidSpotSniperConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type UpdateHyperliquidSpotSniperConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *UpdateHyperliquidSpotSniperConfigResponse) Reset() {
	*x = UpdateHyperliquidSpotSniperConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_telegram_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHyperliquidSpotSniperConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHyperliquidSpotSniperConfigResponse) ProtoMessage() {}

func (x *UpdateHyperliquidSpotSniperConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_telegram_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHyperliquidSpotSniperConfigResponse.ProtoReflect.Descriptor instead.
func (*UpdateHyperliquidSpotSniperConfigResponse) Descriptor() ([]byte, []int) {
	return file_hypurr_telegram_service_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateHyperliquidSpotSniperConfigResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type HyperliquidWalletSpotTwapSessionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthData map[string]string `protobuf:"bytes,1,rep,name=auth_data,json=authData,proto3" json:"auth_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	WalletId int64             `protobuf:"varint,2,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
}

func (x *HyperliquidWalletSpotTwapSessionsRequest) Reset() {
	*x = HyperliquidWalletSpotTwapSessionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_telegram_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidWalletSpotTwapSessionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidWalletSpotTwapSessionsRequest) ProtoMessage() {}

func (x *HyperliquidWalletSpotTwapSessionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_telegram_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidWalletSpotTwapSessionsRequest.ProtoReflect.Descriptor instead.
func (*HyperliquidWalletSpotTwapSessionsRequest) Descriptor() ([]byte, []int) {
	return file_hypurr_telegram_service_proto_rawDescGZIP(), []int{16}
}

func (x *HyperliquidWalletSpotTwapSessionsRequest) GetAuthData() map[string]string {
	if x != nil {
		return x.AuthData
	}
	return nil
}

func (x *HyperliquidWalletSpotTwapSessionsRequest) GetWalletId() int64 {
	if x != nil {
		return x.WalletId
	}
	return 0
}

type HyperliquidWalletSpotTwapSessionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sessions []*HyperliquidWalletSpotTwapSession `protobuf:"bytes,1,rep,name=sessions,proto3" json:"sessions,omitempty"`
}

func (x *HyperliquidWalletSpotTwapSessionsResponse) Reset() {
	*x = HyperliquidWalletSpotTwapSessionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_telegram_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidWalletSpotTwapSessionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidWalletSpotTwapSessionsResponse) ProtoMessage() {}

func (x *HyperliquidWalletSpotTwapSessionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_telegram_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidWalletSpotTwapSessionsResponse.ProtoReflect.Descriptor instead.
func (*HyperliquidWalletSpotTwapSessionsResponse) Descriptor() ([]byte, []int) {
	return file_hypurr_telegram_service_proto_rawDescGZIP(), []int{17}
}

func (x *HyperliquidWalletSpotTwapSessionsResponse) GetSessions() []*HyperliquidWalletSpotTwapSession {
	if x != nil {
		return x.Sessions
	}
	return nil
}

type LaunchHyperliquidLaunchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthData                map[string]string `protobuf:"bytes,1,rep,name=auth_data,json=authData,proto3" json:"auth_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	WalletId                int64             `protobuf:"varint,2,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	Description             string            `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	FullName                string            `protobuf:"bytes,4,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty"`
	TokenName               string            `protobuf:"bytes,5,opt,name=token_name,json=tokenName,proto3" json:"token_name,omitempty"`
	Media                   []byte            `protobuf:"bytes,6,opt,name=media,proto3" json:"media,omitempty"`
	MediaType               MediaType         `protobuf:"varint,7,opt,name=media_type,json=mediaType,proto3,enum=hypurr.MediaType" json:"media_type,omitempty"`
	DevLockupSeconds        int64             `protobuf:"varint,8,opt,name=dev_lockup_seconds,json=devLockupSeconds,proto3" json:"dev_lockup_seconds,omitempty"`
	InitialPurchaseNotional float64           `protobuf:"fixed64,9,opt,name=initial_purchase_notional,json=initialPurchaseNotional,proto3" json:"initial_purchase_notional,omitempty"`
}

func (x *LaunchHyperliquidLaunchRequest) Reset() {
	*x = LaunchHyperliquidLaunchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_telegram_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LaunchHyperliquidLaunchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaunchHyperliquidLaunchRequest) ProtoMessage() {}

func (x *LaunchHyperliquidLaunchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_telegram_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaunchHyperliquidLaunchRequest.ProtoReflect.Descriptor instead.
func (*LaunchHyperliquidLaunchRequest) Descriptor() ([]byte, []int) {
	return file_hypurr_telegram_service_proto_rawDescGZIP(), []int{18}
}

func (x *LaunchHyperliquidLaunchRequest) GetAuthData() map[string]string {
	if x != nil {
		return x.AuthData
	}
	return nil
}

func (x *LaunchHyperliquidLaunchRequest) GetWalletId() int64 {
	if x != nil {
		return x.WalletId
	}
	return 0
}

func (x *LaunchHyperliquidLaunchRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *LaunchHyperliquidLaunchRequest) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *LaunchHyperliquidLaunchRequest) GetTokenName() string {
	if x != nil {
		return x.TokenName
	}
	return ""
}

func (x *LaunchHyperliquidLaunchRequest) GetMedia() []byte {
	if x != nil {
		return x.Media
	}
	return nil
}

func (x *LaunchHyperliquidLaunchRequest) GetMediaType() MediaType {
	if x != nil {
		return x.MediaType
	}
	return MediaType_MEDIA_TYPE_PHOTO
}

func (x *LaunchHyperliquidLaunchRequest) GetDevLockupSeconds() int64 {
	if x != nil {
		return x.DevLockupSeconds
	}
	return 0
}

func (x *LaunchHyperliquidLaunchRequest) GetInitialPurchaseNotional() float64 {
	if x != nil {
		return x.InitialPurchaseNotional
	}
	return 0
}

type LaunchHyperliquidLaunchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Launch *HyperliquidLaunch `protobuf:"bytes,1,opt,name=launch,proto3" json:"launch,omitempty"`
}

func (x *LaunchHyperliquidLaunchResponse) Reset() {
	*x = LaunchHyperliquidLaunchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_telegram_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LaunchHyperliquidLaunchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaunchHyperliquidLaunchResponse) ProtoMessage() {}

func (x *LaunchHyperliquidLaunchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_telegram_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaunchHyperliquidLaunchResponse.ProtoReflect.Descriptor instead.
func (*LaunchHyperliquidLaunchResponse) Descriptor() ([]byte, []int) {
	return file_hypurr_telegram_service_proto_rawDescGZIP(), []int{19}
}

func (x *LaunchHyperliquidLaunchResponse) GetLaunch() *HyperliquidLaunch {
	if x != nil {
		return x.Launch
	}
	return nil
}

type EditHyperliquidLaunchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthData         map[string]string      `protobuf:"bytes,1,rep,name=auth_data,json=authData,proto3" json:"auth_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	LaunchId         int64                  `protobuf:"varint,2,opt,name=launch_id,json=launchId,proto3" json:"launch_id,omitempty"`
	Description      string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	FullName         string                 `protobuf:"bytes,4,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty"`
	Media            *wrapperspb.BytesValue `protobuf:"bytes,5,opt,name=media,proto3" json:"media,omitempty"`
	MediaType        MediaType              `protobuf:"varint,6,opt,name=media_type,json=mediaType,proto3,enum=hypurr.MediaType" json:"media_type,omitempty"`
	DevLockupSeconds int64                  `protobuf:"varint,7,opt,name=dev_lockup_seconds,json=devLockupSeconds,proto3" json:"dev_lockup_seconds,omitempty"`
}

func (x *EditHyperliquidLaunchRequest) Reset() {
	*x = EditHyperliquidLaunchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_telegram_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditHyperliquidLaunchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditHyperliquidLaunchRequest) ProtoMessage() {}

func (x *EditHyperliquidLaunchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_telegram_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditHyperliquidLaunchRequest.ProtoReflect.Descriptor instead.
func (*EditHyperliquidLaunchRequest) Descriptor() ([]byte, []int) {
	return file_hypurr_telegram_service_proto_rawDescGZIP(), []int{20}
}

func (x *EditHyperliquidLaunchRequest) GetAuthData() map[string]string {
	if x != nil {
		return x.AuthData
	}
	return nil
}

func (x *EditHyperliquidLaunchRequest) GetLaunchId() int64 {
	if x != nil {
		return x.LaunchId
	}
	return 0
}

func (x *EditHyperliquidLaunchRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *EditHyperliquidLaunchRequest) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *EditHyperliquidLaunchRequest) GetMedia() *wrapperspb.BytesValue {
	if x != nil {
		return x.Media
	}
	return nil
}

func (x *EditHyperliquidLaunchRequest) GetMediaType() MediaType {
	if x != nil {
		return x.MediaType
	}
	return MediaType_MEDIA_TYPE_PHOTO
}

func (x *EditHyperliquidLaunchRequest) GetDevLockupSeconds() int64 {
	if x != nil {
		return x.DevLockupSeconds
	}
	return 0
}

type EditHyperliquidLaunchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Launch *HyperliquidLaunch `protobuf:"bytes,1,opt,name=launch,proto3" json:"launch,omitempty"`
}

func (x *EditHyperliquidLaunchResponse) Reset() {
	*x = EditHyperliquidLaunchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_telegram_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditHyperliquidLaunchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditHyperliquidLaunchResponse) ProtoMessage() {}

func (x *EditHyperliquidLaunchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_telegram_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditHyperliquidLaunchResponse.ProtoReflect.Descriptor instead.
func (*EditHyperliquidLaunchResponse) Descriptor() ([]byte, []int) {
	return file_hypurr_telegram_service_proto_rawDescGZIP(), []int{21}
}

func (x *EditHyperliquidLaunchResponse) GetLaunch() *HyperliquidLaunch {
	if x != nil {
		return x.Launch
	}
	return nil
}

var File_hypurr_telegram_service_proto protoreflect.FileDescriptor

var file_hypurr_telegram_service_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61,
	0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x06, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2f,
	0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x68, 0x79, 0x70,
	0x75, 0x72, 0x72, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x11, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2f, 0x6c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9a, 0x01, 0x0a, 0x13, 0x54, 0x65, 0x6c,
	0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x46, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x54, 0x65, 0x6c,
	0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08,
	0x61, 0x75, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x41, 0x75, 0x74, 0x68,
	0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x40, 0x0a, 0x14, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61,
	0x6d, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x79,
	0x70, 0x75, 0x72, 0x72, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0xa8, 0x01, 0x0a, 0x1a, 0x54, 0x65, 0x6c, 0x65,
	0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x68, 0x79, 0x70, 0x75,
	0x72, 0x72, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x61, 0x75, 0x74,
	0x68, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x44, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x52, 0x0a, 0x1b, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73,
	0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x33, 0x0a, 0x07, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65,
	0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x07, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x22, 0xc7, 0x02, 0x0a, 0x1d, 0x48, 0x79, 0x70, 0x65, 0x72,
	0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x68, 0x79,
	0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c,
	0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72,
	0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x1a, 0x3b, 0x0a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x98, 0x01, 0x0a, 0x1e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x71, 0x75, 0x6f, 0x74,
	0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xbf, 0x02, 0x0a, 0x1b,
	0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x53, 0x70, 0x6f, 0x74, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x09, 0x61,
	0x75, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71,
	0x75, 0x69, 0x64, 0x53, 0x70, 0x6f, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x70,
	0x61, 0x69, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x61,
	0x69, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x45, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79,
	0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x1a, 0x3b, 0x0a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x96, 0x01,
	0x0a, 0x1c, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x53, 0x70, 0x6f,
	0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xba, 0x01, 0x0a, 0x23, 0x48, 0x79, 0x70, 0x65, 0x72,
	0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x53, 0x70, 0x6f, 0x74, 0x53, 0x6e, 0x69, 0x70, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x56,
	0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72,
	0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x53, 0x70, 0x6f, 0x74, 0x53, 0x6e, 0x69, 0x70, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x61, 0x75,
	0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x44, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x65, 0x0a, 0x24, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75,
	0x69, 0x64, 0x53, 0x70, 0x6f, 0x74, 0x53, 0x6e, 0x69, 0x70, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68,
	0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69,
	0x64, 0x53, 0x70, 0x6f, 0x74, 0x53, 0x6e, 0x69, 0x70, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x22, 0xe1, 0x01, 0x0a, 0x28, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x53, 0x70, 0x6f, 0x74, 0x53, 0x6e, 0x69, 0x70, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x68, 0x79, 0x70,
	0x75, 0x72, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c,
	0x69, 0x71, 0x75, 0x69, 0x64, 0x53, 0x70, 0x6f, 0x74, 0x53, 0x6e, 0x69, 0x70, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49,
	0x64, 0x1a, 0x3b, 0x0a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x45,
	0x0a, 0x29, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71,
	0x75, 0x69, 0x64, 0x53, 0x70, 0x6f, 0x74, 0x53, 0x6e, 0x69, 0x70, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x81, 0x02, 0x0a, 0x28, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x53, 0x70, 0x6f, 0x74, 0x53,
	0x6e, 0x69, 0x70, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x5b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x53, 0x70, 0x6f, 0x74, 0x53, 0x6e, 0x69, 0x70, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x3b, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x53, 0x70, 0x6f, 0x74, 0x53, 0x6e, 0x69, 0x70, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x3b, 0x0a, 0x0d,
	0x41, 0x75, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x82, 0x01, 0x0a, 0x29, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x53,
	0x70, 0x6f, 0x74, 0x53, 0x6e, 0x69, 0x70, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x3b, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72,
	0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x53, 0x70, 0x6f, 0x74, 0x53, 0x6e, 0x69, 0x70, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x81,
	0x02, 0x0a, 0x28, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x53, 0x70, 0x6f, 0x74, 0x53, 0x6e, 0x69, 0x70, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5b, 0x0a, 0x09, 0x61,
	0x75, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e,
	0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x79,
	0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x53, 0x70, 0x6f, 0x74, 0x53, 0x6e, 0x69,
	0x70, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08,
	0x61, 0x75, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72,
	0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x53, 0x70, 0x6f,
	0x74, 0x53, 0x6e, 0x69, 0x70, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x3b, 0x0a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x44, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x45, 0x0a, 0x29, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x79, 0x70, 0x65,
	0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x53, 0x70, 0x6f, 0x74, 0x53, 0x6e, 0x69, 0x70, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xe1, 0x01, 0x0a, 0x28, 0x48, 0x79,
	0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53,
	0x70, 0x6f, 0x74, 0x54, 0x77, 0x61, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x68, 0x79, 0x70, 0x75,
	0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x53, 0x70, 0x6f, 0x74, 0x54, 0x77, 0x61, 0x70, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64,
	0x1a, 0x3b, 0x0a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x71, 0x0a,
	0x29, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x53, 0x70, 0x6f, 0x74, 0x54, 0x77, 0x61, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x08, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x68,
	0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69,
	0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x70, 0x6f, 0x74, 0x54, 0x77, 0x61, 0x70, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0xdd, 0x03, 0x0a, 0x1e, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x48, 0x79, 0x70, 0x65, 0x72,
	0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e,
	0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69,
	0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x61, 0x75,
	0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x30, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x68, 0x79,
	0x70, 0x75, 0x72, 0x72, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65, 0x76,
	0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x64, 0x65, 0x76, 0x4c, 0x6f, 0x63, 0x6b, 0x75, 0x70,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x1a, 0x3b, 0x0a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x54, 0x0a, 0x1f, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c,
	0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70,
	0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x52, 0x06,
	0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x22, 0x9b, 0x03, 0x0a, 0x1c, 0x45, 0x64, 0x69, 0x74, 0x48,
	0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x68, 0x79, 0x70,
	0x75, 0x72, 0x72, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71,
	0x75, 0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08,
	0x61, 0x75, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x30, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x68, 0x79,
	0x70, 0x75, 0x72, 0x72, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65, 0x76,
	0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x64, 0x65, 0x76, 0x4c, 0x6f, 0x63, 0x6b, 0x75, 0x70,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x1a, 0x3b, 0x0a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x44,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x52, 0x0a, 0x1d, 0x45, 0x64, 0x69, 0x74, 0x48, 0x79, 0x70, 0x65,
	0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48,
	0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68,
	0x52, 0x06, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x2a, 0x34, 0x0a, 0x1f, 0x48, 0x79, 0x70, 0x65,
	0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x07, 0x0a, 0x03, 0x42,
	0x55, 0x59, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x45, 0x4c, 0x4c, 0x10, 0x01, 0x2a, 0x51,
	0x0a, 0x09, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x4d,
	0x45, 0x44, 0x49, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x48, 0x4f, 0x54, 0x4f, 0x10,
	0x00, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x41, 0x4e, 0x49, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x4d,
	0x45, 0x44, 0x49, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10,
	0x02, 0x32, 0x90, 0x0a, 0x0a, 0x08, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x4b,
	0x0a, 0x0c, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1b,
	0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x68, 0x79,
	0x70, 0x75, 0x72, 0x72, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x13, 0x54,
	0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x73, 0x12, 0x22, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x54, 0x65, 0x6c, 0x65,
	0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e,
	0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x69, 0x0a,
	0x16, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x25, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72,
	0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,
	0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71,
	0x75, 0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x17, 0x4c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x12, 0x26, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x4c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x68, 0x79,
	0x70, 0x75, 0x72, 0x72, 0x2e, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x48, 0x79, 0x70, 0x65, 0x72,
	0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x15, 0x45, 0x64, 0x69, 0x74, 0x48, 0x79,
	0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x12,
	0x24, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x48, 0x79, 0x70,
	0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x45,
	0x64, 0x69, 0x74, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x63,
	0x0a, 0x14, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x53, 0x70, 0x6f,
	0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x23, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e,
	0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x53, 0x70, 0x6f, 0x74, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x68, 0x79,
	0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x53, 0x70, 0x6f, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x8a, 0x01, 0x0a, 0x21, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71,
	0x75, 0x69, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x70, 0x6f, 0x74, 0x54, 0x77, 0x61,
	0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30, 0x2e, 0x68, 0x79, 0x70, 0x75,
	0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x53, 0x70, 0x6f, 0x74, 0x54, 0x77, 0x61, 0x70, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x68, 0x79,
	0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x70, 0x6f, 0x74, 0x54, 0x77, 0x61, 0x70, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x7b, 0x0a, 0x1c, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x53,
	0x70, 0x6f, 0x74, 0x53, 0x6e, 0x69, 0x70, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0x12, 0x2b, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c,
	0x69, 0x71, 0x75, 0x69, 0x64, 0x53, 0x70, 0x6f, 0x74, 0x53, 0x6e, 0x69, 0x70, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e,
	0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75,
	0x69, 0x64, 0x53, 0x70, 0x6f, 0x74, 0x53, 0x6e, 0x69, 0x70, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8a, 0x01,
	0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71,
	0x75, 0x69, 0x64, 0x53, 0x70, 0x6f, 0x74, 0x53, 0x6e, 0x69, 0x70, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x30, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x53, 0x70,
	0x6f, 0x74, 0x53, 0x6e, 0x69, 0x70, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x53, 0x70, 0x6f, 0x74, 0x53, 0x6e, 0x69, 0x70, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8a, 0x01, 0x0a, 0x21, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x53, 0x70, 0x6f, 0x74, 0x53, 0x6e, 0x69, 0x70, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x30, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x53, 0x70, 0x6f, 0x74, 0x53,
	0x6e, 0x69, 0x70, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x31, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x53, 0x70, 0x6f,
	0x74, 0x53, 0x6e, 0x69, 0x70, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8a, 0x01, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x53, 0x70, 0x6f,
	0x74, 0x53, 0x6e, 0x69, 0x70, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x30, 0x2e,
	0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x79, 0x70,
	0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x53, 0x70, 0x6f, 0x74, 0x53, 0x6e, 0x69, 0x70,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x31, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48,
	0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x53, 0x70, 0x6f, 0x74, 0x53, 0x6e,
	0x69, 0x70, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x42, 0x29, 0x5a, 0x27, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2f, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72,
	0x2d, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x67, 0x6f, 0x2f, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_hypurr_telegram_service_proto_rawDescOnce sync.Once
	file_hypurr_telegram_service_proto_rawDescData = file_hypurr_telegram_service_proto_rawDesc
)

func file_hypurr_telegram_service_proto_rawDescGZIP() []byte {
	file_hypurr_telegram_service_proto_rawDescOnce.Do(func() {
		file_hypurr_telegram_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_hypurr_telegram_service_proto_rawDescData)
	})
	return file_hypurr_telegram_service_proto_rawDescData
}

var file_hypurr_telegram_service_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_hypurr_telegram_service_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_hypurr_telegram_service_proto_goTypes = []any{
	(HyperliquidLaunchTradeDirection)(0),              // 0: hypurr.HyperliquidLaunchTradeDirection
	(MediaType)(0),                                    // 1: hypurr.MediaType
	(*TelegramUserRequest)(nil),                       // 2: hypurr.TelegramUserRequest
	(*TelegramUserResponse)(nil),                      // 3: hypurr.TelegramUserResponse
	(*TelegramUserWalletsRequest)(nil),                // 4: hypurr.TelegramUserWalletsRequest
	(*TelegramUserWalletsResponse)(nil),               // 5: hypurr.TelegramUserWalletsResponse
	(*HyperliquidLaunchTradeRequest)(nil),             // 6: hypurr.HyperliquidLaunchTradeRequest
	(*HyperliquidLaunchTradeResponse)(nil),            // 7: hypurr.HyperliquidLaunchTradeResponse
	(*HyperliquidSpotTradeRequest)(nil),               // 8: hypurr.HyperliquidSpotTradeRequest
	(*HyperliquidSpotTradeResponse)(nil),              // 9: hypurr.HyperliquidSpotTradeResponse
	(*HyperliquidSpotSniperConfigsRequest)(nil),       // 10: hypurr.HyperliquidSpotSniperConfigsRequest
	(*HyperliquidSpotSniperConfigsResponse)(nil),      // 11: hypurr.HyperliquidSpotSniperConfigsResponse
	(*DeleteHyperliquidSpotSniperConfigRequest)(nil),  // 12: hypurr.DeleteHyperliquidSpotSniperConfigRequest
	(*DeleteHyperliquidSpotSniperConfigResponse)(nil), // 13: hypurr.DeleteHyperliquidSpotSniperConfigResponse
	(*CreateHyperliquidSpotSniperConfigRequest)(nil),  // 14: hypurr.CreateHyperliquidSpotSniperConfigRequest
	(*CreateHyperliquidSpotSniperConfigResponse)(nil), // 15: hypurr.CreateHyperliquidSpotSniperConfigResponse
	(*UpdateHyperliquidSpotSniperConfigRequest)(nil),  // 16: hypurr.UpdateHyperliquidSpotSniperConfigRequest
	(*UpdateHyperliquidSpotSniperConfigResponse)(nil), // 17: hypurr.UpdateHyperliquidSpotSniperConfigResponse
	(*HyperliquidWalletSpotTwapSessionsRequest)(nil),  // 18: hypurr.HyperliquidWalletSpotTwapSessionsRequest
	(*HyperliquidWalletSpotTwapSessionsResponse)(nil), // 19: hypurr.HyperliquidWalletSpotTwapSessionsResponse
	(*LaunchHyperliquidLaunchRequest)(nil),            // 20: hypurr.LaunchHyperliquidLaunchRequest
	(*LaunchHyperliquidLaunchResponse)(nil),           // 21: hypurr.LaunchHyperliquidLaunchResponse
	(*EditHyperliquidLaunchRequest)(nil),              // 22: hypurr.EditHyperliquidLaunchRequest
	(*EditHyperliquidLaunchResponse)(nil),             // 23: hypurr.EditHyperliquidLaunchResponse
	nil,                                               // 24: hypurr.TelegramUserRequest.AuthDataEntry
	nil,                                               // 25: hypurr.TelegramUserWalletsRequest.AuthDataEntry
	nil,                                               // 26: hypurr.HyperliquidLaunchTradeRequest.AuthDataEntry
	nil,                                               // 27: hypurr.HyperliquidSpotTradeRequest.AuthDataEntry
	nil,                                               // 28: hypurr.HyperliquidSpotSniperConfigsRequest.AuthDataEntry
	nil,                                               // 29: hypurr.DeleteHyperliquidSpotSniperConfigRequest.AuthDataEntry
	nil,                                               // 30: hypurr.CreateHyperliquidSpotSniperConfigRequest.AuthDataEntry
	nil,                                               // 31: hypurr.UpdateHyperliquidSpotSniperConfigRequest.AuthDataEntry
	nil,                                               // 32: hypurr.HyperliquidWalletSpotTwapSessionsRequest.AuthDataEntry
	nil,                                               // 33: hypurr.LaunchHyperliquidLaunchRequest.AuthDataEntry
	nil,                                               // 34: hypurr.EditHyperliquidLaunchRequest.AuthDataEntry
	(*TelegramUser)(nil),                              // 35: hypurr.TelegramUser
	(*HyperliquidWallet)(nil),                         // 36: hypurr.HyperliquidWallet
	(*HyperliquidSpotSniperConfig)(nil),               // 37: hypurr.HyperliquidSpotSniperConfig
	(*HyperliquidWalletSpotTwapSession)(nil),          // 38: hypurr.HyperliquidWalletSpotTwapSession
	(*HyperliquidLaunch)(nil),                         // 39: hypurr.HyperliquidLaunch
	(*wrapperspb.BytesValue)(nil),                     // 40: google.protobuf.BytesValue
}
var file_hypurr_telegram_service_proto_depIdxs = []int32{
	24, // 0: hypurr.TelegramUserRequest.auth_data:type_name -> hypurr.TelegramUserRequest.AuthDataEntry
	35, // 1: hypurr.TelegramUserResponse.user:type_name -> hypurr.TelegramUser
	25, // 2: hypurr.TelegramUserWalletsRequest.auth_data:type_name -> hypurr.TelegramUserWalletsRequest.AuthDataEntry
	36, // 3: hypurr.TelegramUserWalletsResponse.wallets:type_name -> hypurr.HyperliquidWallet
	26, // 4: hypurr.HyperliquidLaunchTradeRequest.auth_data:type_name -> hypurr.HyperliquidLaunchTradeRequest.AuthDataEntry
	0,  // 5: hypurr.HyperliquidLaunchTradeRequest.direction:type_name -> hypurr.HyperliquidLaunchTradeDirection
	27, // 6: hypurr.HyperliquidSpotTradeRequest.auth_data:type_name -> hypurr.HyperliquidSpotTradeRequest.AuthDataEntry
	0,  // 7: hypurr.HyperliquidSpotTradeRequest.direction:type_name -> hypurr.HyperliquidLaunchTradeDirection
	28, // 8: hypurr.HyperliquidSpotSniperConfigsRequest.auth_data:type_name -> hypurr.HyperliquidSpotSniperConfigsRequest.AuthDataEntry
	37, // 9: hypurr.HyperliquidSpotSniperConfigsResponse.configs:type_name -> hypurr.HyperliquidSpotSniperConfig
	29, // 10: hypurr.DeleteHyperliquidSpotSniperConfigRequest.auth_data:type_name -> hypurr.DeleteHyperliquidSpotSniperConfigRequest.AuthDataEntry
	30, // 11: hypurr.CreateHyperliquidSpotSniperConfigRequest.auth_data:type_name -> hypurr.CreateHyperliquidSpotSniperConfigRequest.AuthDataEntry
	37, // 12: hypurr.CreateHyperliquidSpotSniperConfigRequest.config:type_name -> hypurr.HyperliquidSpotSniperConfig
	37, // 13: hypurr.CreateHyperliquidSpotSniperConfigResponse.config:type_name -> hypurr.HyperliquidSpotSniperConfig
	31, // 14: hypurr.UpdateHyperliquidSpotSniperConfigRequest.auth_data:type_name -> hypurr.UpdateHyperliquidSpotSniperConfigRequest.AuthDataEntry
	37, // 15: hypurr.UpdateHyperliquidSpotSniperConfigRequest.config:type_name -> hypurr.HyperliquidSpotSniperConfig
	32, // 16: hypurr.HyperliquidWalletSpotTwapSessionsRequest.auth_data:type_name -> hypurr.HyperliquidWalletSpotTwapSessionsRequest.AuthDataEntry
	38, // 17: hypurr.HyperliquidWalletSpotTwapSessionsResponse.sessions:type_name -> hypurr.HyperliquidWalletSpotTwapSession
	33, // 18: hypurr.LaunchHyperliquidLaunchRequest.auth_data:type_name -> hypurr.LaunchHyperliquidLaunchRequest.AuthDataEntry
	1,  // 19: hypurr.LaunchHyperliquidLaunchRequest.media_type:type_name -> hypurr.MediaType
	39, // 20: hypurr.LaunchHyperliquidLaunchResponse.launch:type_name -> hypurr.HyperliquidLaunch
	34, // 21: hypurr.EditHyperliquidLaunchRequest.auth_data:type_name -> hypurr.EditHyperliquidLaunchRequest.AuthDataEntry
	40, // 22: hypurr.EditHyperliquidLaunchRequest.media:type_name -> google.protobuf.BytesValue
	1,  // 23: hypurr.EditHyperliquidLaunchRequest.media_type:type_name -> hypurr.MediaType
	39, // 24: hypurr.EditHyperliquidLaunchResponse.launch:type_name -> hypurr.HyperliquidLaunch
	2,  // 25: hypurr.Telegram.TelegramUser:input_type -> hypurr.TelegramUserRequest
	4,  // 26: hypurr.Telegram.TelegramUserWallets:input_type -> hypurr.TelegramUserWalletsRequest
	6,  // 27: hypurr.Telegram.HyperliquidLaunchTrade:input_type -> hypurr.HyperliquidLaunchTradeRequest
	20, // 28: hypurr.Telegram.LaunchHyperliquidLaunch:input_type -> hypurr.LaunchHyperliquidLaunchRequest
	22, // 29: hypurr.Telegram.EditHyperliquidLaunch:input_type -> hypurr.EditHyperliquidLaunchRequest
	8,  // 30: hypurr.Telegram.HyperliquidSpotTrade:input_type -> hypurr.HyperliquidSpotTradeRequest
	18, // 31: hypurr.Telegram.HyperliquidWalletSpotTwapSessions:input_type -> hypurr.HyperliquidWalletSpotTwapSessionsRequest
	10, // 32: hypurr.Telegram.HyperliquidSpotSniperConfigs:input_type -> hypurr.HyperliquidSpotSniperConfigsRequest
	14, // 33: hypurr.Telegram.CreateHyperliquidSpotSniperConfig:input_type -> hypurr.CreateHyperliquidSpotSniperConfigRequest
	12, // 34: hypurr.Telegram.DeleteHyperliquidSpotSniperConfig:input_type -> hypurr.DeleteHyperliquidSpotSniperConfigRequest
	16, // 35: hypurr.Telegram.UpdateHyperliquidSpotSniperConfig:input_type -> hypurr.UpdateHyperliquidSpotSniperConfigRequest
	3,  // 36: hypurr.Telegram.TelegramUser:output_type -> hypurr.TelegramUserResponse
	5,  // 37: hypurr.Telegram.TelegramUserWallets:output_type -> hypurr.TelegramUserWalletsResponse
	7,  // 38: hypurr.Telegram.HyperliquidLaunchTrade:output_type -> hypurr.HyperliquidLaunchTradeResponse
	21, // 39: hypurr.Telegram.LaunchHyperliquidLaunch:output_type -> hypurr.LaunchHyperliquidLaunchResponse
	23, // 40: hypurr.Telegram.EditHyperliquidLaunch:output_type -> hypurr.EditHyperliquidLaunchResponse
	9,  // 41: hypurr.Telegram.HyperliquidSpotTrade:output_type -> hypurr.HyperliquidSpotTradeResponse
	19, // 42: hypurr.Telegram.HyperliquidWalletSpotTwapSessions:output_type -> hypurr.HyperliquidWalletSpotTwapSessionsResponse
	11, // 43: hypurr.Telegram.HyperliquidSpotSniperConfigs:output_type -> hypurr.HyperliquidSpotSniperConfigsResponse
	15, // 44: hypurr.Telegram.CreateHyperliquidSpotSniperConfig:output_type -> hypurr.CreateHyperliquidSpotSniperConfigResponse
	13, // 45: hypurr.Telegram.DeleteHyperliquidSpotSniperConfig:output_type -> hypurr.DeleteHyperliquidSpotSniperConfigResponse
	17, // 46: hypurr.Telegram.UpdateHyperliquidSpotSniperConfig:output_type -> hypurr.UpdateHyperliquidSpotSniperConfigResponse
	36, // [36:47] is the sub-list for method output_type
	25, // [25:36] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_hypurr_telegram_service_proto_init() }
func file_hypurr_telegram_service_proto_init() {
	if File_hypurr_telegram_service_proto != nil {
		return
	}
	file_hypurr_tools_proto_init()
	file_hypurr_wallet_proto_init()
	file_hypurr_user_proto_init()
	file_hypurr_launch_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_hypurr_telegram_service_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*TelegramUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_telegram_service_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*TelegramUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_telegram_service_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*TelegramUserWalletsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_telegram_service_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*TelegramUserWalletsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_telegram_service_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidLaunchTradeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_telegram_service_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidLaunchTradeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_telegram_service_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidSpotTradeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_telegram_service_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidSpotTradeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_telegram_service_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidSpotSniperConfigsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_telegram_service_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidSpotSniperConfigsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_telegram_service_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteHyperliquidSpotSniperConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_telegram_service_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteHyperliquidSpotSniperConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_telegram_service_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*CreateHyperliquidSpotSniperConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_telegram_service_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*CreateHyperliquidSpotSniperConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_telegram_service_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateHyperliquidSpotSniperConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_telegram_service_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateHyperliquidSpotSniperConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_telegram_service_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidWalletSpotTwapSessionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_telegram_service_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidWalletSpotTwapSessionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_telegram_service_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*LaunchHyperliquidLaunchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_telegram_service_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*LaunchHyperliquidLaunchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_telegram_service_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*EditHyperliquidLaunchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_telegram_service_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*EditHyperliquidLaunchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_hypurr_telegram_service_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_hypurr_telegram_service_proto_goTypes,
		DependencyIndexes: file_hypurr_telegram_service_proto_depIdxs,
		EnumInfos:         file_hypurr_telegram_service_proto_enumTypes,
		MessageInfos:      file_hypurr_telegram_service_proto_msgTypes,
	}.Build()
	File_hypurr_telegram_service_proto = out.File
	file_hypurr_telegram_service_proto_rawDesc = nil
	file_hypurr_telegram_service_proto_goTypes = nil
	file_hypurr_telegram_service_proto_depIdxs = nil
}
