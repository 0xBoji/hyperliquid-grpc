// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.21.12
// source: hypurr/launch.proto

package hypurr

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HyperliquidLaunchPoolType int32

const (
	HyperliquidLaunchPoolType_Quadratic   HyperliquidLaunchPoolType = 0
	HyperliquidLaunchPoolType_QuadraticV2 HyperliquidLaunchPoolType = 1
	HyperliquidLaunchPoolType_Linear      HyperliquidLaunchPoolType = 2
	HyperliquidLaunchPoolType_Fixed       HyperliquidLaunchPoolType = 3
)

// Enum value maps for HyperliquidLaunchPoolType.
var (
	HyperliquidLaunchPoolType_name = map[int32]string{
		0: "Quadratic",
		1: "QuadraticV2",
		2: "Linear",
		3: "Fixed",
	}
	HyperliquidLaunchPoolType_value = map[string]int32{
		"Quadratic":   0,
		"QuadraticV2": 1,
		"Linear":      2,
		"Fixed":       3,
	}
)

func (x HyperliquidLaunchPoolType) Enum() *HyperliquidLaunchPoolType {
	p := new(HyperliquidLaunchPoolType)
	*p = x
	return p
}

func (x HyperliquidLaunchPoolType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HyperliquidLaunchPoolType) Descriptor() protoreflect.EnumDescriptor {
	return file_hypurr_launch_proto_enumTypes[0].Descriptor()
}

func (HyperliquidLaunchPoolType) Type() protoreflect.EnumType {
	return &file_hypurr_launch_proto_enumTypes[0]
}

func (x HyperliquidLaunchPoolType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HyperliquidLaunchPoolType.Descriptor instead.
func (HyperliquidLaunchPoolType) EnumDescriptor() ([]byte, []int) {
	return file_hypurr_launch_proto_rawDescGZIP(), []int{0}
}

type HyperliquidLaunch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Launch id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Dev telegram id
	TelegramId int64 `protobuf:"varint,2,opt,name=telegram_id,json=telegramId,proto3" json:"telegram_id,omitempty"`
	// Dev telegram user
	TelegramUser *TelegramUserPublic `protobuf:"bytes,3,opt,name=telegram_user,json=telegramUser,proto3" json:"telegram_user,omitempty"`
	// Description
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Listed
	Listed bool `protobuf:"varint,5,opt,name=listed,proto3" json:"listed,omitempty"`
	// Settled
	Settled bool `protobuf:"varint,6,opt,name=settled,proto3" json:"settled,omitempty"`
	// Initial x, virtual USDC balance
	X0 int64 `protobuf:"varint,7,opt,name=x0,proto3" json:"x0,omitempty"`
	// Session id
	SessionId int64 `protobuf:"varint,8,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// Deploy session
	Session     *HyperliquidWalletDeploySession `protobuf:"bytes,9,opt,name=session,proto3" json:"session,omitempty"`
	MediaFileId string                          `protobuf:"bytes,10,opt,name=media_file_id,json=mediaFileId,proto3" json:"media_file_id,omitempty"`
	TopicId     *wrapperspb.Int64Value          `protobuf:"bytes,11,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	X           int64                           `protobuf:"varint,12,opt,name=x,proto3" json:"x,omitempty"`
	// Constant y
	Y int64 `protobuf:"varint,13,opt,name=y,proto3" json:"y,omitempty"`
	// Constant k
	K int64 `protobuf:"varint,14,opt,name=k,proto3" json:"k,omitempty"`
	// Fills
	Fills []*HyperliquidLaunchFill `protobuf:"bytes,15,rep,name=fills,proto3" json:"fills,omitempty"`
	// Daily notional volume
	DailyNtlVolume float64 `protobuf:"fixed64,16,opt,name=daily_ntl_volume,json=dailyNtlVolume,proto3" json:"daily_ntl_volume,omitempty"`
	// Previous day price
	PreviousDayPx float64 `protobuf:"fixed64,17,opt,name=previous_day_px,json=previousDayPx,proto3" json:"previous_day_px,omitempty"`
	// Last trade timestamp
	LastEventTimestamp int64 `protobuf:"varint,18,opt,name=last_event_timestamp,json=lastEventTimestamp,proto3" json:"last_event_timestamp,omitempty"`
	// Pool type (quadratic, linear, fixed)
	PoolType HyperliquidLaunchPoolType `protobuf:"varint,19,opt,name=pool_type,json=poolType,proto3,enum=hypurr.HyperliquidLaunchPoolType" json:"pool_type,omitempty"`
	// Decimals
	Decimals int64 `protobuf:"varint,20,opt,name=decimals,proto3" json:"decimals,omitempty"`
	// Session pool wallet
	SessionWallet *HyperliquidPublicWallet `protobuf:"bytes,21,opt,name=session_wallet,json=sessionWallet,proto3" json:"session_wallet,omitempty"`
	// Media type (photo, video,..)
	MediaType string `protobuf:"bytes,22,opt,name=media_type,json=mediaType,proto3" json:"media_type,omitempty"`
	// Timestamp of when the launch was listed
	ListedTimestamp int64 `protobuf:"varint,23,opt,name=listed_timestamp,json=listedTimestamp,proto3" json:"listed_timestamp,omitempty"`
	// Dev wallet
	DevWallet *HyperliquidPublicWallet `protobuf:"bytes,24,opt,name=dev_wallet,json=devWallet,proto3" json:"dev_wallet,omitempty"`
	// Dev lockup time in nanoseconds
	// deprecated
	DevLockup int64 `protobuf:"varint,25,opt,name=dev_lockup,json=devLockup,proto3" json:"dev_lockup,omitempty"`
	// dev lockup time in seconds
	DevLockupSeconds int64 `protobuf:"varint,26,opt,name=dev_lockup_seconds,json=devLockupSeconds,proto3" json:"dev_lockup_seconds,omitempty"`
}

func (x *HyperliquidLaunch) Reset() {
	*x = HyperliquidLaunch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_launch_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidLaunch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidLaunch) ProtoMessage() {}

func (x *HyperliquidLaunch) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_launch_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidLaunch.ProtoReflect.Descriptor instead.
func (*HyperliquidLaunch) Descriptor() ([]byte, []int) {
	return file_hypurr_launch_proto_rawDescGZIP(), []int{0}
}

func (x *HyperliquidLaunch) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *HyperliquidLaunch) GetTelegramId() int64 {
	if x != nil {
		return x.TelegramId
	}
	return 0
}

func (x *HyperliquidLaunch) GetTelegramUser() *TelegramUserPublic {
	if x != nil {
		return x.TelegramUser
	}
	return nil
}

func (x *HyperliquidLaunch) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *HyperliquidLaunch) GetListed() bool {
	if x != nil {
		return x.Listed
	}
	return false
}

func (x *HyperliquidLaunch) GetSettled() bool {
	if x != nil {
		return x.Settled
	}
	return false
}

func (x *HyperliquidLaunch) GetX0() int64 {
	if x != nil {
		return x.X0
	}
	return 0
}

func (x *HyperliquidLaunch) GetSessionId() int64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *HyperliquidLaunch) GetSession() *HyperliquidWalletDeploySession {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *HyperliquidLaunch) GetMediaFileId() string {
	if x != nil {
		return x.MediaFileId
	}
	return ""
}

func (x *HyperliquidLaunch) GetTopicId() *wrapperspb.Int64Value {
	if x != nil {
		return x.TopicId
	}
	return nil
}

func (x *HyperliquidLaunch) GetX() int64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *HyperliquidLaunch) GetY() int64 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *HyperliquidLaunch) GetK() int64 {
	if x != nil {
		return x.K
	}
	return 0
}

func (x *HyperliquidLaunch) GetFills() []*HyperliquidLaunchFill {
	if x != nil {
		return x.Fills
	}
	return nil
}

func (x *HyperliquidLaunch) GetDailyNtlVolume() float64 {
	if x != nil {
		return x.DailyNtlVolume
	}
	return 0
}

func (x *HyperliquidLaunch) GetPreviousDayPx() float64 {
	if x != nil {
		return x.PreviousDayPx
	}
	return 0
}

func (x *HyperliquidLaunch) GetLastEventTimestamp() int64 {
	if x != nil {
		return x.LastEventTimestamp
	}
	return 0
}

func (x *HyperliquidLaunch) GetPoolType() HyperliquidLaunchPoolType {
	if x != nil {
		return x.PoolType
	}
	return HyperliquidLaunchPoolType_Quadratic
}

func (x *HyperliquidLaunch) GetDecimals() int64 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

func (x *HyperliquidLaunch) GetSessionWallet() *HyperliquidPublicWallet {
	if x != nil {
		return x.SessionWallet
	}
	return nil
}

func (x *HyperliquidLaunch) GetMediaType() string {
	if x != nil {
		return x.MediaType
	}
	return ""
}

func (x *HyperliquidLaunch) GetListedTimestamp() int64 {
	if x != nil {
		return x.ListedTimestamp
	}
	return 0
}

func (x *HyperliquidLaunch) GetDevWallet() *HyperliquidPublicWallet {
	if x != nil {
		return x.DevWallet
	}
	return nil
}

func (x *HyperliquidLaunch) GetDevLockup() int64 {
	if x != nil {
		return x.DevLockup
	}
	return 0
}

func (x *HyperliquidLaunch) GetDevLockupSeconds() int64 {
	if x != nil {
		return x.DevLockupSeconds
	}
	return 0
}

type HyperliquidLaunchPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Balance int64  `protobuf:"varint,2,opt,name=balance,proto3" json:"balance,omitempty"`
	Cost    int64  `protobuf:"varint,3,opt,name=cost,proto3" json:"cost,omitempty"`
}

func (x *HyperliquidLaunchPosition) Reset() {
	*x = HyperliquidLaunchPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_launch_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidLaunchPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidLaunchPosition) ProtoMessage() {}

func (x *HyperliquidLaunchPosition) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_launch_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidLaunchPosition.ProtoReflect.Descriptor instead.
func (*HyperliquidLaunchPosition) Descriptor() ([]byte, []int) {
	return file_hypurr_launch_proto_rawDescGZIP(), []int{1}
}

func (x *HyperliquidLaunchPosition) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *HyperliquidLaunchPosition) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *HyperliquidLaunchPosition) GetCost() int64 {
	if x != nil {
		return x.Cost
	}
	return 0
}

type HyperliquidLaunchFill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LaunchId     int64                    `protobuf:"varint,1,opt,name=launch_id,json=launchId,proto3" json:"launch_id,omitempty"`
	TelegramId   int64                    `protobuf:"varint,2,opt,name=telegram_id,json=telegramId,proto3" json:"telegram_id,omitempty"`
	Telegram     *TelegramUserPublic      `protobuf:"bytes,3,opt,name=telegram,proto3" json:"telegram,omitempty"`
	Wallet       *HyperliquidPublicWallet `protobuf:"bytes,4,opt,name=wallet,proto3" json:"wallet,omitempty"`
	UsdcDelta    int64                    `protobuf:"varint,5,opt,name=usdc_delta,json=usdcDelta,proto3" json:"usdc_delta,omitempty"`
	LaunchDelta  int64                    `protobuf:"varint,6,opt,name=launch_delta,json=launchDelta,proto3" json:"launch_delta,omitempty"`
	Timestamp    int64                    `protobuf:"varint,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	MovementHash *wrapperspb.StringValue  `protobuf:"bytes,8,opt,name=movement_hash,json=movementHash,proto3" json:"movement_hash,omitempty"`
	Id           int64                    `protobuf:"varint,9,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *HyperliquidLaunchFill) Reset() {
	*x = HyperliquidLaunchFill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_launch_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidLaunchFill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidLaunchFill) ProtoMessage() {}

func (x *HyperliquidLaunchFill) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_launch_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidLaunchFill.ProtoReflect.Descriptor instead.
func (*HyperliquidLaunchFill) Descriptor() ([]byte, []int) {
	return file_hypurr_launch_proto_rawDescGZIP(), []int{2}
}

func (x *HyperliquidLaunchFill) GetLaunchId() int64 {
	if x != nil {
		return x.LaunchId
	}
	return 0
}

func (x *HyperliquidLaunchFill) GetTelegramId() int64 {
	if x != nil {
		return x.TelegramId
	}
	return 0
}

func (x *HyperliquidLaunchFill) GetTelegram() *TelegramUserPublic {
	if x != nil {
		return x.Telegram
	}
	return nil
}

func (x *HyperliquidLaunchFill) GetWallet() *HyperliquidPublicWallet {
	if x != nil {
		return x.Wallet
	}
	return nil
}

func (x *HyperliquidLaunchFill) GetUsdcDelta() int64 {
	if x != nil {
		return x.UsdcDelta
	}
	return 0
}

func (x *HyperliquidLaunchFill) GetLaunchDelta() int64 {
	if x != nil {
		return x.LaunchDelta
	}
	return 0
}

func (x *HyperliquidLaunchFill) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *HyperliquidLaunchFill) GetMovementHash() *wrapperspb.StringValue {
	if x != nil {
		return x.MovementHash
	}
	return nil
}

func (x *HyperliquidLaunchFill) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type HyperliquidLaunchCandle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time   int64   `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Open   float32 `protobuf:"fixed32,2,opt,name=open,proto3" json:"open,omitempty"`
	High   float32 `protobuf:"fixed32,3,opt,name=high,proto3" json:"high,omitempty"`
	Low    float32 `protobuf:"fixed32,4,opt,name=low,proto3" json:"low,omitempty"`
	Close  float32 `protobuf:"fixed32,5,opt,name=close,proto3" json:"close,omitempty"`
	Volume float32 `protobuf:"fixed32,6,opt,name=volume,proto3" json:"volume,omitempty"`
}

func (x *HyperliquidLaunchCandle) Reset() {
	*x = HyperliquidLaunchCandle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_launch_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidLaunchCandle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidLaunchCandle) ProtoMessage() {}

func (x *HyperliquidLaunchCandle) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_launch_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidLaunchCandle.ProtoReflect.Descriptor instead.
func (*HyperliquidLaunchCandle) Descriptor() ([]byte, []int) {
	return file_hypurr_launch_proto_rawDescGZIP(), []int{3}
}

func (x *HyperliquidLaunchCandle) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *HyperliquidLaunchCandle) GetOpen() float32 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *HyperliquidLaunchCandle) GetHigh() float32 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *HyperliquidLaunchCandle) GetLow() float32 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *HyperliquidLaunchCandle) GetClose() float32 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *HyperliquidLaunchCandle) GetVolume() float32 {
	if x != nil {
		return x.Volume
	}
	return 0
}

type HyperliquidLaunchMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Timestamp  int64               `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	LaunchId   int64               `protobuf:"varint,3,opt,name=launch_id,json=launchId,proto3" json:"launch_id,omitempty"`
	TelegramId int64               `protobuf:"varint,4,opt,name=telegram_id,json=telegramId,proto3" json:"telegram_id,omitempty"`
	Author     *TelegramUserPublic `protobuf:"bytes,5,opt,name=author,proto3" json:"author,omitempty"`
	ChatId     int64               `protobuf:"varint,6,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	TopicId    int64               `protobuf:"varint,7,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Message    string              `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
	Pinned     bool                `protobuf:"varint,9,opt,name=pinned,proto3" json:"pinned,omitempty"`
}

func (x *HyperliquidLaunchMessage) Reset() {
	*x = HyperliquidLaunchMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_launch_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidLaunchMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidLaunchMessage) ProtoMessage() {}

func (x *HyperliquidLaunchMessage) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_launch_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidLaunchMessage.ProtoReflect.Descriptor instead.
func (*HyperliquidLaunchMessage) Descriptor() ([]byte, []int) {
	return file_hypurr_launch_proto_rawDescGZIP(), []int{4}
}

func (x *HyperliquidLaunchMessage) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *HyperliquidLaunchMessage) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *HyperliquidLaunchMessage) GetLaunchId() int64 {
	if x != nil {
		return x.LaunchId
	}
	return 0
}

func (x *HyperliquidLaunchMessage) GetTelegramId() int64 {
	if x != nil {
		return x.TelegramId
	}
	return 0
}

func (x *HyperliquidLaunchMessage) GetAuthor() *TelegramUserPublic {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *HyperliquidLaunchMessage) GetChatId() int64 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *HyperliquidLaunchMessage) GetTopicId() int64 {
	if x != nil {
		return x.TopicId
	}
	return 0
}

func (x *HyperliquidLaunchMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *HyperliquidLaunchMessage) GetPinned() bool {
	if x != nil {
		return x.Pinned
	}
	return false
}

type HyperliquidLaunchHolder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balance int64  `protobuf:"varint,1,opt,name=balance,proto3" json:"balance,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Type    string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *HyperliquidLaunchHolder) Reset() {
	*x = HyperliquidLaunchHolder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_launch_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidLaunchHolder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidLaunchHolder) ProtoMessage() {}

func (x *HyperliquidLaunchHolder) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_launch_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidLaunchHolder.ProtoReflect.Descriptor instead.
func (*HyperliquidLaunchHolder) Descriptor() ([]byte, []int) {
	return file_hypurr_launch_proto_rawDescGZIP(), []int{5}
}

func (x *HyperliquidLaunchHolder) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *HyperliquidLaunchHolder) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *HyperliquidLaunchHolder) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

var File_hypurr_launch_proto protoreflect.FileDescriptor

var file_hypurr_launch_proto_rawDesc = []byte{
	0x0a, 0x13, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2f, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x68,
	0x79, 0x70, 0x75, 0x72, 0x72, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x13, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x88, 0x08, 0x0a, 0x11, 0x48, 0x79, 0x70, 0x65,
	0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x3f,
	0x0a, 0x0d, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x54,
	0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x52, 0x0c, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x78, 0x30, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x78, 0x30, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x40, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70,
	0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x08, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x64,
	0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x01, 0x78, 0x12, 0x0c,
	0x0a, 0x01, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01,
	0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x01, 0x6b, 0x12, 0x33, 0x0a, 0x05, 0x66, 0x69,
	0x6c, 0x6c, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x79, 0x70, 0x75,
	0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x6c, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x6c, 0x73, 0x12,
	0x28, 0x0a, 0x10, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x6e, 0x74, 0x6c, 0x5f, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x64, 0x61, 0x69, 0x6c, 0x79,
	0x4e, 0x74, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x70, 0x78, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x44, 0x61, 0x79, 0x50,
	0x78, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x12, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x3e, 0x0a, 0x09, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e,
	0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x50, 0x6f, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x70, 0x6f, 0x6f, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x12,
	0x46, 0x0a, 0x0e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72,
	0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x3e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48,
	0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x09, 0x64, 0x65, 0x76, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x12, 0x21, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x75, 0x70, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x09, 0x64, 0x65, 0x76, 0x4c, 0x6f,
	0x63, 0x6b, 0x75, 0x70, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65, 0x76, 0x5f, 0x6c, 0x6f, 0x63, 0x6b,
	0x75, 0x70, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x10, 0x64, 0x65, 0x76, 0x4c, 0x6f, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x22, 0x63, 0x0a, 0x19, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69,
	0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x22, 0xf9, 0x02, 0x0a, 0x15, 0x48, 0x79, 0x70, 0x65,
	0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x46, 0x69, 0x6c,
	0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x12,
	0x36, 0x0a, 0x08, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x67,
	0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x08, 0x74,
	0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x37, 0x0a, 0x06, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72,
	0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x06, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x64, 0x63, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x73, 0x64, 0x63, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12,
	0x21, 0x0a, 0x0c, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x44, 0x65, 0x6c,
	0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x41, 0x0a, 0x0d, 0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x95, 0x01, 0x0a, 0x17, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71,
	0x75, 0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x6c,
	0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0xa0, 0x02, 0x0a, 0x18,
	0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72,
	0x61, 0x6d, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x54, 0x65,
	0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x22, 0x61,
	0x0a, 0x17, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x2a, 0x52, 0x0a, 0x19, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x50, 0x6f, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d,
	0x0a, 0x09, 0x51, 0x75, 0x61, 0x64, 0x72, 0x61, 0x74, 0x69, 0x63, 0x10, 0x00, 0x12, 0x0f, 0x0a,
	0x0b, 0x51, 0x75, 0x61, 0x64, 0x72, 0x61, 0x74, 0x69, 0x63, 0x56, 0x32, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x69,
	0x78, 0x65, 0x64, 0x10, 0x03, 0x42, 0x29, 0x5a, 0x27, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2f, 0x68, 0x79, 0x70, 0x75, 0x72,
	0x72, 0x2d, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x67, 0x6f, 0x2f, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_hypurr_launch_proto_rawDescOnce sync.Once
	file_hypurr_launch_proto_rawDescData = file_hypurr_launch_proto_rawDesc
)

func file_hypurr_launch_proto_rawDescGZIP() []byte {
	file_hypurr_launch_proto_rawDescOnce.Do(func() {
		file_hypurr_launch_proto_rawDescData = protoimpl.X.CompressGZIP(file_hypurr_launch_proto_rawDescData)
	})
	return file_hypurr_launch_proto_rawDescData
}

var file_hypurr_launch_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_hypurr_launch_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_hypurr_launch_proto_goTypes = []any{
	(HyperliquidLaunchPoolType)(0),         // 0: hypurr.HyperliquidLaunchPoolType
	(*HyperliquidLaunch)(nil),              // 1: hypurr.HyperliquidLaunch
	(*HyperliquidLaunchPosition)(nil),      // 2: hypurr.HyperliquidLaunchPosition
	(*HyperliquidLaunchFill)(nil),          // 3: hypurr.HyperliquidLaunchFill
	(*HyperliquidLaunchCandle)(nil),        // 4: hypurr.HyperliquidLaunchCandle
	(*HyperliquidLaunchMessage)(nil),       // 5: hypurr.HyperliquidLaunchMessage
	(*HyperliquidLaunchHolder)(nil),        // 6: hypurr.HyperliquidLaunchHolder
	(*TelegramUserPublic)(nil),             // 7: hypurr.TelegramUserPublic
	(*HyperliquidWalletDeploySession)(nil), // 8: hypurr.HyperliquidWalletDeploySession
	(*wrapperspb.Int64Value)(nil),          // 9: google.protobuf.Int64Value
	(*HyperliquidPublicWallet)(nil),        // 10: hypurr.HyperliquidPublicWallet
	(*wrapperspb.StringValue)(nil),         // 11: google.protobuf.StringValue
}
var file_hypurr_launch_proto_depIdxs = []int32{
	7,  // 0: hypurr.HyperliquidLaunch.telegram_user:type_name -> hypurr.TelegramUserPublic
	8,  // 1: hypurr.HyperliquidLaunch.session:type_name -> hypurr.HyperliquidWalletDeploySession
	9,  // 2: hypurr.HyperliquidLaunch.topic_id:type_name -> google.protobuf.Int64Value
	3,  // 3: hypurr.HyperliquidLaunch.fills:type_name -> hypurr.HyperliquidLaunchFill
	0,  // 4: hypurr.HyperliquidLaunch.pool_type:type_name -> hypurr.HyperliquidLaunchPoolType
	10, // 5: hypurr.HyperliquidLaunch.session_wallet:type_name -> hypurr.HyperliquidPublicWallet
	10, // 6: hypurr.HyperliquidLaunch.dev_wallet:type_name -> hypurr.HyperliquidPublicWallet
	7,  // 7: hypurr.HyperliquidLaunchFill.telegram:type_name -> hypurr.TelegramUserPublic
	10, // 8: hypurr.HyperliquidLaunchFill.wallet:type_name -> hypurr.HyperliquidPublicWallet
	11, // 9: hypurr.HyperliquidLaunchFill.movement_hash:type_name -> google.protobuf.StringValue
	7,  // 10: hypurr.HyperliquidLaunchMessage.author:type_name -> hypurr.TelegramUserPublic
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_hypurr_launch_proto_init() }
func file_hypurr_launch_proto_init() {
	if File_hypurr_launch_proto != nil {
		return
	}
	file_hypurr_wallet_proto_init()
	file_hypurr_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_hypurr_launch_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidLaunch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_launch_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidLaunchPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_launch_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidLaunchFill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_launch_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidLaunchCandle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_launch_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidLaunchMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_launch_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidLaunchHolder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_hypurr_launch_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_hypurr_launch_proto_goTypes,
		DependencyIndexes: file_hypurr_launch_proto_depIdxs,
		EnumInfos:         file_hypurr_launch_proto_enumTypes,
		MessageInfos:      file_hypurr_launch_proto_msgTypes,
	}.Build()
	File_hypurr_launch_proto = out.File
	file_hypurr_launch_proto_rawDesc = nil
	file_hypurr_launch_proto_goTypes = nil
	file_hypurr_launch_proto_depIdxs = nil
}
