// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.21.12
// source: hypurr/eoa/eoa_service.proto

package eoa

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	EOA_EOAUserAgentChallenge_FullMethodName    = "/eoa.EOA/EOAUserAgentChallenge"
	EOA_EOAUser_FullMethodName                  = "/eoa.EOA/EOAUser"
	EOA_PendingHyperliquidLaunch_FullMethodName = "/eoa.EOA/PendingHyperliquidLaunch"
	EOA_HyperliquidLaunchTrade_FullMethodName   = "/eoa.EOA/HyperliquidLaunchTrade"
	EOA_HyperliquidSpotTrade_FullMethodName     = "/eoa.EOA/HyperliquidSpotTrade"
)

// EOAClient is the client API for EOA service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Authed endpoints
type EOAClient interface {
	EOAUserAgentChallenge(ctx context.Context, in *EOAUserAgentChallengeRequest, opts ...grpc.CallOption) (*EOAUserAgentChallengeResponse, error)
	EOAUser(ctx context.Context, in *EOAUserRequest, opts ...grpc.CallOption) (*EOAUserResponse, error)
	// Launch
	PendingHyperliquidLaunch(ctx context.Context, in *PendingHyperliquidLaunchRequest, opts ...grpc.CallOption) (*PendingHyperliquidLaunchResponse, error)
	HyperliquidLaunchTrade(ctx context.Context, in *HyperliquidLaunchTradeRequest, opts ...grpc.CallOption) (*HyperliquidLaunchTradeResponse, error)
	// Spot
	HyperliquidSpotTrade(ctx context.Context, in *HyperliquidSpotTradeRequest, opts ...grpc.CallOption) (*HyperliquidSpotTradeResponse, error)
}

type eOAClient struct {
	cc grpc.ClientConnInterface
}

func NewEOAClient(cc grpc.ClientConnInterface) EOAClient {
	return &eOAClient{cc}
}

func (c *eOAClient) EOAUserAgentChallenge(ctx context.Context, in *EOAUserAgentChallengeRequest, opts ...grpc.CallOption) (*EOAUserAgentChallengeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EOAUserAgentChallengeResponse)
	err := c.cc.Invoke(ctx, EOA_EOAUserAgentChallenge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eOAClient) EOAUser(ctx context.Context, in *EOAUserRequest, opts ...grpc.CallOption) (*EOAUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EOAUserResponse)
	err := c.cc.Invoke(ctx, EOA_EOAUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eOAClient) PendingHyperliquidLaunch(ctx context.Context, in *PendingHyperliquidLaunchRequest, opts ...grpc.CallOption) (*PendingHyperliquidLaunchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PendingHyperliquidLaunchResponse)
	err := c.cc.Invoke(ctx, EOA_PendingHyperliquidLaunch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eOAClient) HyperliquidLaunchTrade(ctx context.Context, in *HyperliquidLaunchTradeRequest, opts ...grpc.CallOption) (*HyperliquidLaunchTradeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HyperliquidLaunchTradeResponse)
	err := c.cc.Invoke(ctx, EOA_HyperliquidLaunchTrade_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eOAClient) HyperliquidSpotTrade(ctx context.Context, in *HyperliquidSpotTradeRequest, opts ...grpc.CallOption) (*HyperliquidSpotTradeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HyperliquidSpotTradeResponse)
	err := c.cc.Invoke(ctx, EOA_HyperliquidSpotTrade_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EOAServer is the server API for EOA service.
// All implementations must embed UnimplementedEOAServer
// for forward compatibility
//
// Authed endpoints
type EOAServer interface {
	EOAUserAgentChallenge(context.Context, *EOAUserAgentChallengeRequest) (*EOAUserAgentChallengeResponse, error)
	EOAUser(context.Context, *EOAUserRequest) (*EOAUserResponse, error)
	// Launch
	PendingHyperliquidLaunch(context.Context, *PendingHyperliquidLaunchRequest) (*PendingHyperliquidLaunchResponse, error)
	HyperliquidLaunchTrade(context.Context, *HyperliquidLaunchTradeRequest) (*HyperliquidLaunchTradeResponse, error)
	// Spot
	HyperliquidSpotTrade(context.Context, *HyperliquidSpotTradeRequest) (*HyperliquidSpotTradeResponse, error)
	mustEmbedUnimplementedEOAServer()
}

// UnimplementedEOAServer must be embedded to have forward compatible implementations.
type UnimplementedEOAServer struct {
}

func (UnimplementedEOAServer) EOAUserAgentChallenge(context.Context, *EOAUserAgentChallengeRequest) (*EOAUserAgentChallengeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EOAUserAgentChallenge not implemented")
}
func (UnimplementedEOAServer) EOAUser(context.Context, *EOAUserRequest) (*EOAUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EOAUser not implemented")
}
func (UnimplementedEOAServer) PendingHyperliquidLaunch(context.Context, *PendingHyperliquidLaunchRequest) (*PendingHyperliquidLaunchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PendingHyperliquidLaunch not implemented")
}
func (UnimplementedEOAServer) HyperliquidLaunchTrade(context.Context, *HyperliquidLaunchTradeRequest) (*HyperliquidLaunchTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HyperliquidLaunchTrade not implemented")
}
func (UnimplementedEOAServer) HyperliquidSpotTrade(context.Context, *HyperliquidSpotTradeRequest) (*HyperliquidSpotTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HyperliquidSpotTrade not implemented")
}
func (UnimplementedEOAServer) mustEmbedUnimplementedEOAServer() {}

// UnsafeEOAServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EOAServer will
// result in compilation errors.
type UnsafeEOAServer interface {
	mustEmbedUnimplementedEOAServer()
}

func RegisterEOAServer(s grpc.ServiceRegistrar, srv EOAServer) {
	s.RegisterService(&EOA_ServiceDesc, srv)
}

func _EOA_EOAUserAgentChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EOAUserAgentChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EOAServer).EOAUserAgentChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EOA_EOAUserAgentChallenge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EOAServer).EOAUserAgentChallenge(ctx, req.(*EOAUserAgentChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EOA_EOAUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EOAUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EOAServer).EOAUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EOA_EOAUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EOAServer).EOAUser(ctx, req.(*EOAUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EOA_PendingHyperliquidLaunch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PendingHyperliquidLaunchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EOAServer).PendingHyperliquidLaunch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EOA_PendingHyperliquidLaunch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EOAServer).PendingHyperliquidLaunch(ctx, req.(*PendingHyperliquidLaunchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EOA_HyperliquidLaunchTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HyperliquidLaunchTradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EOAServer).HyperliquidLaunchTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EOA_HyperliquidLaunchTrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EOAServer).HyperliquidLaunchTrade(ctx, req.(*HyperliquidLaunchTradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EOA_HyperliquidSpotTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HyperliquidSpotTradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EOAServer).HyperliquidSpotTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EOA_HyperliquidSpotTrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EOAServer).HyperliquidSpotTrade(ctx, req.(*HyperliquidSpotTradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EOA_ServiceDesc is the grpc.ServiceDesc for EOA service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EOA_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eoa.EOA",
	HandlerType: (*EOAServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EOAUserAgentChallenge",
			Handler:    _EOA_EOAUserAgentChallenge_Handler,
		},
		{
			MethodName: "EOAUser",
			Handler:    _EOA_EOAUser_Handler,
		},
		{
			MethodName: "PendingHyperliquidLaunch",
			Handler:    _EOA_PendingHyperliquidLaunch_Handler,
		},
		{
			MethodName: "HyperliquidLaunchTrade",
			Handler:    _EOA_HyperliquidLaunchTrade_Handler,
		},
		{
			MethodName: "HyperliquidSpotTrade",
			Handler:    _EOA_HyperliquidSpotTrade_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hypurr/eoa/eoa_service.proto",
}
