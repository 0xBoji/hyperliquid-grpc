// User wants to fetch certificates, and credits

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.21.12
// source: hypurr/user.proto

package hypurr

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TelegramUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TelegramId       int64                        `protobuf:"varint,1,opt,name=telegram_id,json=telegramId,proto3" json:"telegram_id,omitempty"`
	TelegramUsername string                       `protobuf:"bytes,2,opt,name=telegram_username,json=telegramUsername,proto3" json:"telegram_username,omitempty"`
	PendingFees      float64                      `protobuf:"fixed64,3,opt,name=pending_fees,json=pendingFees,proto3" json:"pending_fees,omitempty"`
	ReferralRewards  float64                      `protobuf:"fixed64,4,opt,name=referral_rewards,json=referralRewards,proto3" json:"referral_rewards,omitempty"`
	ReferralCode     string                       `protobuf:"bytes,5,opt,name=referral_code,json=referralCode,proto3" json:"referral_code,omitempty"`
	ReferralScore    int64                        `protobuf:"varint,6,opt,name=referral_score,json=referralScore,proto3" json:"referral_score,omitempty"`
	ReferrerId       int64                        `protobuf:"varint,7,opt,name=referrer_id,json=referrerId,proto3" json:"referrer_id,omitempty"`
	Settings         *TelegramUserSettings        `protobuf:"bytes,8,opt,name=settings,proto3" json:"settings,omitempty"`
	Wallet           *HyperliquidWallet           `protobuf:"bytes,9,opt,name=wallet,proto3" json:"wallet,omitempty"`
	Wallets          []*HyperliquidWallet         `protobuf:"bytes,10,rep,name=wallets,proto3" json:"wallets,omitempty"`
	WalletId         int64                        `protobuf:"varint,11,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	SniperWallet     *HyperliquidWallet           `protobuf:"bytes,12,opt,name=sniper_wallet,json=sniperWallet,proto3" json:"sniper_wallet,omitempty"`
	SniperWalletId   int64                        `protobuf:"varint,13,opt,name=sniper_wallet_id,json=sniperWalletId,proto3" json:"sniper_wallet_id,omitempty"`
	DumperWallet     *HyperliquidWallet           `protobuf:"bytes,14,opt,name=dumper_wallet,json=dumperWallet,proto3" json:"dumper_wallet,omitempty"`
	DumperWalletId   int64                        `protobuf:"varint,15,opt,name=dumper_wallet_id,json=dumperWalletId,proto3" json:"dumper_wallet_id,omitempty"`
	ReputationId     int64                        `protobuf:"varint,16,opt,name=reputation_id,json=reputationId,proto3" json:"reputation_id,omitempty"`
	Reputation       *TelegramUserReputation      `protobuf:"bytes,17,opt,name=reputation,proto3" json:"reputation,omitempty"`
	Launches         []*HyperliquidLaunch         `protobuf:"bytes,18,rep,name=launches,proto3" json:"launches,omitempty"`
	Balances         []*HyperliquidWalletBalance  `protobuf:"bytes,19,rep,name=balances,proto3" json:"balances,omitempty"`
	Movements        []*HyperliquidWalletMovement `protobuf:"bytes,20,rep,name=movements,proto3" json:"movements,omitempty"`
	LaunchFills      []*HyperliquidLaunchFill     `protobuf:"bytes,21,rep,name=launch_fills,json=launchFills,proto3" json:"launch_fills,omitempty"`
	Labels           []*HyperliquidWalletLabel    `protobuf:"bytes,22,rep,name=labels,proto3" json:"labels,omitempty"`
}

func (x *TelegramUser) Reset() {
	*x = TelegramUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_user_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelegramUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelegramUser) ProtoMessage() {}

func (x *TelegramUser) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_user_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelegramUser.ProtoReflect.Descriptor instead.
func (*TelegramUser) Descriptor() ([]byte, []int) {
	return file_hypurr_user_proto_rawDescGZIP(), []int{0}
}

func (x *TelegramUser) GetTelegramId() int64 {
	if x != nil {
		return x.TelegramId
	}
	return 0
}

func (x *TelegramUser) GetTelegramUsername() string {
	if x != nil {
		return x.TelegramUsername
	}
	return ""
}

func (x *TelegramUser) GetPendingFees() float64 {
	if x != nil {
		return x.PendingFees
	}
	return 0
}

func (x *TelegramUser) GetReferralRewards() float64 {
	if x != nil {
		return x.ReferralRewards
	}
	return 0
}

func (x *TelegramUser) GetReferralCode() string {
	if x != nil {
		return x.ReferralCode
	}
	return ""
}

func (x *TelegramUser) GetReferralScore() int64 {
	if x != nil {
		return x.ReferralScore
	}
	return 0
}

func (x *TelegramUser) GetReferrerId() int64 {
	if x != nil {
		return x.ReferrerId
	}
	return 0
}

func (x *TelegramUser) GetSettings() *TelegramUserSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *TelegramUser) GetWallet() *HyperliquidWallet {
	if x != nil {
		return x.Wallet
	}
	return nil
}

func (x *TelegramUser) GetWallets() []*HyperliquidWallet {
	if x != nil {
		return x.Wallets
	}
	return nil
}

func (x *TelegramUser) GetWalletId() int64 {
	if x != nil {
		return x.WalletId
	}
	return 0
}

func (x *TelegramUser) GetSniperWallet() *HyperliquidWallet {
	if x != nil {
		return x.SniperWallet
	}
	return nil
}

func (x *TelegramUser) GetSniperWalletId() int64 {
	if x != nil {
		return x.SniperWalletId
	}
	return 0
}

func (x *TelegramUser) GetDumperWallet() *HyperliquidWallet {
	if x != nil {
		return x.DumperWallet
	}
	return nil
}

func (x *TelegramUser) GetDumperWalletId() int64 {
	if x != nil {
		return x.DumperWalletId
	}
	return 0
}

func (x *TelegramUser) GetReputationId() int64 {
	if x != nil {
		return x.ReputationId
	}
	return 0
}

func (x *TelegramUser) GetReputation() *TelegramUserReputation {
	if x != nil {
		return x.Reputation
	}
	return nil
}

func (x *TelegramUser) GetLaunches() []*HyperliquidLaunch {
	if x != nil {
		return x.Launches
	}
	return nil
}

func (x *TelegramUser) GetBalances() []*HyperliquidWalletBalance {
	if x != nil {
		return x.Balances
	}
	return nil
}

func (x *TelegramUser) GetMovements() []*HyperliquidWalletMovement {
	if x != nil {
		return x.Movements
	}
	return nil
}

func (x *TelegramUser) GetLaunchFills() []*HyperliquidLaunchFill {
	if x != nil {
		return x.LaunchFills
	}
	return nil
}

func (x *TelegramUser) GetLabels() []*HyperliquidWalletLabel {
	if x != nil {
		return x.Labels
	}
	return nil
}

type TelegramUserSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeftBuy     int32   `protobuf:"varint,1,opt,name=left_buy,json=leftBuy,proto3" json:"left_buy,omitempty"`
	MidBuy      int32   `protobuf:"varint,2,opt,name=mid_buy,json=midBuy,proto3" json:"mid_buy,omitempty"`
	RightBuy    int32   `protobuf:"varint,3,opt,name=right_buy,json=rightBuy,proto3" json:"right_buy,omitempty"`
	LeftSell    int32   `protobuf:"varint,4,opt,name=left_sell,json=leftSell,proto3" json:"left_sell,omitempty"`
	MidSell     int32   `protobuf:"varint,5,opt,name=mid_sell,json=midSell,proto3" json:"mid_sell,omitempty"`
	RightSell   int32   `protobuf:"varint,6,opt,name=right_sell,json=rightSell,proto3" json:"right_sell,omitempty"`
	LogTrades   bool    `protobuf:"varint,7,opt,name=log_trades,json=logTrades,proto3" json:"log_trades,omitempty"`
	HideSmall   bool    `protobuf:"varint,8,opt,name=hide_small,json=hideSmall,proto3" json:"hide_small,omitempty"`
	MaxSlippage int32   `protobuf:"varint,9,opt,name=max_slippage,json=maxSlippage,proto3" json:"max_slippage,omitempty"`
	TipAmount   float32 `protobuf:"fixed32,10,opt,name=tip_amount,json=tipAmount,proto3" json:"tip_amount,omitempty"`
	NoTipping   bool    `protobuf:"varint,11,opt,name=no_tipping,json=noTipping,proto3" json:"no_tipping,omitempty"`
	AutoBridge  bool    `protobuf:"varint,12,opt,name=auto_bridge,json=autoBridge,proto3" json:"auto_bridge,omitempty"`
}

func (x *TelegramUserSettings) Reset() {
	*x = TelegramUserSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_user_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelegramUserSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelegramUserSettings) ProtoMessage() {}

func (x *TelegramUserSettings) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_user_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelegramUserSettings.ProtoReflect.Descriptor instead.
func (*TelegramUserSettings) Descriptor() ([]byte, []int) {
	return file_hypurr_user_proto_rawDescGZIP(), []int{1}
}

func (x *TelegramUserSettings) GetLeftBuy() int32 {
	if x != nil {
		return x.LeftBuy
	}
	return 0
}

func (x *TelegramUserSettings) GetMidBuy() int32 {
	if x != nil {
		return x.MidBuy
	}
	return 0
}

func (x *TelegramUserSettings) GetRightBuy() int32 {
	if x != nil {
		return x.RightBuy
	}
	return 0
}

func (x *TelegramUserSettings) GetLeftSell() int32 {
	if x != nil {
		return x.LeftSell
	}
	return 0
}

func (x *TelegramUserSettings) GetMidSell() int32 {
	if x != nil {
		return x.MidSell
	}
	return 0
}

func (x *TelegramUserSettings) GetRightSell() int32 {
	if x != nil {
		return x.RightSell
	}
	return 0
}

func (x *TelegramUserSettings) GetLogTrades() bool {
	if x != nil {
		return x.LogTrades
	}
	return false
}

func (x *TelegramUserSettings) GetHideSmall() bool {
	if x != nil {
		return x.HideSmall
	}
	return false
}

func (x *TelegramUserSettings) GetMaxSlippage() int32 {
	if x != nil {
		return x.MaxSlippage
	}
	return 0
}

func (x *TelegramUserSettings) GetTipAmount() float32 {
	if x != nil {
		return x.TipAmount
	}
	return 0
}

func (x *TelegramUserSettings) GetNoTipping() bool {
	if x != nil {
		return x.NoTipping
	}
	return false
}

func (x *TelegramUserSettings) GetAutoBridge() bool {
	if x != nil {
		return x.AutoBridge
	}
	return false
}

type TelegramUserReputation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HfunScore       float64 `protobuf:"fixed64,1,opt,name=hfun_score,json=hfunScore,proto3" json:"hfun_score,omitempty"`
	ReputationScore float64 `protobuf:"fixed64,2,opt,name=reputation_score,json=reputationScore,proto3" json:"reputation_score,omitempty"`
}

func (x *TelegramUserReputation) Reset() {
	*x = TelegramUserReputation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_user_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelegramUserReputation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelegramUserReputation) ProtoMessage() {}

func (x *TelegramUserReputation) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_user_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelegramUserReputation.ProtoReflect.Descriptor instead.
func (*TelegramUserReputation) Descriptor() ([]byte, []int) {
	return file_hypurr_user_proto_rawDescGZIP(), []int{2}
}

func (x *TelegramUserReputation) GetHfunScore() float64 {
	if x != nil {
		return x.HfunScore
	}
	return 0
}

func (x *TelegramUserReputation) GetReputationScore() float64 {
	if x != nil {
		return x.ReputationScore
	}
	return 0
}

type HyperliquidWalletLabel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EthereumAddress string `protobuf:"bytes,1,opt,name=ethereum_address,json=ethereumAddress,proto3" json:"ethereum_address,omitempty"`
	Label           string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *HyperliquidWalletLabel) Reset() {
	*x = HyperliquidWalletLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_user_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidWalletLabel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidWalletLabel) ProtoMessage() {}

func (x *HyperliquidWalletLabel) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_user_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidWalletLabel.ProtoReflect.Descriptor instead.
func (*HyperliquidWalletLabel) Descriptor() ([]byte, []int) {
	return file_hypurr_user_proto_rawDescGZIP(), []int{3}
}

func (x *HyperliquidWalletLabel) GetEthereumAddress() string {
	if x != nil {
		return x.EthereumAddress
	}
	return ""
}

func (x *HyperliquidWalletLabel) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

var File_hypurr_user_proto protoreflect.FileDescriptor

var file_hypurr_user_proto_rawDesc = []byte{
	0x0a, 0x11, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x06, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x1a, 0x13, 0x68, 0x79, 0x70,
	0x75, 0x72, 0x72, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x13, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2f, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbf, 0x08, 0x0a, 0x0c, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72,
	0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72,
	0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x65, 0x6c,
	0x65, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x65, 0x6c, 0x65, 0x67,
	0x72, 0x61, 0x6d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x66, 0x65, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x70, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x61, 0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x38, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x67,
	0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x79, 0x70, 0x75,
	0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x52, 0x06, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x33, 0x0a, 0x07,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75,
	0x69, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x07, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x3e,
	0x0a, 0x0d, 0x73, 0x6e, 0x69, 0x70, 0x65, 0x72, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48,
	0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x52, 0x0c, 0x73, 0x6e, 0x69, 0x70, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x28,
	0x0a, 0x10, 0x73, 0x6e, 0x69, 0x70, 0x65, 0x72, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x6e, 0x69, 0x70, 0x65, 0x72,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0d, 0x64, 0x75, 0x6d, 0x70,
	0x65, 0x72, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x0c, 0x64, 0x75, 0x6d, 0x70,
	0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x75, 0x6d, 0x70,
	0x65, 0x72, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x64, 0x75, 0x6d, 0x70, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x75, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x75, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x79,
	0x70, 0x75, 0x72, 0x72, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x72, 0x65, 0x70,
	0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x79, 0x70, 0x75,
	0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x52, 0x08, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x12, 0x3c,
	0x0a, 0x08, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c,
	0x69, 0x71, 0x75, 0x69, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x08, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x09,
	0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x09, 0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x40, 0x0a,
	0x0c, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x15, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70,
	0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x46, 0x69,
	0x6c, 0x6c, 0x52, 0x0b, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x6c, 0x73, 0x12,
	0x36, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x22, 0xfe, 0x02, 0x0a, 0x14, 0x54, 0x65, 0x6c, 0x65,
	0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x62, 0x75, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x6c, 0x65, 0x66, 0x74, 0x42, 0x75, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x6d,
	0x69, 0x64, 0x5f, 0x62, 0x75, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x69,
	0x64, 0x42, 0x75, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x62, 0x75,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x69, 0x67, 0x68, 0x74, 0x42, 0x75,
	0x79, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x12, 0x19,
	0x0a, 0x08, 0x6d, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x6d, 0x69, 0x64, 0x53, 0x65, 0x6c, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x5f,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6c, 0x6f,
	0x67, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x69, 0x64, 0x65, 0x5f,
	0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x68, 0x69, 0x64,
	0x65, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x6c,
	0x69, 0x70, 0x70, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61,
	0x78, 0x53, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x70,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x74,
	0x69, 0x70, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x5f, 0x74,
	0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6e, 0x6f,
	0x54, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x5f,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x75,
	0x74, 0x6f, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x22, 0x62, 0x0a, 0x16, 0x54, 0x65, 0x6c, 0x65,
	0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x66, 0x75, 0x6e, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x68, 0x66, 0x75, 0x6e, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x72, 0x65, 0x70,
	0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x59, 0x0a, 0x16,
	0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65,
	0x75, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x29, 0x5a, 0x27, 0x67, 0x69, 0x74, 0x6c, 0x61,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2f, 0x68, 0x79, 0x70,
	0x75, 0x72, 0x72, 0x2d, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x67, 0x6f, 0x2f, 0x68, 0x79, 0x70, 0x75,
	0x72, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_hypurr_user_proto_rawDescOnce sync.Once
	file_hypurr_user_proto_rawDescData = file_hypurr_user_proto_rawDesc
)

func file_hypurr_user_proto_rawDescGZIP() []byte {
	file_hypurr_user_proto_rawDescOnce.Do(func() {
		file_hypurr_user_proto_rawDescData = protoimpl.X.CompressGZIP(file_hypurr_user_proto_rawDescData)
	})
	return file_hypurr_user_proto_rawDescData
}

var file_hypurr_user_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_hypurr_user_proto_goTypes = []any{
	(*TelegramUser)(nil),              // 0: hypurr.TelegramUser
	(*TelegramUserSettings)(nil),      // 1: hypurr.TelegramUserSettings
	(*TelegramUserReputation)(nil),    // 2: hypurr.TelegramUserReputation
	(*HyperliquidWalletLabel)(nil),    // 3: hypurr.HyperliquidWalletLabel
	(*HyperliquidWallet)(nil),         // 4: hypurr.HyperliquidWallet
	(*HyperliquidLaunch)(nil),         // 5: hypurr.HyperliquidLaunch
	(*HyperliquidWalletBalance)(nil),  // 6: hypurr.HyperliquidWalletBalance
	(*HyperliquidWalletMovement)(nil), // 7: hypurr.HyperliquidWalletMovement
	(*HyperliquidLaunchFill)(nil),     // 8: hypurr.HyperliquidLaunchFill
}
var file_hypurr_user_proto_depIdxs = []int32{
	1,  // 0: hypurr.TelegramUser.settings:type_name -> hypurr.TelegramUserSettings
	4,  // 1: hypurr.TelegramUser.wallet:type_name -> hypurr.HyperliquidWallet
	4,  // 2: hypurr.TelegramUser.wallets:type_name -> hypurr.HyperliquidWallet
	4,  // 3: hypurr.TelegramUser.sniper_wallet:type_name -> hypurr.HyperliquidWallet
	4,  // 4: hypurr.TelegramUser.dumper_wallet:type_name -> hypurr.HyperliquidWallet
	2,  // 5: hypurr.TelegramUser.reputation:type_name -> hypurr.TelegramUserReputation
	5,  // 6: hypurr.TelegramUser.launches:type_name -> hypurr.HyperliquidLaunch
	6,  // 7: hypurr.TelegramUser.balances:type_name -> hypurr.HyperliquidWalletBalance
	7,  // 8: hypurr.TelegramUser.movements:type_name -> hypurr.HyperliquidWalletMovement
	8,  // 9: hypurr.TelegramUser.launch_fills:type_name -> hypurr.HyperliquidLaunchFill
	3,  // 10: hypurr.TelegramUser.labels:type_name -> hypurr.HyperliquidWalletLabel
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_hypurr_user_proto_init() }
func file_hypurr_user_proto_init() {
	if File_hypurr_user_proto != nil {
		return
	}
	file_hypurr_wallet_proto_init()
	file_hypurr_launch_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_hypurr_user_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*TelegramUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_user_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*TelegramUserSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_user_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*TelegramUserReputation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_user_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidWalletLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_hypurr_user_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_hypurr_user_proto_goTypes,
		DependencyIndexes: file_hypurr_user_proto_depIdxs,
		MessageInfos:      file_hypurr_user_proto_msgTypes,
	}.Build()
	File_hypurr_user_proto = out.File
	file_hypurr_user_proto_rawDesc = nil
	file_hypurr_user_proto_goTypes = nil
	file_hypurr_user_proto_depIdxs = nil
}
