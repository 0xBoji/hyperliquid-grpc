// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.21.12
// source: hypurr/telegram_service.proto

package hypurr

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Telegram_TelegramUser_FullMethodName                      = "/hypurr.Telegram/TelegramUser"
	Telegram_TelegramUserWallets_FullMethodName               = "/hypurr.Telegram/TelegramUserWallets"
	Telegram_HyperliquidLaunchTrade_FullMethodName            = "/hypurr.Telegram/HyperliquidLaunchTrade"
	Telegram_LaunchHyperliquidLaunch_FullMethodName           = "/hypurr.Telegram/LaunchHyperliquidLaunch"
	Telegram_EditHyperliquidLaunch_FullMethodName             = "/hypurr.Telegram/EditHyperliquidLaunch"
	Telegram_HyperliquidSpotTrade_FullMethodName              = "/hypurr.Telegram/HyperliquidSpotTrade"
	Telegram_HyperliquidWalletSpotTwapSessions_FullMethodName = "/hypurr.Telegram/HyperliquidWalletSpotTwapSessions"
	Telegram_HyperliquidSpotSniperConfigs_FullMethodName      = "/hypurr.Telegram/HyperliquidSpotSniperConfigs"
	Telegram_CreateHyperliquidSpotSniperConfig_FullMethodName = "/hypurr.Telegram/CreateHyperliquidSpotSniperConfig"
	Telegram_DeleteHyperliquidSpotSniperConfig_FullMethodName = "/hypurr.Telegram/DeleteHyperliquidSpotSniperConfig"
	Telegram_UpdateHyperliquidSpotSniperConfig_FullMethodName = "/hypurr.Telegram/UpdateHyperliquidSpotSniperConfig"
)

// TelegramClient is the client API for Telegram service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TelegramClient interface {
	TelegramUser(ctx context.Context, in *TelegramUserRequest, opts ...grpc.CallOption) (*TelegramUserResponse, error)
	TelegramUserWallets(ctx context.Context, in *TelegramUserWalletsRequest, opts ...grpc.CallOption) (*TelegramUserWalletsResponse, error)
	// Launch
	HyperliquidLaunchTrade(ctx context.Context, in *HyperliquidLaunchTradeRequest, opts ...grpc.CallOption) (*HyperliquidLaunchTradeResponse, error)
	LaunchHyperliquidLaunch(ctx context.Context, in *LaunchHyperliquidLaunchRequest, opts ...grpc.CallOption) (*LaunchHyperliquidLaunchResponse, error)
	EditHyperliquidLaunch(ctx context.Context, in *EditHyperliquidLaunchRequest, opts ...grpc.CallOption) (*EditHyperliquidLaunchResponse, error)
	// Spot
	HyperliquidSpotTrade(ctx context.Context, in *HyperliquidSpotTradeRequest, opts ...grpc.CallOption) (*HyperliquidSpotTradeResponse, error)
	HyperliquidWalletSpotTwapSessions(ctx context.Context, in *HyperliquidWalletSpotTwapSessionsRequest, opts ...grpc.CallOption) (*HyperliquidWalletSpotTwapSessionsResponse, error)
	HyperliquidSpotSniperConfigs(ctx context.Context, in *HyperliquidSpotSniperConfigsRequest, opts ...grpc.CallOption) (*HyperliquidSpotSniperConfigsResponse, error)
	CreateHyperliquidSpotSniperConfig(ctx context.Context, in *CreateHyperliquidSpotSniperConfigRequest, opts ...grpc.CallOption) (*CreateHyperliquidSpotSniperConfigResponse, error)
	DeleteHyperliquidSpotSniperConfig(ctx context.Context, in *DeleteHyperliquidSpotSniperConfigRequest, opts ...grpc.CallOption) (*DeleteHyperliquidSpotSniperConfigResponse, error)
	UpdateHyperliquidSpotSniperConfig(ctx context.Context, in *UpdateHyperliquidSpotSniperConfigRequest, opts ...grpc.CallOption) (*UpdateHyperliquidSpotSniperConfigResponse, error)
}

type telegramClient struct {
	cc grpc.ClientConnInterface
}

func NewTelegramClient(cc grpc.ClientConnInterface) TelegramClient {
	return &telegramClient{cc}
}

func (c *telegramClient) TelegramUser(ctx context.Context, in *TelegramUserRequest, opts ...grpc.CallOption) (*TelegramUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TelegramUserResponse)
	err := c.cc.Invoke(ctx, Telegram_TelegramUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telegramClient) TelegramUserWallets(ctx context.Context, in *TelegramUserWalletsRequest, opts ...grpc.CallOption) (*TelegramUserWalletsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TelegramUserWalletsResponse)
	err := c.cc.Invoke(ctx, Telegram_TelegramUserWallets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telegramClient) HyperliquidLaunchTrade(ctx context.Context, in *HyperliquidLaunchTradeRequest, opts ...grpc.CallOption) (*HyperliquidLaunchTradeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HyperliquidLaunchTradeResponse)
	err := c.cc.Invoke(ctx, Telegram_HyperliquidLaunchTrade_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telegramClient) LaunchHyperliquidLaunch(ctx context.Context, in *LaunchHyperliquidLaunchRequest, opts ...grpc.CallOption) (*LaunchHyperliquidLaunchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LaunchHyperliquidLaunchResponse)
	err := c.cc.Invoke(ctx, Telegram_LaunchHyperliquidLaunch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telegramClient) EditHyperliquidLaunch(ctx context.Context, in *EditHyperliquidLaunchRequest, opts ...grpc.CallOption) (*EditHyperliquidLaunchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EditHyperliquidLaunchResponse)
	err := c.cc.Invoke(ctx, Telegram_EditHyperliquidLaunch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telegramClient) HyperliquidSpotTrade(ctx context.Context, in *HyperliquidSpotTradeRequest, opts ...grpc.CallOption) (*HyperliquidSpotTradeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HyperliquidSpotTradeResponse)
	err := c.cc.Invoke(ctx, Telegram_HyperliquidSpotTrade_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telegramClient) HyperliquidWalletSpotTwapSessions(ctx context.Context, in *HyperliquidWalletSpotTwapSessionsRequest, opts ...grpc.CallOption) (*HyperliquidWalletSpotTwapSessionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HyperliquidWalletSpotTwapSessionsResponse)
	err := c.cc.Invoke(ctx, Telegram_HyperliquidWalletSpotTwapSessions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telegramClient) HyperliquidSpotSniperConfigs(ctx context.Context, in *HyperliquidSpotSniperConfigsRequest, opts ...grpc.CallOption) (*HyperliquidSpotSniperConfigsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HyperliquidSpotSniperConfigsResponse)
	err := c.cc.Invoke(ctx, Telegram_HyperliquidSpotSniperConfigs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telegramClient) CreateHyperliquidSpotSniperConfig(ctx context.Context, in *CreateHyperliquidSpotSniperConfigRequest, opts ...grpc.CallOption) (*CreateHyperliquidSpotSniperConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateHyperliquidSpotSniperConfigResponse)
	err := c.cc.Invoke(ctx, Telegram_CreateHyperliquidSpotSniperConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telegramClient) DeleteHyperliquidSpotSniperConfig(ctx context.Context, in *DeleteHyperliquidSpotSniperConfigRequest, opts ...grpc.CallOption) (*DeleteHyperliquidSpotSniperConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteHyperliquidSpotSniperConfigResponse)
	err := c.cc.Invoke(ctx, Telegram_DeleteHyperliquidSpotSniperConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telegramClient) UpdateHyperliquidSpotSniperConfig(ctx context.Context, in *UpdateHyperliquidSpotSniperConfigRequest, opts ...grpc.CallOption) (*UpdateHyperliquidSpotSniperConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateHyperliquidSpotSniperConfigResponse)
	err := c.cc.Invoke(ctx, Telegram_UpdateHyperliquidSpotSniperConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TelegramServer is the server API for Telegram service.
// All implementations must embed UnimplementedTelegramServer
// for forward compatibility
type TelegramServer interface {
	TelegramUser(context.Context, *TelegramUserRequest) (*TelegramUserResponse, error)
	TelegramUserWallets(context.Context, *TelegramUserWalletsRequest) (*TelegramUserWalletsResponse, error)
	// Launch
	HyperliquidLaunchTrade(context.Context, *HyperliquidLaunchTradeRequest) (*HyperliquidLaunchTradeResponse, error)
	LaunchHyperliquidLaunch(context.Context, *LaunchHyperliquidLaunchRequest) (*LaunchHyperliquidLaunchResponse, error)
	EditHyperliquidLaunch(context.Context, *EditHyperliquidLaunchRequest) (*EditHyperliquidLaunchResponse, error)
	// Spot
	HyperliquidSpotTrade(context.Context, *HyperliquidSpotTradeRequest) (*HyperliquidSpotTradeResponse, error)
	HyperliquidWalletSpotTwapSessions(context.Context, *HyperliquidWalletSpotTwapSessionsRequest) (*HyperliquidWalletSpotTwapSessionsResponse, error)
	HyperliquidSpotSniperConfigs(context.Context, *HyperliquidSpotSniperConfigsRequest) (*HyperliquidSpotSniperConfigsResponse, error)
	CreateHyperliquidSpotSniperConfig(context.Context, *CreateHyperliquidSpotSniperConfigRequest) (*CreateHyperliquidSpotSniperConfigResponse, error)
	DeleteHyperliquidSpotSniperConfig(context.Context, *DeleteHyperliquidSpotSniperConfigRequest) (*DeleteHyperliquidSpotSniperConfigResponse, error)
	UpdateHyperliquidSpotSniperConfig(context.Context, *UpdateHyperliquidSpotSniperConfigRequest) (*UpdateHyperliquidSpotSniperConfigResponse, error)
	mustEmbedUnimplementedTelegramServer()
}

// UnimplementedTelegramServer must be embedded to have forward compatible implementations.
type UnimplementedTelegramServer struct {
}

func (UnimplementedTelegramServer) TelegramUser(context.Context, *TelegramUserRequest) (*TelegramUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TelegramUser not implemented")
}
func (UnimplementedTelegramServer) TelegramUserWallets(context.Context, *TelegramUserWalletsRequest) (*TelegramUserWalletsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TelegramUserWallets not implemented")
}
func (UnimplementedTelegramServer) HyperliquidLaunchTrade(context.Context, *HyperliquidLaunchTradeRequest) (*HyperliquidLaunchTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HyperliquidLaunchTrade not implemented")
}
func (UnimplementedTelegramServer) LaunchHyperliquidLaunch(context.Context, *LaunchHyperliquidLaunchRequest) (*LaunchHyperliquidLaunchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LaunchHyperliquidLaunch not implemented")
}
func (UnimplementedTelegramServer) EditHyperliquidLaunch(context.Context, *EditHyperliquidLaunchRequest) (*EditHyperliquidLaunchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditHyperliquidLaunch not implemented")
}
func (UnimplementedTelegramServer) HyperliquidSpotTrade(context.Context, *HyperliquidSpotTradeRequest) (*HyperliquidSpotTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HyperliquidSpotTrade not implemented")
}
func (UnimplementedTelegramServer) HyperliquidWalletSpotTwapSessions(context.Context, *HyperliquidWalletSpotTwapSessionsRequest) (*HyperliquidWalletSpotTwapSessionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HyperliquidWalletSpotTwapSessions not implemented")
}
func (UnimplementedTelegramServer) HyperliquidSpotSniperConfigs(context.Context, *HyperliquidSpotSniperConfigsRequest) (*HyperliquidSpotSniperConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HyperliquidSpotSniperConfigs not implemented")
}
func (UnimplementedTelegramServer) CreateHyperliquidSpotSniperConfig(context.Context, *CreateHyperliquidSpotSniperConfigRequest) (*CreateHyperliquidSpotSniperConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHyperliquidSpotSniperConfig not implemented")
}
func (UnimplementedTelegramServer) DeleteHyperliquidSpotSniperConfig(context.Context, *DeleteHyperliquidSpotSniperConfigRequest) (*DeleteHyperliquidSpotSniperConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHyperliquidSpotSniperConfig not implemented")
}
func (UnimplementedTelegramServer) UpdateHyperliquidSpotSniperConfig(context.Context, *UpdateHyperliquidSpotSniperConfigRequest) (*UpdateHyperliquidSpotSniperConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHyperliquidSpotSniperConfig not implemented")
}
func (UnimplementedTelegramServer) mustEmbedUnimplementedTelegramServer() {}

// UnsafeTelegramServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TelegramServer will
// result in compilation errors.
type UnsafeTelegramServer interface {
	mustEmbedUnimplementedTelegramServer()
}

func RegisterTelegramServer(s grpc.ServiceRegistrar, srv TelegramServer) {
	s.RegisterService(&Telegram_ServiceDesc, srv)
}

func _Telegram_TelegramUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TelegramUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramServer).TelegramUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Telegram_TelegramUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramServer).TelegramUser(ctx, req.(*TelegramUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Telegram_TelegramUserWallets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TelegramUserWalletsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramServer).TelegramUserWallets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Telegram_TelegramUserWallets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramServer).TelegramUserWallets(ctx, req.(*TelegramUserWalletsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Telegram_HyperliquidLaunchTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HyperliquidLaunchTradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramServer).HyperliquidLaunchTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Telegram_HyperliquidLaunchTrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramServer).HyperliquidLaunchTrade(ctx, req.(*HyperliquidLaunchTradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Telegram_LaunchHyperliquidLaunch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LaunchHyperliquidLaunchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramServer).LaunchHyperliquidLaunch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Telegram_LaunchHyperliquidLaunch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramServer).LaunchHyperliquidLaunch(ctx, req.(*LaunchHyperliquidLaunchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Telegram_EditHyperliquidLaunch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditHyperliquidLaunchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramServer).EditHyperliquidLaunch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Telegram_EditHyperliquidLaunch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramServer).EditHyperliquidLaunch(ctx, req.(*EditHyperliquidLaunchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Telegram_HyperliquidSpotTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HyperliquidSpotTradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramServer).HyperliquidSpotTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Telegram_HyperliquidSpotTrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramServer).HyperliquidSpotTrade(ctx, req.(*HyperliquidSpotTradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Telegram_HyperliquidWalletSpotTwapSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HyperliquidWalletSpotTwapSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramServer).HyperliquidWalletSpotTwapSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Telegram_HyperliquidWalletSpotTwapSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramServer).HyperliquidWalletSpotTwapSessions(ctx, req.(*HyperliquidWalletSpotTwapSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Telegram_HyperliquidSpotSniperConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HyperliquidSpotSniperConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramServer).HyperliquidSpotSniperConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Telegram_HyperliquidSpotSniperConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramServer).HyperliquidSpotSniperConfigs(ctx, req.(*HyperliquidSpotSniperConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Telegram_CreateHyperliquidSpotSniperConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHyperliquidSpotSniperConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramServer).CreateHyperliquidSpotSniperConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Telegram_CreateHyperliquidSpotSniperConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramServer).CreateHyperliquidSpotSniperConfig(ctx, req.(*CreateHyperliquidSpotSniperConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Telegram_DeleteHyperliquidSpotSniperConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHyperliquidSpotSniperConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramServer).DeleteHyperliquidSpotSniperConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Telegram_DeleteHyperliquidSpotSniperConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramServer).DeleteHyperliquidSpotSniperConfig(ctx, req.(*DeleteHyperliquidSpotSniperConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Telegram_UpdateHyperliquidSpotSniperConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHyperliquidSpotSniperConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramServer).UpdateHyperliquidSpotSniperConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Telegram_UpdateHyperliquidSpotSniperConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramServer).UpdateHyperliquidSpotSniperConfig(ctx, req.(*UpdateHyperliquidSpotSniperConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Telegram_ServiceDesc is the grpc.ServiceDesc for Telegram service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Telegram_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hypurr.Telegram",
	HandlerType: (*TelegramServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TelegramUser",
			Handler:    _Telegram_TelegramUser_Handler,
		},
		{
			MethodName: "TelegramUserWallets",
			Handler:    _Telegram_TelegramUserWallets_Handler,
		},
		{
			MethodName: "HyperliquidLaunchTrade",
			Handler:    _Telegram_HyperliquidLaunchTrade_Handler,
		},
		{
			MethodName: "LaunchHyperliquidLaunch",
			Handler:    _Telegram_LaunchHyperliquidLaunch_Handler,
		},
		{
			MethodName: "EditHyperliquidLaunch",
			Handler:    _Telegram_EditHyperliquidLaunch_Handler,
		},
		{
			MethodName: "HyperliquidSpotTrade",
			Handler:    _Telegram_HyperliquidSpotTrade_Handler,
		},
		{
			MethodName: "HyperliquidWalletSpotTwapSessions",
			Handler:    _Telegram_HyperliquidWalletSpotTwapSessions_Handler,
		},
		{
			MethodName: "HyperliquidSpotSniperConfigs",
			Handler:    _Telegram_HyperliquidSpotSniperConfigs_Handler,
		},
		{
			MethodName: "CreateHyperliquidSpotSniperConfig",
			Handler:    _Telegram_CreateHyperliquidSpotSniperConfig_Handler,
		},
		{
			MethodName: "DeleteHyperliquidSpotSniperConfig",
			Handler:    _Telegram_DeleteHyperliquidSpotSniperConfig_Handler,
		},
		{
			MethodName: "UpdateHyperliquidSpotSniperConfig",
			Handler:    _Telegram_UpdateHyperliquidSpotSniperConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hypurr/telegram_service.proto",
}
