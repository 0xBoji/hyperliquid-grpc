// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.21.12
// source: hypurr/wallet.proto

package hypurr

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HyperliquidWallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64                        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name            string                       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	TelegramId      *wrapperspb.Int64Value       `protobuf:"bytes,3,opt,name=telegram_id,json=telegramId,proto3" json:"telegram_id,omitempty"`
	EthereumAddress string                       `protobuf:"bytes,4,opt,name=ethereum_address,json=ethereumAddress,proto3" json:"ethereum_address,omitempty"`
	Points          int32                        `protobuf:"varint,5,opt,name=points,proto3" json:"points,omitempty"`
	Movements       []*HyperliquidWalletMovement `protobuf:"bytes,6,rep,name=movements,proto3" json:"movements,omitempty"`
	SpotBalances    []*HyperliquidWalletBalance  `protobuf:"bytes,7,rep,name=spot_balances,json=spotBalances,proto3" json:"spot_balances,omitempty"`
	LaunchBalances  []*HyperliquidLaunchBalance  `protobuf:"bytes,8,rep,name=launch_balances,json=launchBalances,proto3" json:"launch_balances,omitempty"`
	IsAgent         bool                         `protobuf:"varint,9,opt,name=is_agent,json=isAgent,proto3" json:"is_agent,omitempty"`
	IsReadOnly      bool                         `protobuf:"varint,10,opt,name=is_read_only,json=isReadOnly,proto3" json:"is_read_only,omitempty"`
}

func (x *HyperliquidWallet) Reset() {
	*x = HyperliquidWallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_wallet_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidWallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidWallet) ProtoMessage() {}

func (x *HyperliquidWallet) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_wallet_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidWallet.ProtoReflect.Descriptor instead.
func (*HyperliquidWallet) Descriptor() ([]byte, []int) {
	return file_hypurr_wallet_proto_rawDescGZIP(), []int{0}
}

func (x *HyperliquidWallet) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *HyperliquidWallet) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HyperliquidWallet) GetTelegramId() *wrapperspb.Int64Value {
	if x != nil {
		return x.TelegramId
	}
	return nil
}

func (x *HyperliquidWallet) GetEthereumAddress() string {
	if x != nil {
		return x.EthereumAddress
	}
	return ""
}

func (x *HyperliquidWallet) GetPoints() int32 {
	if x != nil {
		return x.Points
	}
	return 0
}

func (x *HyperliquidWallet) GetMovements() []*HyperliquidWalletMovement {
	if x != nil {
		return x.Movements
	}
	return nil
}

func (x *HyperliquidWallet) GetSpotBalances() []*HyperliquidWalletBalance {
	if x != nil {
		return x.SpotBalances
	}
	return nil
}

func (x *HyperliquidWallet) GetLaunchBalances() []*HyperliquidLaunchBalance {
	if x != nil {
		return x.LaunchBalances
	}
	return nil
}

func (x *HyperliquidWallet) GetIsAgent() bool {
	if x != nil {
		return x.IsAgent
	}
	return false
}

func (x *HyperliquidWallet) GetIsReadOnly() bool {
	if x != nil {
		return x.IsReadOnly
	}
	return false
}

type HyperliquidWalletMovement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TelegramId  *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=telegram_id,json=telegramId,proto3" json:"telegram_id,omitempty"`
	Wallet      *HyperliquidWallet     `protobuf:"bytes,2,opt,name=wallet,proto3" json:"wallet,omitempty"`
	WalletId    int64                  `protobuf:"varint,3,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	Hash        string                 `protobuf:"bytes,4,opt,name=hash,proto3" json:"hash,omitempty"`
	Type        string                 `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	TokenId     int64                  `protobuf:"varint,6,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	Token       *HyperliquidToken      `protobuf:"bytes,7,opt,name=token,proto3" json:"token,omitempty"`
	Amount      float64                `protobuf:"fixed64,8,opt,name=amount,proto3" json:"amount,omitempty"`
	UsdcValue   float64                `protobuf:"fixed64,9,opt,name=usdc_value,json=usdcValue,proto3" json:"usdc_value,omitempty"`
	Destination string                 `protobuf:"bytes,10,opt,name=destination,proto3" json:"destination,omitempty"`
	Fee         float64                `protobuf:"fixed64,11,opt,name=fee,proto3" json:"fee,omitempty"`
	Timestamp   *wrapperspb.Int64Value `protobuf:"bytes,12,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *HyperliquidWalletMovement) Reset() {
	*x = HyperliquidWalletMovement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_wallet_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidWalletMovement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidWalletMovement) ProtoMessage() {}

func (x *HyperliquidWalletMovement) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_wallet_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidWalletMovement.ProtoReflect.Descriptor instead.
func (*HyperliquidWalletMovement) Descriptor() ([]byte, []int) {
	return file_hypurr_wallet_proto_rawDescGZIP(), []int{1}
}

func (x *HyperliquidWalletMovement) GetTelegramId() *wrapperspb.Int64Value {
	if x != nil {
		return x.TelegramId
	}
	return nil
}

func (x *HyperliquidWalletMovement) GetWallet() *HyperliquidWallet {
	if x != nil {
		return x.Wallet
	}
	return nil
}

func (x *HyperliquidWalletMovement) GetWalletId() int64 {
	if x != nil {
		return x.WalletId
	}
	return 0
}

func (x *HyperliquidWalletMovement) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *HyperliquidWalletMovement) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *HyperliquidWalletMovement) GetTokenId() int64 {
	if x != nil {
		return x.TokenId
	}
	return 0
}

func (x *HyperliquidWalletMovement) GetToken() *HyperliquidToken {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *HyperliquidWalletMovement) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *HyperliquidWalletMovement) GetUsdcValue() float64 {
	if x != nil {
		return x.UsdcValue
	}
	return 0
}

func (x *HyperliquidWalletMovement) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *HyperliquidWalletMovement) GetFee() float64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *HyperliquidWalletMovement) GetTimestamp() *wrapperspb.Int64Value {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type HyperliquidPublicWallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EthereumAddress string `protobuf:"bytes,1,opt,name=ethereum_address,json=ethereumAddress,proto3" json:"ethereum_address,omitempty"`
}

func (x *HyperliquidPublicWallet) Reset() {
	*x = HyperliquidPublicWallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_wallet_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidPublicWallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidPublicWallet) ProtoMessage() {}

func (x *HyperliquidPublicWallet) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_wallet_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidPublicWallet.ProtoReflect.Descriptor instead.
func (*HyperliquidPublicWallet) Descriptor() ([]byte, []int) {
	return file_hypurr_wallet_proto_rawDescGZIP(), []int{2}
}

func (x *HyperliquidPublicWallet) GetEthereumAddress() string {
	if x != nil {
		return x.EthereumAddress
	}
	return ""
}

type HyperliquidWalletBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TelegramId *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=telegram_id,json=telegramId,proto3" json:"telegram_id,omitempty"`
	WalletId   int64                  `protobuf:"varint,2,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	TokenId    int64                  `protobuf:"varint,3,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	Balance    float64                `protobuf:"fixed64,4,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *HyperliquidWalletBalance) Reset() {
	*x = HyperliquidWalletBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_wallet_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidWalletBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidWalletBalance) ProtoMessage() {}

func (x *HyperliquidWalletBalance) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_wallet_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidWalletBalance.ProtoReflect.Descriptor instead.
func (*HyperliquidWalletBalance) Descriptor() ([]byte, []int) {
	return file_hypurr_wallet_proto_rawDescGZIP(), []int{3}
}

func (x *HyperliquidWalletBalance) GetTelegramId() *wrapperspb.Int64Value {
	if x != nil {
		return x.TelegramId
	}
	return nil
}

func (x *HyperliquidWalletBalance) GetWalletId() int64 {
	if x != nil {
		return x.WalletId
	}
	return 0
}

func (x *HyperliquidWalletBalance) GetTokenId() int64 {
	if x != nil {
		return x.TokenId
	}
	return 0
}

func (x *HyperliquidWalletBalance) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

type HyperliquidLaunchBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TelegramId *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=telegram_id,json=telegramId,proto3" json:"telegram_id,omitempty"`
	WalletId   int64                  `protobuf:"varint,2,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	LaunchId   int64                  `protobuf:"varint,3,opt,name=launch_id,json=launchId,proto3" json:"launch_id,omitempty"`
	Balance    int64                  `protobuf:"varint,4,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *HyperliquidLaunchBalance) Reset() {
	*x = HyperliquidLaunchBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_wallet_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidLaunchBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidLaunchBalance) ProtoMessage() {}

func (x *HyperliquidLaunchBalance) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_wallet_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidLaunchBalance.ProtoReflect.Descriptor instead.
func (*HyperliquidLaunchBalance) Descriptor() ([]byte, []int) {
	return file_hypurr_wallet_proto_rawDescGZIP(), []int{4}
}

func (x *HyperliquidLaunchBalance) GetTelegramId() *wrapperspb.Int64Value {
	if x != nil {
		return x.TelegramId
	}
	return nil
}

func (x *HyperliquidLaunchBalance) GetWalletId() int64 {
	if x != nil {
		return x.WalletId
	}
	return 0
}

func (x *HyperliquidLaunchBalance) GetLaunchId() int64 {
	if x != nil {
		return x.LaunchId
	}
	return 0
}

func (x *HyperliquidLaunchBalance) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

type HyperliquidWalletDeploySession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64                                             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TelegramId      *wrapperspb.Int64Value                            `protobuf:"bytes,2,opt,name=telegram_id,json=telegramId,proto3" json:"telegram_id,omitempty"`
	Step            int32                                             `protobuf:"varint,3,opt,name=step,proto3" json:"step,omitempty"`
	TokenName       string                                            `protobuf:"bytes,4,opt,name=token_name,json=tokenName,proto3" json:"token_name,omitempty"`
	FullName        string                                            `protobuf:"bytes,5,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty"`
	TokenDecimals   int32                                             `protobuf:"varint,6,opt,name=token_decimals,json=tokenDecimals,proto3" json:"token_decimals,omitempty"`
	TokenWei        int32                                             `protobuf:"varint,7,opt,name=token_wei,json=tokenWei,proto3" json:"token_wei,omitempty"`
	TokenSupply     float64                                           `protobuf:"fixed64,8,opt,name=token_supply,json=tokenSupply,proto3" json:"token_supply,omitempty"`
	StartMarketCap  int32                                             `protobuf:"varint,9,opt,name=start_market_cap,json=startMarketCap,proto3" json:"start_market_cap,omitempty"`
	Anchor1TokenId  *wrapperspb.Int64Value                            `protobuf:"bytes,10,opt,name=anchor1_token_id,json=anchor1TokenId,proto3" json:"anchor1_token_id,omitempty"`
	Anchor1Token    *HyperliquidToken                                 `protobuf:"bytes,11,opt,name=anchor1_token,json=anchor1Token,proto3" json:"anchor1_token,omitempty"`
	Anchor2TokenId  *wrapperspb.Int64Value                            `protobuf:"bytes,12,opt,name=anchor2_token_id,json=anchor2TokenId,proto3" json:"anchor2_token_id,omitempty"`
	Anchor2Token    *HyperliquidToken                                 `protobuf:"bytes,13,opt,name=anchor2_token,json=anchor2Token,proto3" json:"anchor2_token,omitempty"`
	TokenId         *wrapperspb.Int64Value                            `protobuf:"bytes,14,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	SpotPairId      int32                                             `protobuf:"varint,15,opt,name=spot_pair_id,json=spotPairId,proto3" json:"spot_pair_id,omitempty"`
	DeployThreshold float64                                           `protobuf:"fixed64,16,opt,name=deploy_threshold,json=deployThreshold,proto3" json:"deploy_threshold,omitempty"`
	Geneses         map[string]*HyperliquidWalletDeploySessionGenesis `protobuf:"bytes,17,rep,name=geneses,proto3" json:"geneses,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *HyperliquidWalletDeploySession) Reset() {
	*x = HyperliquidWalletDeploySession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_wallet_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidWalletDeploySession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidWalletDeploySession) ProtoMessage() {}

func (x *HyperliquidWalletDeploySession) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_wallet_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidWalletDeploySession.ProtoReflect.Descriptor instead.
func (*HyperliquidWalletDeploySession) Descriptor() ([]byte, []int) {
	return file_hypurr_wallet_proto_rawDescGZIP(), []int{5}
}

func (x *HyperliquidWalletDeploySession) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *HyperliquidWalletDeploySession) GetTelegramId() *wrapperspb.Int64Value {
	if x != nil {
		return x.TelegramId
	}
	return nil
}

func (x *HyperliquidWalletDeploySession) GetStep() int32 {
	if x != nil {
		return x.Step
	}
	return 0
}

func (x *HyperliquidWalletDeploySession) GetTokenName() string {
	if x != nil {
		return x.TokenName
	}
	return ""
}

func (x *HyperliquidWalletDeploySession) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *HyperliquidWalletDeploySession) GetTokenDecimals() int32 {
	if x != nil {
		return x.TokenDecimals
	}
	return 0
}

func (x *HyperliquidWalletDeploySession) GetTokenWei() int32 {
	if x != nil {
		return x.TokenWei
	}
	return 0
}

func (x *HyperliquidWalletDeploySession) GetTokenSupply() float64 {
	if x != nil {
		return x.TokenSupply
	}
	return 0
}

func (x *HyperliquidWalletDeploySession) GetStartMarketCap() int32 {
	if x != nil {
		return x.StartMarketCap
	}
	return 0
}

func (x *HyperliquidWalletDeploySession) GetAnchor1TokenId() *wrapperspb.Int64Value {
	if x != nil {
		return x.Anchor1TokenId
	}
	return nil
}

func (x *HyperliquidWalletDeploySession) GetAnchor1Token() *HyperliquidToken {
	if x != nil {
		return x.Anchor1Token
	}
	return nil
}

func (x *HyperliquidWalletDeploySession) GetAnchor2TokenId() *wrapperspb.Int64Value {
	if x != nil {
		return x.Anchor2TokenId
	}
	return nil
}

func (x *HyperliquidWalletDeploySession) GetAnchor2Token() *HyperliquidToken {
	if x != nil {
		return x.Anchor2Token
	}
	return nil
}

func (x *HyperliquidWalletDeploySession) GetTokenId() *wrapperspb.Int64Value {
	if x != nil {
		return x.TokenId
	}
	return nil
}

func (x *HyperliquidWalletDeploySession) GetSpotPairId() int32 {
	if x != nil {
		return x.SpotPairId
	}
	return 0
}

func (x *HyperliquidWalletDeploySession) GetDeployThreshold() float64 {
	if x != nil {
		return x.DeployThreshold
	}
	return 0
}

func (x *HyperliquidWalletDeploySession) GetGeneses() map[string]*HyperliquidWalletDeploySessionGenesis {
	if x != nil {
		return x.Geneses
	}
	return nil
}

type HyperliquidWalletDeploySessionGenesis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Share  int32  `protobuf:"varint,2,opt,name=share,proto3" json:"share,omitempty"`
}

func (x *HyperliquidWalletDeploySessionGenesis) Reset() {
	*x = HyperliquidWalletDeploySessionGenesis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_wallet_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidWalletDeploySessionGenesis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidWalletDeploySessionGenesis) ProtoMessage() {}

func (x *HyperliquidWalletDeploySessionGenesis) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_wallet_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidWalletDeploySessionGenesis.ProtoReflect.Descriptor instead.
func (*HyperliquidWalletDeploySessionGenesis) Descriptor() ([]byte, []int) {
	return file_hypurr_wallet_proto_rawDescGZIP(), []int{6}
}

func (x *HyperliquidWalletDeploySessionGenesis) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *HyperliquidWalletDeploySessionGenesis) GetShare() int32 {
	if x != nil {
		return x.Share
	}
	return 0
}

type PerformancePoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time     int64   `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Notional float32 `protobuf:"fixed32,2,opt,name=notional,proto3" json:"notional,omitempty"`
	Pnl      float32 `protobuf:"fixed32,3,opt,name=pnl,proto3" json:"pnl,omitempty"`
}

func (x *PerformancePoint) Reset() {
	*x = PerformancePoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_wallet_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerformancePoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformancePoint) ProtoMessage() {}

func (x *PerformancePoint) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_wallet_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformancePoint.ProtoReflect.Descriptor instead.
func (*PerformancePoint) Descriptor() ([]byte, []int) {
	return file_hypurr_wallet_proto_rawDescGZIP(), []int{7}
}

func (x *PerformancePoint) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *PerformancePoint) GetNotional() float32 {
	if x != nil {
		return x.Notional
	}
	return 0
}

func (x *PerformancePoint) GetPnl() float32 {
	if x != nil {
		return x.Pnl
	}
	return 0
}

type PerformanceReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenId     int64   `protobuf:"varint,1,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	TotalPnl    float32 `protobuf:"fixed32,2,opt,name=total_pnl,json=totalPnl,proto3" json:"total_pnl,omitempty"`
	RunningPnl  float32 `protobuf:"fixed32,3,opt,name=running_pnl,json=runningPnl,proto3" json:"running_pnl,omitempty"`
	Size        float32 `protobuf:"fixed32,4,opt,name=size,proto3" json:"size,omitempty"`
	Price       float32 `protobuf:"fixed32,5,opt,name=price,proto3" json:"price,omitempty"`
	EntryPrice  float32 `protobuf:"fixed32,6,opt,name=entry_price,json=entryPrice,proto3" json:"entry_price,omitempty"`
	TotalCost   float32 `protobuf:"fixed32,7,opt,name=total_cost,json=totalCost,proto3" json:"total_cost,omitempty"`
	RunningCost float32 `protobuf:"fixed32,8,opt,name=running_cost,json=runningCost,proto3" json:"running_cost,omitempty"`
}

func (x *PerformanceReport) Reset() {
	*x = PerformanceReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_wallet_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerformanceReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformanceReport) ProtoMessage() {}

func (x *PerformanceReport) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_wallet_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformanceReport.ProtoReflect.Descriptor instead.
func (*PerformanceReport) Descriptor() ([]byte, []int) {
	return file_hypurr_wallet_proto_rawDescGZIP(), []int{8}
}

func (x *PerformanceReport) GetTokenId() int64 {
	if x != nil {
		return x.TokenId
	}
	return 0
}

func (x *PerformanceReport) GetTotalPnl() float32 {
	if x != nil {
		return x.TotalPnl
	}
	return 0
}

func (x *PerformanceReport) GetRunningPnl() float32 {
	if x != nil {
		return x.RunningPnl
	}
	return 0
}

func (x *PerformanceReport) GetSize() float32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *PerformanceReport) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *PerformanceReport) GetEntryPrice() float32 {
	if x != nil {
		return x.EntryPrice
	}
	return 0
}

func (x *PerformanceReport) GetTotalCost() float32 {
	if x != nil {
		return x.TotalCost
	}
	return 0
}

func (x *PerformanceReport) GetRunningCost() float32 {
	if x != nil {
		return x.RunningCost
	}
	return 0
}

type Performance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetCash  float32              `protobuf:"fixed32,1,opt,name=net_cash,json=netCash,proto3" json:"net_cash,omitempty"`
	Notional float32              `protobuf:"fixed32,2,opt,name=notional,proto3" json:"notional,omitempty"`
	Reports  []*PerformanceReport `protobuf:"bytes,3,rep,name=reports,proto3" json:"reports,omitempty"`
	Points   []*PerformancePoint  `protobuf:"bytes,4,rep,name=points,proto3" json:"points,omitempty"`
}

func (x *Performance) Reset() {
	*x = Performance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_wallet_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Performance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Performance) ProtoMessage() {}

func (x *Performance) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_wallet_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Performance.ProtoReflect.Descriptor instead.
func (*Performance) Descriptor() ([]byte, []int) {
	return file_hypurr_wallet_proto_rawDescGZIP(), []int{9}
}

func (x *Performance) GetNetCash() float32 {
	if x != nil {
		return x.NetCash
	}
	return 0
}

func (x *Performance) GetNotional() float32 {
	if x != nil {
		return x.Notional
	}
	return 0
}

func (x *Performance) GetReports() []*PerformanceReport {
	if x != nil {
		return x.Reports
	}
	return nil
}

func (x *Performance) GetPoints() []*PerformancePoint {
	if x != nil {
		return x.Points
	}
	return nil
}

var File_hypurr_wallet_proto protoreflect.FileDescriptor

var file_hypurr_wallet_proto_rawDesc = []byte{
	0x0a, 0x13, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x68,
	0x79, 0x70, 0x75, 0x72, 0x72, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xc8, 0x03, 0x0a, 0x11, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69,
	0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x74,
	0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x74,
	0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x65, 0x75, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x3f, 0x0a, 0x09,
	0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x09, 0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x45, 0x0a,
	0x0d, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79,
	0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0c, 0x73, 0x70, 0x6f, 0x74, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x0f, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x5f, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75,
	0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x0e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x69, 0x73, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73,
	0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0xc2, 0x03, 0x0a,
	0x19, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x0b, 0x74, 0x65,
	0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x74, 0x65,
	0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x06, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72,
	0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x52, 0x06, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x79, 0x70,
	0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x64, 0x63, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x75, 0x73, 0x64, 0x63, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x22, 0x44, 0x0a, 0x17, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x29, 0x0a, 0x10,
	0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xaa, 0x01, 0x0a, 0x18, 0x48, 0x79, 0x70, 0x65,
	0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x22, 0xac, 0x01, 0x0a, 0x18, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0a, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x22, 0x9a, 0x07, 0x0a, 0x1e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71,
	0x75, 0x69, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x0b, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72,
	0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72,
	0x61, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x64, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x77, 0x65, 0x69, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x57, 0x65, 0x69, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x61, 0x70, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x43, 0x61, 0x70, 0x12, 0x45, 0x0a, 0x10, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x31,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x61, 0x6e,
	0x63, 0x68, 0x6f, 0x72, 0x31, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0d,
	0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x31, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70,
	0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x0c, 0x61,
	0x6e, 0x63, 0x68, 0x6f, 0x72, 0x31, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x45, 0x0a, 0x10, 0x61,
	0x6e, 0x63, 0x68, 0x6f, 0x72, 0x32, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0e, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x32, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0d, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x32, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x79, 0x70, 0x75,
	0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x0c, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x32, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x36, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x70, 0x6f,
	0x74, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x73, 0x70, 0x6f, 0x74, 0x50, 0x61, 0x69, 0x72, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x4d, 0x0a, 0x07, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x65,
	0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72,
	0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x47, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x67, 0x65,
	0x6e, 0x65, 0x73, 0x65, 0x73, 0x1a, 0x69, 0x0a, 0x0c, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x43, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e,
	0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x65,
	0x6e, 0x65, 0x73, 0x69, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x55, 0x0a, 0x25, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x73, 0x68, 0x61, 0x72, 0x65, 0x22, 0x54, 0x0a, 0x10, 0x50, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x08, 0x6e, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x70,
	0x6e, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x70, 0x6e, 0x6c, 0x22, 0xf9, 0x01,
	0x0a, 0x11, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x6e, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6e, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6e, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0a, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6e, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x72, 0x75,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x73, 0x74, 0x22, 0xab, 0x01, 0x0a, 0x0b, 0x50, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x74,
	0x5f, 0x63, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x6e, 0x65, 0x74,
	0x43, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6e, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x12, 0x33, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x07, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x50,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52,
	0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x42, 0x29, 0x5a, 0x27, 0x67, 0x69, 0x74, 0x6c, 0x61,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2f, 0x68, 0x79, 0x70,
	0x75, 0x72, 0x72, 0x2d, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x67, 0x6f, 0x2f, 0x68, 0x79, 0x70, 0x75,
	0x72, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_hypurr_wallet_proto_rawDescOnce sync.Once
	file_hypurr_wallet_proto_rawDescData = file_hypurr_wallet_proto_rawDesc
)

func file_hypurr_wallet_proto_rawDescGZIP() []byte {
	file_hypurr_wallet_proto_rawDescOnce.Do(func() {
		file_hypurr_wallet_proto_rawDescData = protoimpl.X.CompressGZIP(file_hypurr_wallet_proto_rawDescData)
	})
	return file_hypurr_wallet_proto_rawDescData
}

var file_hypurr_wallet_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_hypurr_wallet_proto_goTypes = []any{
	(*HyperliquidWallet)(nil),                     // 0: hypurr.HyperliquidWallet
	(*HyperliquidWalletMovement)(nil),             // 1: hypurr.HyperliquidWalletMovement
	(*HyperliquidPublicWallet)(nil),               // 2: hypurr.HyperliquidPublicWallet
	(*HyperliquidWalletBalance)(nil),              // 3: hypurr.HyperliquidWalletBalance
	(*HyperliquidLaunchBalance)(nil),              // 4: hypurr.HyperliquidLaunchBalance
	(*HyperliquidWalletDeploySession)(nil),        // 5: hypurr.HyperliquidWalletDeploySession
	(*HyperliquidWalletDeploySessionGenesis)(nil), // 6: hypurr.HyperliquidWalletDeploySessionGenesis
	(*PerformancePoint)(nil),                      // 7: hypurr.PerformancePoint
	(*PerformanceReport)(nil),                     // 8: hypurr.PerformanceReport
	(*Performance)(nil),                           // 9: hypurr.Performance
	nil,                                           // 10: hypurr.HyperliquidWalletDeploySession.GenesesEntry
	(*wrapperspb.Int64Value)(nil),                 // 11: google.protobuf.Int64Value
	(*HyperliquidToken)(nil),                      // 12: hypurr.HyperliquidToken
}
var file_hypurr_wallet_proto_depIdxs = []int32{
	11, // 0: hypurr.HyperliquidWallet.telegram_id:type_name -> google.protobuf.Int64Value
	1,  // 1: hypurr.HyperliquidWallet.movements:type_name -> hypurr.HyperliquidWalletMovement
	3,  // 2: hypurr.HyperliquidWallet.spot_balances:type_name -> hypurr.HyperliquidWalletBalance
	4,  // 3: hypurr.HyperliquidWallet.launch_balances:type_name -> hypurr.HyperliquidLaunchBalance
	11, // 4: hypurr.HyperliquidWalletMovement.telegram_id:type_name -> google.protobuf.Int64Value
	0,  // 5: hypurr.HyperliquidWalletMovement.wallet:type_name -> hypurr.HyperliquidWallet
	12, // 6: hypurr.HyperliquidWalletMovement.token:type_name -> hypurr.HyperliquidToken
	11, // 7: hypurr.HyperliquidWalletMovement.timestamp:type_name -> google.protobuf.Int64Value
	11, // 8: hypurr.HyperliquidWalletBalance.telegram_id:type_name -> google.protobuf.Int64Value
	11, // 9: hypurr.HyperliquidLaunchBalance.telegram_id:type_name -> google.protobuf.Int64Value
	11, // 10: hypurr.HyperliquidWalletDeploySession.telegram_id:type_name -> google.protobuf.Int64Value
	11, // 11: hypurr.HyperliquidWalletDeploySession.anchor1_token_id:type_name -> google.protobuf.Int64Value
	12, // 12: hypurr.HyperliquidWalletDeploySession.anchor1_token:type_name -> hypurr.HyperliquidToken
	11, // 13: hypurr.HyperliquidWalletDeploySession.anchor2_token_id:type_name -> google.protobuf.Int64Value
	12, // 14: hypurr.HyperliquidWalletDeploySession.anchor2_token:type_name -> hypurr.HyperliquidToken
	11, // 15: hypurr.HyperliquidWalletDeploySession.token_id:type_name -> google.protobuf.Int64Value
	10, // 16: hypurr.HyperliquidWalletDeploySession.geneses:type_name -> hypurr.HyperliquidWalletDeploySession.GenesesEntry
	8,  // 17: hypurr.Performance.reports:type_name -> hypurr.PerformanceReport
	7,  // 18: hypurr.Performance.points:type_name -> hypurr.PerformancePoint
	6,  // 19: hypurr.HyperliquidWalletDeploySession.GenesesEntry.value:type_name -> hypurr.HyperliquidWalletDeploySessionGenesis
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_hypurr_wallet_proto_init() }
func file_hypurr_wallet_proto_init() {
	if File_hypurr_wallet_proto != nil {
		return
	}
	file_hypurr_token_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_hypurr_wallet_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidWallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_wallet_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidWalletMovement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_wallet_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidPublicWallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_wallet_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidWalletBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_wallet_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidLaunchBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_wallet_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidWalletDeploySession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_wallet_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidWalletDeploySessionGenesis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_wallet_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*PerformancePoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_wallet_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*PerformanceReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_wallet_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*Performance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_hypurr_wallet_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_hypurr_wallet_proto_goTypes,
		DependencyIndexes: file_hypurr_wallet_proto_depIdxs,
		MessageInfos:      file_hypurr_wallet_proto_msgTypes,
	}.Build()
	File_hypurr_wallet_proto = out.File
	file_hypurr_wallet_proto_rawDesc = nil
	file_hypurr_wallet_proto_goTypes = nil
	file_hypurr_wallet_proto_depIdxs = nil
}
