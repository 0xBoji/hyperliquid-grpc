syntax = "proto3";
package eoa;
option go_package = "gitlab.com/hypurr/hypurr-grpc/go/hypurr/eoa";

import "hypurr/wallet.proto";
import "hypurr/launch.proto";

message EOASignature {
  string r = 1;
  string s = 2;
  uint32 v = 3;
}

message HyperliquidLaunchTradeRequest {
  string signature = 1;
  int64 launch_id = 2;
  int64 wallet_id = 3;
  HyperliquidLaunchTradeDirection direction = 4;
  string amount = 5;
  string ethereum_address = 6;
  int64 time = 7;
  double max_slippage = 8;
}

enum HyperliquidLaunchTradeDirection {
  BUY = 0;
  SELL = 1;
}

message HyperliquidLaunchTradeResponse {
  double base_amount = 1;
  double quote_amount = 2;
  string message = 3;
  bool success = 4;
}

message HyperliquidSpotTradeRequest {
  int64 pair_id = 1;
  int64 wallet_id = 2;
  HyperliquidLaunchTradeDirection direction = 3;
  double amount = 4;
}

message HyperliquidSpotTradeResponse {
  double base_amount = 1;
  double quote_amount = 2;
  string message = 3;
  bool success = 4;
}

message LaunchHyperliquidLaunchRequest {
  string base_asset = 1;
  string quote_asset = 2;
  double amount = 3;
}

message EOAUserAgentChallengeRequest {
  string address = 1;
}

message EOAUserAgentChallengeResponse {
  string agent = 1;
}

message EOAUserRequest {
  EIP712Signature signature = 1;
}

message EIP712Signature {
  string agentAddress = 1;
  string agentName = 2;
  int64 nonce = 3;
  string signature = 4;
}

message EOAUserResponse {
  EOAToken token = 1;
  hypurr.HyperliquidWallet wallet = 2;
}

message EOAToken {
  string secret = 1;
  int64 expires_at = 2;
}

message PendingHyperliquidLaunchRequest {
}

message PendingHyperliquidLaunchResponse {
  hypurr.HyperliquidLaunch launch = 1;
}

// Authed endpoints
service EOA {
  rpc EOAUserAgentChallenge (EOAUserAgentChallengeRequest) returns (EOAUserAgentChallengeResponse) {}
  rpc EOAUser (EOAUserRequest) returns (EOAUserResponse) {}

  // Launch
  rpc PendingHyperliquidLaunch (PendingHyperliquidLaunchRequest) returns (PendingHyperliquidLaunchResponse) {}
  rpc HyperliquidLaunchTrade (HyperliquidLaunchTradeRequest) returns (HyperliquidLaunchTradeResponse) {}

  // Spot
  rpc HyperliquidSpotTrade (HyperliquidSpotTradeRequest) returns (HyperliquidSpotTradeResponse) {}
}
