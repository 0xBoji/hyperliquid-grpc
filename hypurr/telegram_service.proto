syntax = "proto3";
package hypurr;
option go_package = "gitlab.com/hypurr/hypurr-grpc/go/hypurr";

import "google/protobuf/wrappers.proto";

import "hypurr/tools.proto";
import "hypurr/wallet.proto";
import "hypurr/user.proto";
import "hypurr/launch.proto";

// Auth endpoints
message TelegramUserRequest {
  map<string, string> auth_data = 1;
}

message TelegramUserResponse {
  TelegramUser user = 1;
}

message TelegramUserWalletsRequest {
  map<string, string> auth_data = 1;
}

message TelegramUserWalletsResponse {
  repeated HyperliquidWallet wallets = 1;
}

message HyperliquidLaunchTradeRequest {
  map<string, string> auth_data = 1;
  int64 launch_id = 2;
  int64 wallet_id = 3;
  HyperliquidLaunchTradeDirection direction = 4;
  double amount = 5;
}

enum HyperliquidLaunchTradeDirection {
  BUY = 0;
  SELL = 1;
}

message HyperliquidLaunchTradeResponse {
  double base_amount = 1;
  double quote_amount = 2;
  string message = 3;
  bool success = 4;
}

message HyperliquidSpotTradeRequest {
  map<string, string> auth_data = 1;
  int64 pair_id = 2;
  int64 wallet_id = 3;
  HyperliquidLaunchTradeDirection direction = 4;
  double amount = 5;
}

message HyperliquidSpotTradeResponse {
  double base_amount = 1;
  double quote_amount = 2;
  string message = 3;
  bool success = 4;
}

message HyperliquidSpotSniperConfigsRequest {
  map<string, string> auth_data = 1;
}

message HyperliquidSpotSniperConfigsResponse {
  repeated HyperliquidSpotSniperConfig configs = 1;
}

message DeleteHyperliquidSpotSniperConfigRequest {
  map<string, string> auth_data = 1;
  int64 config_id = 2;
}

message DeleteHyperliquidSpotSniperConfigResponse {
  bool success = 1;
}

message CreateHyperliquidSpotSniperConfigRequest {
  map<string, string> auth_data = 1;
  HyperliquidSpotSniperConfig config = 2;
}

message CreateHyperliquidSpotSniperConfigResponse {
  bool success = 1;
  HyperliquidSpotSniperConfig config = 2;
}

message UpdateHyperliquidSpotSniperConfigRequest {
  map<string, string> auth_data = 1;
  HyperliquidSpotSniperConfig config = 2;
}

message UpdateHyperliquidSpotSniperConfigResponse {
  bool success = 1;
}

message HyperliquidWalletSpotTwapSessionsRequest {
  map<string, string> auth_data = 1;
  int64 wallet_id = 2;
}

message HyperliquidWalletSpotTwapSessionsResponse {
  repeated HyperliquidWalletSpotTwapSession sessions = 1;
}

enum MediaType {
  MEDIA_TYPE_PHOTO = 0;
  MEDIA_TYPE_ANIMATION = 1;
  MEDIA_TYPE_VIDEO = 2;
}

message LaunchHyperliquidLaunchRequest {
  map<string, string> auth_data = 1;
  int64 wallet_id = 2;
  string description = 3;
  string full_name = 4;
  string token_name = 5;
  bytes media = 6;
  MediaType media_type = 7;
  int64 dev_lockup_seconds = 8;
  double initial_purchase_notional = 9;
}

message LaunchHyperliquidLaunchResponse {
 HyperliquidLaunch launch = 1;
}

message EditHyperliquidLaunchRequest {
  map<string, string> auth_data = 1;
  int64 launch_id = 2;
  string description = 3;
  string full_name = 4;
  google.protobuf.BytesValue media = 5;
  MediaType media_type = 6;
  int64 dev_lockup_seconds = 7;
}

message EditHyperliquidLaunchResponse {
  HyperliquidLaunch launch = 1;
}

service Telegram {
  rpc TelegramUser (TelegramUserRequest) returns (TelegramUserResponse) {}
  rpc TelegramUserWallets (TelegramUserWalletsRequest) returns (TelegramUserWalletsResponse) {}

  // Launch
  rpc HyperliquidLaunchTrade (HyperliquidLaunchTradeRequest) returns (HyperliquidLaunchTradeResponse) {}
  rpc LaunchHyperliquidLaunch (LaunchHyperliquidLaunchRequest) returns (LaunchHyperliquidLaunchResponse) {}
  rpc EditHyperliquidLaunch (EditHyperliquidLaunchRequest) returns (EditHyperliquidLaunchResponse) {}

  // Spot
  rpc HyperliquidSpotTrade (HyperliquidSpotTradeRequest) returns (HyperliquidSpotTradeResponse) {}

  rpc HyperliquidWalletSpotTwapSessions (HyperliquidWalletSpotTwapSessionsRequest) returns (HyperliquidWalletSpotTwapSessionsResponse) {}

  rpc HyperliquidSpotSniperConfigs (HyperliquidSpotSniperConfigsRequest) returns (HyperliquidSpotSniperConfigsResponse) {}
  rpc CreateHyperliquidSpotSniperConfig (CreateHyperliquidSpotSniperConfigRequest) returns (CreateHyperliquidSpotSniperConfigResponse) {}
  rpc DeleteHyperliquidSpotSniperConfig (DeleteHyperliquidSpotSniperConfigRequest) returns (DeleteHyperliquidSpotSniperConfigResponse) {}
  rpc UpdateHyperliquidSpotSniperConfig (UpdateHyperliquidSpotSniperConfigRequest) returns (UpdateHyperliquidSpotSniperConfigResponse) {}
}
